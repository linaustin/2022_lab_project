
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080097a4  080097a4  000197a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009808  08009808  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009810  08009810  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009814  08009814  00019814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000884  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000914  20000914  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0a4  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf4  00000000  00000000  0003a164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0003de58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a1b  00000000  00000000  00040488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac15  00000000  00000000  00064ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd63  00000000  00000000  0007fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d81b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056e8  00000000  00000000  0014d86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800978c 	.word	0x0800978c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800978c 	.word	0x0800978c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fcbe 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f818 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f93e 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000594:	f000 f87e 	bl	8000694 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000598:	f000 f8aa 	bl	80006f0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800059c:	f000 f8d8 	bl	8000750 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005a0:	f008 f93c 	bl	800881c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f90a 	bl	80007bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_UART_Receive_IT(&huart2, &rx_data, 10);
 80005a8:	220a      	movs	r2, #10
 80005aa:	4903      	ldr	r1, [pc, #12]	; (80005b8 <main+0x34>)
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <main+0x38>)
 80005ae:	f004 f9c9 	bl	8004944 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b2:	f008 f959 	bl	8008868 <MX_USB_HOST_Process>
 80005b6:	e7fc      	b.n	80005b2 <main+0x2e>
 80005b8:	2000020c 	.word	0x2000020c
 80005bc:	200001a0 	.word	0x200001a0

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f008 fc66 	bl	8008ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000634:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063e:	2307      	movs	r3, #7
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fa3c 	bl	8003ac4 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000652:	f000 fa1b 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000662:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2105      	movs	r1, #5
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fc9d 	bl	8003fb4 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000680:	f000 fa04 	bl	8000a8c <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f002 fc13 	bl	8002efc <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f9d6 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_I2S3_Init+0x54>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_I2S3_Init+0x58>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2S3_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_I2S3_Init+0x54>)
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <MX_I2S3_Init+0x5c>)
 800071a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_I2S3_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2S3_Init+0x54>)
 8000730:	f002 fd28 	bl	8003184 <HAL_I2S_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073a:	f000 f9a7 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000100 	.word	0x20000100
 8000748:	40003c00 	.word	0x40003c00
 800074c:	00017700 	.word	0x00017700

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x64>)
 80007a2:	f003 ff67 	bl	8004674 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f96e 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000148 	.word	0x20000148
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f003 ffc7 	bl	8004786 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f945 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001a0 	.word	0x200001a0
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a71      	ldr	r2, [pc, #452]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6a      	ldr	r2, [pc, #424]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b64      	ldr	r3, [pc, #400]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a63      	ldr	r2, [pc, #396]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b61      	ldr	r3, [pc, #388]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a5c      	ldr	r2, [pc, #368]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b5a      	ldr	r3, [pc, #360]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a55      	ldr	r2, [pc, #340]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a4e      	ldr	r2, [pc, #312]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4849      	ldr	r0, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 80008d4:	f000 feee 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4847      	ldr	r0, [pc, #284]	; (80009fc <MX_GPIO_Init+0x1ec>)
 80008de:	f000 fee9 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	2200      	movs	r2, #0
 80008e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80008ea:	f000 fee3 	bl	80016b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	483c      	ldr	r0, [pc, #240]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 8000906:	f000 fd39 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4836      	ldr	r0, [pc, #216]	; (80009fc <MX_GPIO_Init+0x1ec>)
 8000922:	f000 fd2b 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	482e      	ldr	r0, [pc, #184]	; (80009fc <MX_GPIO_Init+0x1ec>)
 8000942:	f000 fd1b 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	482a      	ldr	r0, [pc, #168]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800095c:	f000 fd0e 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000960:	2304      	movs	r3, #4
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000974:	f000 fd02 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000996:	f000 fcf1 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800099e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80009b4:	f000 fce2 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b8:	2320      	movs	r3, #32
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80009cc:	f000 fcd6 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 80009e6:	f000 fcc9 	bl	800137c <HAL_GPIO_Init>

}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400

08000a0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_UART_RxCpltCallback+0x68>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d126      	bne.n	8000a6c <HAL_UART_RxCpltCallback+0x60>
		num++;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_UART_RxCpltCallback+0x6c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <HAL_UART_RxCpltCallback+0x6c>)
 8000a26:	6013      	str	r3, [r2, #0]

		sprintf(tx_data,"%d:I receive : %s", num, rx_data);
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_UART_RxCpltCallback+0x6c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_UART_RxCpltCallback+0x70>)
 8000a2e:	4914      	ldr	r1, [pc, #80]	; (8000a80 <HAL_UART_RxCpltCallback+0x74>)
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <HAL_UART_RxCpltCallback+0x78>)
 8000a32:	f008 fb2d 	bl	8009090 <siprintf>
		HAL_UART_Transmit(&huart2, &tx_data, strlen(tx_data), 0xffff);
 8000a36:	4813      	ldr	r0, [pc, #76]	; (8000a84 <HAL_UART_RxCpltCallback+0x78>)
 8000a38:	f7ff fbca 	bl	80001d0 <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a44:	490f      	ldr	r1, [pc, #60]	; (8000a84 <HAL_UART_RxCpltCallback+0x78>)
 8000a46:	4810      	ldr	r0, [pc, #64]	; (8000a88 <HAL_UART_RxCpltCallback+0x7c>)
 8000a48:	f003 feea 	bl	8004820 <HAL_UART_Transmit>

		memset(&rx_data, '\0', sizeof(rx_data));
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	2100      	movs	r1, #0
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <HAL_UART_RxCpltCallback+0x70>)
 8000a52:	f008 fa25 	bl	8008ea0 <memset>
		memset(&tx_data, '\0', sizeof(tx_data));
 8000a56:	2228      	movs	r2, #40	; 0x28
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480a      	ldr	r0, [pc, #40]	; (8000a84 <HAL_UART_RxCpltCallback+0x78>)
 8000a5c:	f008 fa20 	bl	8008ea0 <memset>

		HAL_UART_Receive_IT(&huart2, &rx_data, 10);
 8000a60:	220a      	movs	r2, #10
 8000a62:	4906      	ldr	r1, [pc, #24]	; (8000a7c <HAL_UART_RxCpltCallback+0x70>)
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <HAL_UART_RxCpltCallback+0x7c>)
 8000a66:	f003 ff6d 	bl	8004944 <HAL_UART_Receive_IT>
	}


	return;
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
}
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40004400 	.word	0x40004400
 8000a78:	20000218 	.word	0x20000218
 8000a7c:	2000020c 	.word	0x2000020c
 8000a80:	080097a4 	.word	0x080097a4
 8000a84:	200001e4 	.word	0x200001e4
 8000a88:	200001a0 	.word	0x200001a0

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 fb7c 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12c      	bne.n	8000b64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b44:	f000 fc1a 	bl	800137c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400

08000b78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <HAL_I2S_MspInit+0xf0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d15a      	bne.n	8000c5e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bac:	23c0      	movs	r3, #192	; 0xc0
 8000bae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 fc1b 	bl	80043f4 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bc4:	f7ff ff62 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_I2S_MspInit+0xf4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	480e      	ldr	r0, [pc, #56]	; (8000c70 <HAL_I2S_MspInit+0xf8>)
 8000c38:	f000 fba0 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c3c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4806      	ldr	r0, [pc, #24]	; (8000c74 <HAL_I2S_MspInit+0xfc>)
 8000c5a:	f000 fb8f 	bl	800137c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3738      	adds	r7, #56	; 0x38
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40003c00 	.word	0x40003c00
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020800 	.word	0x40020800

08000c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_SPI_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12b      	bne.n	8000cf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cd2:	23e0      	movs	r3, #224	; 0xe0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_SPI_MspInit+0x8c>)
 8000cee:	f000 fb45 	bl	800137c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <HAL_UART_MspInit+0x94>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d133      	bne.n	8000d92 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d62:	230c      	movs	r3, #12
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d72:	2307      	movs	r3, #7
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <HAL_UART_MspInit+0x9c>)
 8000d7e:	f000 fafd 	bl	800137c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2026      	movs	r0, #38	; 0x26
 8000d88:	f000 fa2f 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d8c:	2026      	movs	r0, #38	; 0x26
 8000d8e:	f000 fa48 	bl	8001222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8da 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <USART2_IRQHandler+0x10>)
 8000e02:	f003 fdcf 	bl	80049a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001a0 	.word	0x200001a0

08000e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <OTG_FS_IRQHandler+0x10>)
 8000e16:	f000 fed1 	bl	8001bbc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000600 	.word	0x20000600

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f007 ffea 	bl	8008e2c <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	2000021c 	.word	0x2000021c
 8000e8c:	20000918 	.word	0x20000918

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed0:	4c0b      	ldr	r4, [pc, #44]	; (8000f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ede:	f7ff ffd7 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f007 ffa9 	bl	8008e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fb4d 	bl	8000584 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ef8:	08009818 	.word	0x08009818
  ldr r2, =_sbss
 8000efc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f00:	20000914 	.word	0x20000914

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f94f 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fdac 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f967 	bl	800123e <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f88:	f000 f92f 	bl	80011ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000220 	.word	0x20000220

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000220 	.word	0x20000220

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b4:	f7ff ff8e 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff29 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff3e 	bl	800107c <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff8e 	bl	8001128 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5d 	bl	80010d4 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff31 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffa2 	bl	8001190 <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff feb6 	bl	8000fd4 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d008      	beq.n	8001288 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e052      	b.n	800132e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0216 	bic.w	r2, r2, #22
 8001296:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d103      	bne.n	80012b8 <HAL_DMA_Abort+0x62>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0208 	bic.w	r2, r2, #8
 80012c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d8:	e013      	b.n	8001302 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012da:	f7ff fe7b 	bl	8000fd4 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d90c      	bls.n	8001302 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2220      	movs	r2, #32
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2203      	movs	r2, #3
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e015      	b.n	800132e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e4      	bne.n	80012da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	223f      	movs	r2, #63	; 0x3f
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d004      	beq.n	8001354 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e00c      	b.n	800136e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2205      	movs	r2, #5
 8001358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	e16b      	b.n	8001670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 815a 	bne.w	800166a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d005      	beq.n	80013ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d130      	bne.n	8001430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b03      	cmp	r3, #3
 800143a:	d017      	beq.n	800146c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d123      	bne.n	80014c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	08da      	lsrs	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3208      	adds	r2, #8
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80b4 	beq.w	800166a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <HAL_GPIO_Init+0x30c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <HAL_GPIO_Init+0x30c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <HAL_GPIO_Init+0x30c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_GPIO_Init+0x310>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_GPIO_Init+0x314>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d02b      	beq.n	80015a2 <HAL_GPIO_Init+0x226>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a51      	ldr	r2, [pc, #324]	; (8001694 <HAL_GPIO_Init+0x318>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x222>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_GPIO_Init+0x31c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x21e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_GPIO_Init+0x320>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x21a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_GPIO_Init+0x324>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x216>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4d      	ldr	r2, [pc, #308]	; (80016a4 <HAL_GPIO_Init+0x328>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x212>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4c      	ldr	r2, [pc, #304]	; (80016a8 <HAL_GPIO_Init+0x32c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x20e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_GPIO_Init+0x330>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x20a>
 8001582:	2307      	movs	r3, #7
 8001584:	e00e      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001586:	2308      	movs	r3, #8
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800158a:	2306      	movs	r3, #6
 800158c:	e00a      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800158e:	2305      	movs	r3, #5
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001592:	2304      	movs	r3, #4
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <HAL_GPIO_Init+0x310>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a32      	ldr	r2, [pc, #200]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_GPIO_Init+0x334>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f ae90 	bls.w	8001398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40021c00 	.word	0x40021c00
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e8:	b08f      	sub	sp, #60	; 0x3c
 80016ea:	af0a      	add	r7, sp, #40	; 0x28
 80016ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e054      	b.n	80017a2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f007 f8e0 	bl	80088d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f004 f90e 	bl	8005958 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	687e      	ldr	r6, [r7, #4]
 8001744:	466d      	mov	r5, sp
 8001746:	f106 0410 	add.w	r4, r6, #16
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}
 800175a:	1d33      	adds	r3, r6, #4
 800175c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800175e:	6838      	ldr	r0, [r7, #0]
 8001760:	f004 f888 	bl	8005874 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f004 f905 	bl	800597a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	687e      	ldr	r6, [r7, #4]
 8001778:	466d      	mov	r5, sp
 800177a:	f106 0410 	add.w	r4, r6, #16
 800177e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001786:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178a:	e885 0003 	stmia.w	r5, {r0, r1}
 800178e:	1d33      	adds	r3, r6, #4
 8001790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f004 fa8e 	bl	8005cb4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017aa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017aa:	b590      	push	{r4, r7, lr}
 80017ac:	b089      	sub	sp, #36	; 0x24
 80017ae:	af04      	add	r7, sp, #16
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	4608      	mov	r0, r1
 80017b4:	4611      	mov	r1, r2
 80017b6:	461a      	mov	r2, r3
 80017b8:	4603      	mov	r3, r0
 80017ba:	70fb      	strb	r3, [r7, #3]
 80017bc:	460b      	mov	r3, r1
 80017be:	70bb      	strb	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_HCD_HC_Init+0x28>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e076      	b.n	80018c0 <HAL_HCD_HC_Init+0x116>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	333d      	adds	r3, #61	; 0x3d
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3338      	adds	r3, #56	; 0x38
 80017fa:	787a      	ldrb	r2, [r7, #1]
 80017fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	212c      	movs	r1, #44	; 0x2c
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	3340      	adds	r3, #64	; 0x40
 800180c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800180e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3339      	adds	r3, #57	; 0x39
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	333f      	adds	r3, #63	; 0x3f
 8001830:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001834:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	78ba      	ldrb	r2, [r7, #2]
 800183a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800183e:	b2d0      	uxtb	r0, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	333a      	adds	r3, #58	; 0x3a
 800184c:	4602      	mov	r2, r0
 800184e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001850:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da09      	bge.n	800186c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	333b      	adds	r3, #59	; 0x3b
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e008      	b.n	800187e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	333b      	adds	r3, #59	; 0x3b
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	333c      	adds	r3, #60	; 0x3c
 800188c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001890:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	787c      	ldrb	r4, [r7, #1]
 8001898:	78ba      	ldrb	r2, [r7, #2]
 800189a:	78f9      	ldrb	r1, [r7, #3]
 800189c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	4623      	mov	r3, r4
 80018ae:	f004 fb87 	bl	8005fc0 <USB_HC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}

080018c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_HCD_HC_Halt+0x1e>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e00f      	b.n	8001906 <HAL_HCD_HC_Halt+0x3e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 fdd7 	bl	80064aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4603      	mov	r3, r0
 8001920:	70fb      	strb	r3, [r7, #3]
 8001922:	460b      	mov	r3, r1
 8001924:	70bb      	strb	r3, [r7, #2]
 8001926:	4613      	mov	r3, r2
 8001928:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	333b      	adds	r3, #59	; 0x3b
 8001938:	78ba      	ldrb	r2, [r7, #2]
 800193a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	333f      	adds	r3, #63	; 0x3f
 800194a:	787a      	ldrb	r2, [r7, #1]
 800194c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800194e:	7c3b      	ldrb	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d112      	bne.n	800197a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	212c      	movs	r1, #44	; 0x2c
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3342      	adds	r3, #66	; 0x42
 8001962:	2203      	movs	r2, #3
 8001964:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	333d      	adds	r3, #61	; 0x3d
 8001974:	7f3a      	ldrb	r2, [r7, #28]
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	e008      	b.n	800198c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3342      	adds	r3, #66	; 0x42
 8001988:	2202      	movs	r2, #2
 800198a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b03      	cmp	r3, #3
 8001990:	f200 80c6 	bhi.w	8001b20 <HAL_HCD_HC_SubmitRequest+0x210>
 8001994:	a201      	add	r2, pc, #4	; (adr r2, 800199c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199a:	bf00      	nop
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	08001b0d 	.word	0x08001b0d
 80019a4:	08001a11 	.word	0x08001a11
 80019a8:	08001a8f 	.word	0x08001a8f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019ac:	7c3b      	ldrb	r3, [r7, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f040 80b8 	bne.w	8001b24 <HAL_HCD_HC_SubmitRequest+0x214>
 80019b4:	78bb      	ldrb	r3, [r7, #2]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 80b4 	bne.w	8001b24 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019bc:	8b3b      	ldrh	r3, [r7, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d108      	bne.n	80019d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3355      	adds	r3, #85	; 0x55
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3355      	adds	r3, #85	; 0x55
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	3342      	adds	r3, #66	; 0x42
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fa:	e093      	b.n	8001b24 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	3342      	adds	r3, #66	; 0x42
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
      break;
 8001a0e:	e089      	b.n	8001b24 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a10:	78bb      	ldrb	r3, [r7, #2]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11d      	bne.n	8001a52 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3355      	adds	r3, #85	; 0x55
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3342      	adds	r3, #66	; 0x42
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a3c:	e073      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3342      	adds	r3, #66	; 0x42
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
      break;
 8001a50:	e069      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3354      	adds	r3, #84	; 0x54
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3342      	adds	r3, #66	; 0x42
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
      break;
 8001a78:	e055      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3342      	adds	r3, #66	; 0x42
 8001a88:	2202      	movs	r2, #2
 8001a8a:	701a      	strb	r2, [r3, #0]
      break;
 8001a8c:	e04b      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a8e:	78bb      	ldrb	r3, [r7, #2]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d11d      	bne.n	8001ad0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3355      	adds	r3, #85	; 0x55
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3342      	adds	r3, #66	; 0x42
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001aba:	e034      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3342      	adds	r3, #66	; 0x42
 8001aca:	2202      	movs	r2, #2
 8001acc:	701a      	strb	r2, [r3, #0]
      break;
 8001ace:	e02a      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3354      	adds	r3, #84	; 0x54
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	3342      	adds	r3, #66	; 0x42
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
      break;
 8001af6:	e016      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	3342      	adds	r3, #66	; 0x42
 8001b06:	2202      	movs	r2, #2
 8001b08:	701a      	strb	r2, [r3, #0]
      break;
 8001b0a:	e00c      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3342      	adds	r3, #66	; 0x42
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b20:	bf00      	nop
 8001b22:	e000      	b.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b24:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3344      	adds	r3, #68	; 0x44
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	8b3a      	ldrh	r2, [r7, #24]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	202c      	movs	r0, #44	; 0x2c
 8001b40:	fb00 f303 	mul.w	r3, r0, r3
 8001b44:	440b      	add	r3, r1
 8001b46:	334c      	adds	r3, #76	; 0x4c
 8001b48:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3360      	adds	r3, #96	; 0x60
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3350      	adds	r3, #80	; 0x50
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3339      	adds	r3, #57	; 0x39
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3361      	adds	r3, #97	; 0x61
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	222c      	movs	r2, #44	; 0x2c
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	3338      	adds	r3, #56	; 0x38
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	18d1      	adds	r1, r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	f004 fb2a 	bl	8006204 <USB_HC_StartXfer>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop

08001bbc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 f82b 	bl	8005c2e <USB_GetMode>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	f040 80f6 	bne.w	8001dcc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 f80f 	bl	8005c08 <USB_ReadInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80ec 	beq.w	8001dca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 f806 	bl	8005c08 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c06:	d104      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fff6 	bl	8005c08 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c26:	d104      	bne.n	8001c32 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 ffe6 	bl	8005c08 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c46:	d104      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 ffd6 	bl	8005c08 <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d103      	bne.n	8001c6e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 ffc8 	bl	8005c08 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c82:	d11c      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c8c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10f      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	6938      	ldr	r0, [r7, #16]
 8001ca2:	f003 feb7 	bl	8005a14 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ca6:	6938      	ldr	r0, [r7, #16]
 8001ca8:	f003 fee8 	bl	8005a7c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 f8be 	bl	8005e34 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f006 fe8b 	bl	80089d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 ffa0 	bl	8005c08 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd2:	d102      	bne.n	8001cda <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f001 f89e 	bl	8002e16 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 ff92 	bl	8005c08 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d106      	bne.n	8001cfc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f006 fe54 	bl	800899c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 ff81 	bl	8005c08 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d101      	bne.n	8001d14 <HAL_HCD_IRQHandler+0x158>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_HCD_IRQHandler+0x15a>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0210 	bic.w	r2, r2, #16
 8001d28:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 ffa1 	bl	8002c72 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0210 	orr.w	r2, r2, #16
 8001d3e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 ff5f 	bl	8005c08 <USB_ReadInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d54:	d13a      	bne.n	8001dcc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 fb94 	bl	8006488 <USB_HC_ReadInterrupt>
 8001d60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e025      	b.n	8001db4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d018      	beq.n	8001dae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d92:	d106      	bne.n	8001da2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8ab 	bl	8001ef6 <HCD_HC_IN_IRQHandler>
 8001da0:	e005      	b.n	8001dae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fbf9 	bl	80025a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d3d4      	bcc.n	8001d68 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc6:	615a      	str	r2, [r3, #20]
 8001dc8:	e000      	b.n	8001dcc <HAL_HCD_IRQHandler+0x210>
      return;
 8001dca:	bf00      	nop
    }
  }
}
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_HCD_Start+0x16>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e013      	b.n	8001e10 <HAL_HCD_Start+0x3e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 f880 	bl	8005efc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fd98 	bl	8005936 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_HCD_Stop+0x16>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e00d      	b.n	8001e4a <HAL_HCD_Stop+0x32>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 fc6e 	bl	800671c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 f822 	bl	8005ea8 <USB_ResetPort>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3360      	adds	r3, #96	; 0x60
 8001e88:	781b      	ldrb	r3, [r3, #0]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3350      	adds	r3, #80	; 0x50
 8001eb0:	681b      	ldr	r3, [r3, #0]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 f866 	bl	8005f9c <USB_GetCurrentFrame>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 f841 	bl	8005f6e <USB_GetHostSpeed>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d11a      	bne.n	8001f5c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2304      	movs	r3, #4
 8001f36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	3361      	adds	r3, #97	; 0x61
 8001f46:	2206      	movs	r2, #6
 8001f48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f004 faa8 	bl	80064aa <USB_HC_Halt>
 8001f5a:	e0af      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f72:	d11b      	bne.n	8001fac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	461a      	mov	r2, r3
 8001f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3361      	adds	r3, #97	; 0x61
 8001f96:	2207      	movs	r2, #7
 8001f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fa80 	bl	80064aa <USB_HC_Halt>
 8001faa:	e087      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d109      	bne.n	8001fd6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	6093      	str	r3, [r2, #8]
 8001fd4:	e072      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d11a      	bne.n	8002022 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3361      	adds	r3, #97	; 0x61
 800200c:	2205      	movs	r2, #5
 800200e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f004 fa45 	bl	80064aa <USB_HC_Halt>
 8002020:	e04c      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002038:	d11b      	bne.n	8002072 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	461a      	mov	r2, r3
 8002048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3361      	adds	r3, #97	; 0x61
 800205c:	2208      	movs	r2, #8
 800205e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f004 fa1d 	bl	80064aa <USB_HC_Halt>
 8002070:	e024      	b.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d119      	bne.n	80020bc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	461a      	mov	r2, r3
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3361      	adds	r3, #97	; 0x61
 80020a8:	2206      	movs	r2, #6
 80020aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f9f7 	bl	80064aa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d2:	d112      	bne.n	80020fa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 f9e3 	bl	80064aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020f8:	e24e      	b.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	f040 80df 	bne.w	80022d0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d019      	beq.n	800214e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3348      	adds	r3, #72	; 0x48
 8002128:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	0159      	lsls	r1, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	440b      	add	r3, r1
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	202c      	movs	r0, #44	; 0x2c
 8002144:	fb00 f303 	mul.w	r3, r0, r3
 8002148:	440b      	add	r3, r1
 800214a:	3350      	adds	r3, #80	; 0x50
 800214c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3361      	adds	r3, #97	; 0x61
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	335c      	adds	r3, #92	; 0x5c
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	2301      	movs	r3, #1
 8002182:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	333f      	adds	r3, #63	; 0x3f
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	333f      	adds	r3, #63	; 0x3f
 80021a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d111      	bne.n	80021d0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 f977 	bl	80064aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c8:	461a      	mov	r2, r3
 80021ca:	2310      	movs	r3, #16
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	e03a      	b.n	8002246 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	333f      	adds	r3, #63	; 0x3f
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d009      	beq.n	80021f8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	333f      	adds	r3, #63	; 0x3f
 80021f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d126      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	0151      	lsls	r1, r2, #5
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	440a      	add	r2, r1
 800220e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002216:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	b2d9      	uxtb	r1, r3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	202c      	movs	r0, #44	; 0x2c
 8002234:	fb00 f303 	mul.w	r3, r0, r3
 8002238:	4413      	add	r3, r2
 800223a:	3360      	adds	r3, #96	; 0x60
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f006 fbd5 	bl	80089f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d12b      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3348      	adds	r3, #72	; 0x48
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	202c      	movs	r0, #44	; 0x2c
 8002264:	fb00 f202 	mul.w	r2, r0, r2
 8002268:	440a      	add	r2, r1
 800226a:	3240      	adds	r2, #64	; 0x40
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 818e 	beq.w	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3354      	adds	r3, #84	; 0x54
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	f083 0301 	eor.w	r3, r3, #1
 8002290:	b2d8      	uxtb	r0, r3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3354      	adds	r3, #84	; 0x54
 80022a0:	4602      	mov	r2, r0
 80022a2:	701a      	strb	r2, [r3, #0]
}
 80022a4:	e178      	b.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3354      	adds	r3, #84	; 0x54
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3354      	adds	r3, #84	; 0x54
 80022ca:	4602      	mov	r2, r0
 80022cc:	701a      	strb	r2, [r3, #0]
}
 80022ce:	e163      	b.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	f040 80f6 	bne.w	80024d4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3361      	adds	r3, #97	; 0x61
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d109      	bne.n	8002310 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3360      	adds	r3, #96	; 0x60
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e0c9      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3361      	adds	r3, #97	; 0x61
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d109      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3360      	adds	r3, #96	; 0x60
 8002332:	2205      	movs	r2, #5
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e0b5      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3361      	adds	r3, #97	; 0x61
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b06      	cmp	r3, #6
 800234a:	d009      	beq.n	8002360 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3361      	adds	r3, #97	; 0x61
 800235a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800235c:	2b08      	cmp	r3, #8
 800235e:	d150      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	335c      	adds	r3, #92	; 0x5c
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	202c      	movs	r0, #44	; 0x2c
 8002378:	fb00 f303 	mul.w	r3, r0, r3
 800237c:	440b      	add	r3, r1
 800237e:	335c      	adds	r3, #92	; 0x5c
 8002380:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	335c      	adds	r3, #92	; 0x5c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d912      	bls.n	80023bc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	335c      	adds	r3, #92	; 0x5c
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3360      	adds	r3, #96	; 0x60
 80023b6:	2204      	movs	r2, #4
 80023b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023ba:	e073      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	2202      	movs	r2, #2
 80023cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023e4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023ec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002400:	e050      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3361      	adds	r3, #97	; 0x61
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d122      	bne.n	800245c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3360      	adds	r3, #96	; 0x60
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800243e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002446:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e023      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3361      	adds	r3, #97	; 0x61
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b07      	cmp	r3, #7
 800246e:	d119      	bne.n	80024a4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	335c      	adds	r3, #92	; 0x5c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	202c      	movs	r0, #44	; 0x2c
 8002488:	fb00 f303 	mul.w	r3, r0, r3
 800248c:	440b      	add	r3, r1
 800248e:	335c      	adds	r3, #92	; 0x5c
 8002490:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3360      	adds	r3, #96	; 0x60
 80024a0:	2204      	movs	r2, #4
 80024a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	461a      	mov	r2, r3
 80024b2:	2302      	movs	r3, #2
 80024b4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	b2d9      	uxtb	r1, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	202c      	movs	r0, #44	; 0x2c
 80024c0:	fb00 f303 	mul.w	r3, r0, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3360      	adds	r3, #96	; 0x60
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f006 fa8f 	bl	80089f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024d2:	e061      	b.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d156      	bne.n	8002598 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	333f      	adds	r3, #63	; 0x3f
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d111      	bne.n	8002522 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	335c      	adds	r3, #92	; 0x5c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f003 ffc5 	bl	80064aa <USB_HC_Halt>
 8002520:	e031      	b.n	8002586 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	333f      	adds	r3, #63	; 0x3f
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	333f      	adds	r3, #63	; 0x3f
 8002544:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002546:	2b02      	cmp	r3, #2
 8002548:	d11d      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	335c      	adds	r3, #92	; 0x5c
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d110      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	2203      	movs	r2, #3
 8002574:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f003 ff92 	bl	80064aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	2310      	movs	r3, #16
 8002596:	6093      	str	r3, [r2, #8]
}
 8002598:	bf00      	nop
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d11a      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	2304      	movs	r3, #4
 80025e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3361      	adds	r3, #97	; 0x61
 80025f0:	2206      	movs	r2, #6
 80025f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 ff53 	bl	80064aa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002604:	e331      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b20      	cmp	r3, #32
 800261a:	d12e      	bne.n	800267a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	461a      	mov	r2, r3
 800262a:	2320      	movs	r3, #32
 800262c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	333d      	adds	r3, #61	; 0x3d
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	f040 8313 	bne.w	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	333d      	adds	r3, #61	; 0x3d
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	2202      	movs	r2, #2
 8002666:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f003 ff19 	bl	80064aa <USB_HC_Halt>
}
 8002678:	e2f7      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002690:	d112      	bne.n	80026b8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	461a      	mov	r2, r3
 80026a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 fefa 	bl	80064aa <USB_HC_Halt>
}
 80026b6:	e2d8      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d140      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	335c      	adds	r3, #92	; 0x5c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d111      	bne.n	800271a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333d      	adds	r3, #61	; 0x3d
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	461a      	mov	r2, r3
 8002728:	2301      	movs	r3, #1
 800272a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f003 feae 	bl	80064aa <USB_HC_Halt>
}
 800274e:	e28c      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d12c      	bne.n	80027c0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3361      	adds	r3, #97	; 0x61
 8002774:	2204      	movs	r2, #4
 8002776:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	333d      	adds	r3, #61	; 0x3d
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fe7f 	bl	80064aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	6093      	str	r3, [r2, #8]
}
 80027be:	e254      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d11a      	bne.n	800280c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	461a      	mov	r2, r3
 80027e4:	2308      	movs	r3, #8
 80027e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3361      	adds	r3, #97	; 0x61
 80027f6:	2205      	movs	r2, #5
 80027f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f003 fe50 	bl	80064aa <USB_HC_Halt>
}
 800280a:	e22e      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d140      	bne.n	80028a4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	335c      	adds	r3, #92	; 0x5c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3361      	adds	r3, #97	; 0x61
 8002842:	2203      	movs	r2, #3
 8002844:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	333d      	adds	r3, #61	; 0x3d
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d112      	bne.n	8002880 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	333c      	adds	r3, #60	; 0x3c
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	333d      	adds	r3, #61	; 0x3d
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fe0d 	bl	80064aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	2310      	movs	r3, #16
 80028a0:	6093      	str	r3, [r2, #8]
}
 80028a2:	e1e2      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d164      	bne.n	8002984 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d111      	bne.n	80028e6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3361      	adds	r3, #97	; 0x61
 80028d0:	2206      	movs	r2, #6
 80028d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fde3 	bl	80064aa <USB_HC_Halt>
 80028e4:	e044      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	335c      	adds	r3, #92	; 0x5c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	202c      	movs	r0, #44	; 0x2c
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	440b      	add	r3, r1
 8002904:	335c      	adds	r3, #92	; 0x5c
 8002906:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	335c      	adds	r3, #92	; 0x5c
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d920      	bls.n	800295e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	335c      	adds	r3, #92	; 0x5c
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3360      	adds	r3, #96	; 0x60
 800293c:	2204      	movs	r2, #4
 800293e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	b2d9      	uxtb	r1, r3
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	4413      	add	r3, r2
 8002950:	3360      	adds	r3, #96	; 0x60
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f006 f84a 	bl	80089f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800295c:	e008      	b.n	8002970 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3360      	adds	r3, #96	; 0x60
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	6093      	str	r3, [r2, #8]
}
 8002982:	e172      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299a:	d11b      	bne.n	80029d4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	2208      	movs	r2, #8
 80029ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 fd76 	bl	80064aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	461a      	mov	r2, r3
 80029cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d0:	6093      	str	r3, [r2, #8]
}
 80029d2:	e14a      	b.n	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f040 813f 	bne.w	8002c6a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3361      	adds	r3, #97	; 0x61
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d17d      	bne.n	8002afc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3360      	adds	r3, #96	; 0x60
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	333f      	adds	r3, #63	; 0x3f
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d00a      	beq.n	8002a3c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	333f      	adds	r3, #63	; 0x3f
 8002a34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	f040 8100 	bne.w	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d113      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3355      	adds	r3, #85	; 0x55
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2d8      	uxtb	r0, r3
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3355      	adds	r3, #85	; 0x55
 8002a68:	4602      	mov	r2, r0
 8002a6a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 80e3 	bne.w	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	334c      	adds	r3, #76	; 0x4c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80d8 	beq.w	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	334c      	adds	r3, #76	; 0x4c
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	202c      	movs	r0, #44	; 0x2c
 8002aa2:	fb00 f202 	mul.w	r2, r0, r2
 8002aa6:	440a      	add	r2, r1
 8002aa8:	3240      	adds	r2, #64	; 0x40
 8002aaa:	8812      	ldrh	r2, [r2, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	202c      	movs	r0, #44	; 0x2c
 8002ab6:	fb00 f202 	mul.w	r2, r0, r2
 8002aba:	440a      	add	r2, r1
 8002abc:	3240      	adds	r2, #64	; 0x40
 8002abe:	8812      	ldrh	r2, [r2, #0]
 8002ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80b5 	beq.w	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3355      	adds	r3, #85	; 0x55
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2d8      	uxtb	r0, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3355      	adds	r3, #85	; 0x55
 8002af6:	4602      	mov	r2, r0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e09f      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3361      	adds	r3, #97	; 0x61
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d109      	bne.n	8002b24 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3360      	adds	r3, #96	; 0x60
 8002b1e:	2202      	movs	r2, #2
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e08b      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3361      	adds	r3, #97	; 0x61
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d109      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3360      	adds	r3, #96	; 0x60
 8002b46:	2202      	movs	r2, #2
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e077      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3361      	adds	r3, #97	; 0x61
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d109      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3360      	adds	r3, #96	; 0x60
 8002b6e:	2205      	movs	r2, #5
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e063      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3361      	adds	r3, #97	; 0x61
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d009      	beq.n	8002b9c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3361      	adds	r3, #97	; 0x61
 8002b96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d14f      	bne.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	335c      	adds	r3, #92	; 0x5c
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	202c      	movs	r0, #44	; 0x2c
 8002bb4:	fb00 f303 	mul.w	r3, r0, r3
 8002bb8:	440b      	add	r3, r1
 8002bba:	335c      	adds	r3, #92	; 0x5c
 8002bbc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	335c      	adds	r3, #92	; 0x5c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d912      	bls.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	335c      	adds	r3, #92	; 0x5c
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3360      	adds	r3, #96	; 0x60
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e021      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3360      	adds	r3, #96	; 0x60
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c20:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c28:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	b2d9      	uxtb	r1, r3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	202c      	movs	r0, #44	; 0x2c
 8002c58:	fb00 f303 	mul.w	r3, r0, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3360      	adds	r3, #96	; 0x60
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f005 fec3 	bl	80089f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b08a      	sub	sp, #40	; 0x28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	0c5b      	lsrs	r3, r3, #17
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d004      	beq.n	8002cb8 <HCD_RXQLVL_IRQHandler+0x46>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	f000 80a9 	beq.w	8002e08 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cb6:	e0aa      	b.n	8002e0e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80a6 	beq.w	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3344      	adds	r3, #68	; 0x44
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 809b 	beq.w	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3350      	adds	r3, #80	; 0x50
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	441a      	add	r2, r3
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	202c      	movs	r0, #44	; 0x2c
 8002cf0:	fb00 f303 	mul.w	r3, r0, r3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334c      	adds	r3, #76	; 0x4c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d87a      	bhi.n	8002df4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3344      	adds	r3, #68	; 0x44
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	b292      	uxth	r2, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f002 ff1e 	bl	8005b58 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3344      	adds	r3, #68	; 0x44
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	441a      	add	r2, r3
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	202c      	movs	r0, #44	; 0x2c
 8002d36:	fb00 f303 	mul.w	r3, r0, r3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3344      	adds	r3, #68	; 0x44
 8002d3e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3350      	adds	r3, #80	; 0x50
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	441a      	add	r2, r3
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	202c      	movs	r0, #44	; 0x2c
 8002d5a:	fb00 f303 	mul.w	r3, r0, r3
 8002d5e:	440b      	add	r3, r1
 8002d60:	3350      	adds	r3, #80	; 0x50
 8002d62:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	0cdb      	lsrs	r3, r3, #19
 8002d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d78:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3340      	adds	r3, #64	; 0x40
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d13c      	bne.n	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d039      	beq.n	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3354      	adds	r3, #84	; 0x54
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f083 0301 	eor.w	r3, r3, #1
 8002dde:	b2d8      	uxtb	r0, r3
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3354      	adds	r3, #84	; 0x54
 8002dee:	4602      	mov	r2, r0
 8002df0:	701a      	strb	r2, [r3, #0]
      break;
 8002df2:	e00b      	b.n	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3360      	adds	r3, #96	; 0x60
 8002e02:	2204      	movs	r2, #4
 8002e04:	701a      	strb	r2, [r3, #0]
      break;
 8002e06:	e001      	b.n	8002e0c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e000      	b.n	8002e0e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e0c:	bf00      	nop
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e42:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d10b      	bne.n	8002e66 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d102      	bne.n	8002e5e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f005 fdad 	bl	80089b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d132      	bne.n	8002ed6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d126      	bne.n	8002ed0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d113      	bne.n	8002eb2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e94:	d106      	bne.n	8002ea4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f002 ffc9 	bl	8005e34 <USB_InitFSLSPClkSel>
 8002ea2:	e011      	b.n	8002ec8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 ffc2 	bl	8005e34 <USB_InitFSLSPClkSel>
 8002eb0:	e00a      	b.n	8002ec8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d106      	bne.n	8002ec8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ec6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f005 fd9f 	bl	8008a0c <HAL_HCD_PortEnabled_Callback>
 8002ece:	e002      	b.n	8002ed6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f005 fda9 	bl	8008a28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d103      	bne.n	8002ee8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f043 0320 	orr.w	r3, r3, #32
 8002ee6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e12b      	b.n	8003166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fde0 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f60:	f001 fa20 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8002f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a81      	ldr	r2, [pc, #516]	; (8003170 <HAL_I2C_Init+0x274>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d807      	bhi.n	8002f80 <HAL_I2C_Init+0x84>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <HAL_I2C_Init+0x278>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e006      	b.n	8002f8e <HAL_I2C_Init+0x92>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a7d      	ldr	r2, [pc, #500]	; (8003178 <HAL_I2C_Init+0x27c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0e7      	b.n	8003166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a78      	ldr	r2, [pc, #480]	; (800317c <HAL_I2C_Init+0x280>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9b      	lsrs	r3, r3, #18
 8002fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_I2C_Init+0x274>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d802      	bhi.n	8002fd0 <HAL_I2C_Init+0xd4>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	e009      	b.n	8002fe4 <HAL_I2C_Init+0xe8>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	4a69      	ldr	r2, [pc, #420]	; (8003180 <HAL_I2C_Init+0x284>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	495c      	ldr	r1, [pc, #368]	; (8003170 <HAL_I2C_Init+0x274>)
 8003000:	428b      	cmp	r3, r1
 8003002:	d819      	bhi.n	8003038 <HAL_I2C_Init+0x13c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e59      	subs	r1, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003012:	1c59      	adds	r1, r3, #1
 8003014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003018:	400b      	ands	r3, r1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_I2C_Init+0x138>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1e59      	subs	r1, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fbb1 f3f3 	udiv	r3, r1, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	e051      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003034:	2304      	movs	r3, #4
 8003036:	e04f      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <HAL_I2C_Init+0x168>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	440b      	add	r3, r1
 800304e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e012      	b.n	800308a <HAL_I2C_Init+0x18e>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	0099      	lsls	r1, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Init+0x196>
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10e      	bne.n	80030b8 <HAL_I2C_Init+0x1bc>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e58      	subs	r0, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	440b      	add	r3, r1
 80030a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b6:	e00f      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e58      	subs	r0, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	0099      	lsls	r1, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	6809      	ldr	r1, [r1, #0]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6911      	ldr	r1, [r2, #16]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	000186a0 	.word	0x000186a0
 8003174:	001e847f 	.word	0x001e847f
 8003178:	003d08ff 	.word	0x003d08ff
 800317c:	431bde83 	.word	0x431bde83
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e128      	b.n	80033e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a90      	ldr	r2, [pc, #576]	; (80033f0 <HAL_I2S_Init+0x26c>)
 80031ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fce1 	bl	8000b78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2202      	movs	r2, #2
 80031d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d060      	beq.n	80032a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031ea:	2310      	movs	r3, #16
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e001      	b.n	80031f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d802      	bhi.n	8003202 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003202:	2001      	movs	r0, #1
 8003204:	f001 f9d8 	bl	80045b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003208:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003212:	d125      	bne.n	8003260 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	fbb2 f2f3 	udiv	r2, r2, r3
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	3305      	adds	r3, #5
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e01f      	b.n	800327e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	fbb2 f2f3 	udiv	r2, r2, r3
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	3305      	adds	r3, #5
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	e00e      	b.n	800327e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	3305      	adds	r3, #5
 800327c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_I2S_Init+0x270>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	08db      	lsrs	r3, r3, #3
 8003288:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e003      	b.n	80032ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d902      	bls.n	80032b8 <HAL_I2S_Init+0x134>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	2bff      	cmp	r3, #255	; 0xff
 80032b6:	d907      	bls.n	80032c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	f043 0210 	orr.w	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e08f      	b.n	80033e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	ea42 0103 	orr.w	r1, r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	430a      	orrs	r2, r1
 80032da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032e6:	f023 030f 	bic.w	r3, r3, #15
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6851      	ldr	r1, [r2, #4]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6892      	ldr	r2, [r2, #8]
 80032f2:	4311      	orrs	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68d2      	ldr	r2, [r2, #12]
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6992      	ldr	r2, [r2, #24]
 80032fe:	430a      	orrs	r2, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d161      	bne.n	80033d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <HAL_I2S_Init+0x274>)
 8003318:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a37      	ldr	r2, [pc, #220]	; (80033fc <HAL_I2S_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_I2S_Init+0x1a4>
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_I2S_Init+0x27c>)
 8003326:	e001      	b.n	800332c <HAL_I2S_Init+0x1a8>
 8003328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	4932      	ldr	r1, [pc, #200]	; (80033fc <HAL_I2S_Init+0x278>)
 8003334:	428a      	cmp	r2, r1
 8003336:	d101      	bne.n	800333c <HAL_I2S_Init+0x1b8>
 8003338:	4a31      	ldr	r2, [pc, #196]	; (8003400 <HAL_I2S_Init+0x27c>)
 800333a:	e001      	b.n	8003340 <HAL_I2S_Init+0x1bc>
 800333c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003340:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003344:	f023 030f 	bic.w	r3, r3, #15
 8003348:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_I2S_Init+0x278>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_I2S_Init+0x1d4>
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <HAL_I2S_Init+0x27c>)
 8003356:	e001      	b.n	800335c <HAL_I2S_Init+0x1d8>
 8003358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800335c:	2202      	movs	r2, #2
 800335e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a25      	ldr	r2, [pc, #148]	; (80033fc <HAL_I2S_Init+0x278>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_I2S_Init+0x1ea>
 800336a:	4b25      	ldr	r3, [pc, #148]	; (8003400 <HAL_I2S_Init+0x27c>)
 800336c:	e001      	b.n	8003372 <HAL_I2S_Init+0x1ee>
 800336e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337e:	d003      	beq.n	8003388 <HAL_I2S_Init+0x204>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	e001      	b.n	8003394 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800339e:	4313      	orrs	r3, r2
 80033a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033a8:	4313      	orrs	r3, r2
 80033aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <HAL_I2S_Init+0x278>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_I2S_Init+0x24c>
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <HAL_I2S_Init+0x27c>)
 80033ce:	e001      	b.n	80033d4 <HAL_I2S_Init+0x250>
 80033d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d4:	897a      	ldrh	r2, [r7, #10]
 80033d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	080034fb 	.word	0x080034fb
 80033f4:	cccccccd 	.word	0xcccccccd
 80033f8:	08003611 	.word	0x08003611
 80033fc:	40003800 	.word	0x40003800
 8003400:	40003400 	.word	0x40003400

08003404 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	881a      	ldrh	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10e      	bne.n	8003494 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003484:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffb8 	bl	8003404 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	b292      	uxth	r2, r2
 80034b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	1c9a      	adds	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10e      	bne.n	80034f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff93 	bl	8003418 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b04      	cmp	r3, #4
 8003514:	d13a      	bne.n	800358c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d109      	bne.n	8003534 <I2S_IRQHandler+0x3a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d102      	bne.n	8003534 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ffb4 	bl	800349c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d126      	bne.n	800358c <I2S_IRQHandler+0x92>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b20      	cmp	r3, #32
 800354a:	d11f      	bne.n	800358c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff50 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b03      	cmp	r3, #3
 8003596:	d136      	bne.n	8003606 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d109      	bne.n	80035b6 <I2S_IRQHandler+0xbc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b80      	cmp	r3, #128	; 0x80
 80035ae:	d102      	bne.n	80035b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff45 	bl	8003440 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d122      	bne.n	8003606 <I2S_IRQHandler+0x10c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d11b      	bne.n	8003606 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	f043 0204 	orr.w	r2, r3, #4
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff13 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a92      	ldr	r2, [pc, #584]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800362a:	4b92      	ldr	r3, [pc, #584]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800362c:	e001      	b.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800362e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a8b      	ldr	r2, [pc, #556]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003648:	4b8a      	ldr	r3, [pc, #552]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800364a:	e001      	b.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800364c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d004      	beq.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8099 	bne.w	800379a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d107      	bne.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f925 	bl	80038cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f9c8 	bl	8003a2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d13a      	bne.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d035      	beq.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036ba:	4b6e      	ldr	r3, [pc, #440]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036bc:	e001      	b.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4969      	ldr	r1, [pc, #420]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ca:	428b      	cmp	r3, r1
 80036cc:	d101      	bne.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80036ce:	4b69      	ldr	r3, [pc, #420]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d0:	e001      	b.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f043 0202 	orr.w	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fe88 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b08      	cmp	r3, #8
 8003724:	f040 80c3 	bne.w	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80bd 	beq.w	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003742:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a49      	ldr	r2, [pc, #292]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800374e:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003750:	e001      	b.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003752:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4944      	ldr	r1, [pc, #272]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800375e:	428b      	cmp	r3, r1
 8003760:	d101      	bne.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003762:	4b44      	ldr	r3, [pc, #272]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003764:	e001      	b.n	800376a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800376e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fe4a 	bl	800342c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003798:	e089      	b.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d107      	bne.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8be 	bl	8003930 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8fd 	bl	80039c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d12f      	bne.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d02a      	beq.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037fe:	e001      	b.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4919      	ldr	r1, [pc, #100]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800380c:	428b      	cmp	r3, r1
 800380e:	d101      	bne.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003812:	e001      	b.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800381c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fdfa 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b08      	cmp	r3, #8
 8003840:	d136      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d031      	beq.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003858:	e001      	b.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800385a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4902      	ldr	r1, [pc, #8]	; (8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003866:	428b      	cmp	r3, r1
 8003868:	d106      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800386a:	4b02      	ldr	r3, [pc, #8]	; (8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800386c:	e006      	b.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800386e:	bf00      	nop
 8003870:	40003800 	.word	0x40003800
 8003874:	40003400 	.word	0x40003400
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003880:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003890:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0204 	orr.w	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fdc0 	bl	800342c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ac:	e000      	b.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ae:	bf00      	nop
}
 80038b0:	bf00      	nop
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c99      	adds	r1, r3, #2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6251      	str	r1, [r2, #36]	; 0x24
 80038de:	881a      	ldrh	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d113      	bne.n	8003926 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ffc9 	bl	80038b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c99      	adds	r1, r3, #2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6251      	str	r1, [r2, #36]	; 0x24
 8003942:	8819      	ldrh	r1, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <I2SEx_TxISR_I2SExt+0x90>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <I2SEx_TxISR_I2SExt+0x22>
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003950:	e001      	b.n	8003956 <I2SEx_TxISR_I2SExt+0x26>
 8003952:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003956:	460a      	mov	r2, r1
 8003958:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d121      	bne.n	80039b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a12      	ldr	r2, [pc, #72]	; (80039c0 <I2SEx_TxISR_I2SExt+0x90>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <I2SEx_TxISR_I2SExt+0x50>
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <I2SEx_TxISR_I2SExt+0x94>)
 800397e:	e001      	b.n	8003984 <I2SEx_TxISR_I2SExt+0x54>
 8003980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	490d      	ldr	r1, [pc, #52]	; (80039c0 <I2SEx_TxISR_I2SExt+0x90>)
 800398c:	428b      	cmp	r3, r1
 800398e:	d101      	bne.n	8003994 <I2SEx_TxISR_I2SExt+0x64>
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003992:	e001      	b.n	8003998 <I2SEx_TxISR_I2SExt+0x68>
 8003994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800399c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff81 	bl	80038b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40003800 	.word	0x40003800
 80039c4:	40003400 	.word	0x40003400

080039c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68d8      	ldr	r0, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	1c99      	adds	r1, r3, #2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039e0:	b282      	uxth	r2, r0
 80039e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d113      	bne.n	8003a24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff4a 	bl	80038b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <I2SEx_RxISR_I2SExt+0x90>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <I2SEx_RxISR_I2SExt+0x16>
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <I2SEx_RxISR_I2SExt+0x94>)
 8003a40:	e001      	b.n	8003a46 <I2SEx_RxISR_I2SExt+0x1a>
 8003a42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a46:	68d8      	ldr	r0, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	1c99      	adds	r1, r3, #2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a52:	b282      	uxth	r2, r0
 8003a54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d121      	bne.n	8003ab2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <I2SEx_RxISR_I2SExt+0x90>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <I2SEx_RxISR_I2SExt+0x50>
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <I2SEx_RxISR_I2SExt+0x94>)
 8003a7a:	e001      	b.n	8003a80 <I2SEx_RxISR_I2SExt+0x54>
 8003a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	490d      	ldr	r1, [pc, #52]	; (8003abc <I2SEx_RxISR_I2SExt+0x90>)
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	d101      	bne.n	8003a90 <I2SEx_RxISR_I2SExt+0x64>
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <I2SEx_RxISR_I2SExt+0x94>)
 8003a8e:	e001      	b.n	8003a94 <I2SEx_RxISR_I2SExt+0x68>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff03 	bl	80038b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40003800 	.word	0x40003800
 8003ac0:	40003400 	.word	0x40003400

08003ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e267      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d075      	beq.n	8003bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae2:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d00c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aee:	4b85      	ldr	r3, [pc, #532]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d112      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b82      	ldr	r3, [pc, #520]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	4b7e      	ldr	r3, [pc, #504]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05b      	beq.n	8003bcc <HAL_RCC_OscConfig+0x108>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d157      	bne.n	8003bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e242      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x74>
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01d      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x98>
 8003b42:	4b70      	ldr	r3, [pc, #448]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6f      	ldr	r2, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b6d      	ldr	r3, [pc, #436]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6c      	ldr	r2, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b5c:	4b69      	ldr	r3, [pc, #420]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a68      	ldr	r2, [pc, #416]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a65      	ldr	r2, [pc, #404]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fa2a 	bl	8000fd4 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fd fa26 	bl	8000fd4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e207      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xc0>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fa16 	bl	8000fd4 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fd fa12 	bl	8000fd4 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1f3      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0xe8>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bda:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b44      	ldr	r3, [pc, #272]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e1c7      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4937      	ldr	r1, [pc, #220]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	e03a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c34:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_RCC_OscConfig+0x244>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fd f9cb 	bl	8000fd4 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c42:	f7fd f9c7 	bl	8000fd4 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1a8      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4925      	ldr	r1, [pc, #148]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_OscConfig+0x244>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f9aa 	bl	8000fd4 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fd f9a6 	bl	8000fd4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e187      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d036      	beq.n	8003d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_RCC_OscConfig+0x248>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fd f98a 	bl	8000fd4 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fd f986 	bl	8000fd4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e167      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x200>
 8003ce2:	e01b      	b.n	8003d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_OscConfig+0x248>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fd f973 	bl	8000fd4 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	e00e      	b.n	8003d10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7fd f96f 	bl	8000fd4 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d907      	bls.n	8003d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e150      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	42470000 	.word	0x42470000
 8003d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	4b88      	ldr	r3, [pc, #544]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ea      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8097 	beq.w	8003e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b81      	ldr	r3, [pc, #516]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	4b7d      	ldr	r3, [pc, #500]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a7c      	ldr	r2, [pc, #496]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4a:	4b7a      	ldr	r3, [pc, #488]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b77      	ldr	r3, [pc, #476]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d118      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d66:	4b74      	ldr	r3, [pc, #464]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a73      	ldr	r2, [pc, #460]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d72:	f7fd f92f 	bl	8000fd4 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fd f92b 	bl	8000fd4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e10c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x2ea>
 8003da0:	4b64      	ldr	r3, [pc, #400]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a63      	ldr	r2, [pc, #396]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x324>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x30c>
 8003db6:	4b5f      	ldr	r3, [pc, #380]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a5e      	ldr	r2, [pc, #376]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a5b      	ldr	r2, [pc, #364]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0x324>
 8003dd0:	4b58      	ldr	r3, [pc, #352]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a57      	ldr	r2, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
 8003ddc:	4b55      	ldr	r3, [pc, #340]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a54      	ldr	r2, [pc, #336]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 0304 	bic.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fd f8f0 	bl	8000fd4 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fd f8ec 	bl	8000fd4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0cb      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0e:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ee      	beq.n	8003df8 <HAL_RCC_OscConfig+0x334>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1c:	f7fd f8da 	bl	8000fd4 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fd f8d6 	bl	8000fd4 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0b5      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1ee      	bne.n	8003e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a1 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e62:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d05c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d141      	bne.n	8003efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd f8aa 	bl	8000fd4 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fd f8a6 	bl	8000fd4 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e087      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	491b      	ldr	r1, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fd f87f 	bl	8000fd4 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd f87b 	bl	8000fd4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e05c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x416>
 8003ef8:	e054      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fd f868 	bl	8000fd4 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fd f864 	bl	8000fd4 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e045      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x444>
 8003f26:	e03d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e038      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x4ec>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d028      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d121      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d11a      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cc      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a58      	ldr	r2, [pc, #352]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d119      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	2b03      	cmp	r3, #3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e067      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fc ff96 	bl	8000fd4 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fc ff92 	bl	8000fd4 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e04f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d20c      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413a:	f000 f821 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	490a      	ldr	r1, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc fef6 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00
 8004170:	40023800 	.word	0x40023800
 8004174:	080097bc 	.word	0x080097bc
 8004178:	20000000 	.word	0x20000000
 800417c:	20000004 	.word	0x20000004

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b094      	sub	sp, #80	; 0x50
 8004186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	647b      	str	r3, [r7, #68]	; 0x44
 800418c:	2300      	movs	r3, #0
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	2300      	movs	r3, #0
 8004192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004198:	4b79      	ldr	r3, [pc, #484]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d00d      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x40>
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	f200 80e1 	bhi.w	800436c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_GetSysClockFreq+0x3a>
 80041b2:	e0db      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b4:	4b73      	ldr	r3, [pc, #460]	; (8004384 <HAL_RCC_GetSysClockFreq+0x204>)
 80041b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041b8:	e0db      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ba:	4b73      	ldr	r3, [pc, #460]	; (8004388 <HAL_RCC_GetSysClockFreq+0x208>)
 80041bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041be:	e0d8      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c0:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ca:	4b6d      	ldr	r3, [pc, #436]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d063      	beq.n	800429e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d6:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	2200      	movs	r2, #0
 80041de:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ea:	2300      	movs	r3, #0
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041f2:	4622      	mov	r2, r4
 80041f4:	462b      	mov	r3, r5
 80041f6:	f04f 0000 	mov.w	r0, #0
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	0159      	lsls	r1, r3, #5
 8004200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004204:	0150      	lsls	r0, r2, #5
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4621      	mov	r1, r4
 800420c:	1a51      	subs	r1, r2, r1
 800420e:	6139      	str	r1, [r7, #16]
 8004210:	4629      	mov	r1, r5
 8004212:	eb63 0301 	sbc.w	r3, r3, r1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004224:	4659      	mov	r1, fp
 8004226:	018b      	lsls	r3, r1, #6
 8004228:	4651      	mov	r1, sl
 800422a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800422e:	4651      	mov	r1, sl
 8004230:	018a      	lsls	r2, r1, #6
 8004232:	4651      	mov	r1, sl
 8004234:	ebb2 0801 	subs.w	r8, r2, r1
 8004238:	4659      	mov	r1, fp
 800423a:	eb63 0901 	sbc.w	r9, r3, r1
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800424a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800424e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004252:	4690      	mov	r8, r2
 8004254:	4699      	mov	r9, r3
 8004256:	4623      	mov	r3, r4
 8004258:	eb18 0303 	adds.w	r3, r8, r3
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	462b      	mov	r3, r5
 8004260:	eb49 0303 	adc.w	r3, r9, r3
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004272:	4629      	mov	r1, r5
 8004274:	024b      	lsls	r3, r1, #9
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800427c:	4621      	mov	r1, r4
 800427e:	024a      	lsls	r2, r1, #9
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004286:	2200      	movs	r2, #0
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
 800428a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004290:	f7fb fff6 	bl	8000280 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	e058      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429e:	4b38      	ldr	r3, [pc, #224]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	2200      	movs	r2, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	4611      	mov	r1, r2
 80042aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	2300      	movs	r3, #0
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	f04f 0000 	mov.w	r0, #0
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	0159      	lsls	r1, r3, #5
 80042c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ca:	0150      	lsls	r0, r2, #5
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4641      	mov	r1, r8
 80042d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042d6:	4649      	mov	r1, r9
 80042d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042f0:	ebb2 040a 	subs.w	r4, r2, sl
 80042f4:	eb63 050b 	sbc.w	r5, r3, fp
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	00eb      	lsls	r3, r5, #3
 8004302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004306:	00e2      	lsls	r2, r4, #3
 8004308:	4614      	mov	r4, r2
 800430a:	461d      	mov	r5, r3
 800430c:	4643      	mov	r3, r8
 800430e:	18e3      	adds	r3, r4, r3
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	464b      	mov	r3, r9
 8004314:	eb45 0303 	adc.w	r3, r5, r3
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004326:	4629      	mov	r1, r5
 8004328:	028b      	lsls	r3, r1, #10
 800432a:	4621      	mov	r1, r4
 800432c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004330:	4621      	mov	r1, r4
 8004332:	028a      	lsls	r2, r1, #10
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433a:	2200      	movs	r2, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	61fa      	str	r2, [r7, #28]
 8004340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004344:	f7fb ff9c 	bl	8000280 <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4613      	mov	r3, r2
 800434e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_GetSysClockFreq+0x200>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	3301      	adds	r3, #1
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800436a:	e002      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_GetSysClockFreq+0x204>)
 800436e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004374:	4618      	mov	r0, r3
 8004376:	3750      	adds	r7, #80	; 0x50
 8004378:	46bd      	mov	sp, r7
 800437a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
 8004384:	00f42400 	.word	0x00f42400
 8004388:	007a1200 	.word	0x007a1200

0800438c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000000 	.word	0x20000000

080043a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a8:	f7ff fff0 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0a9b      	lsrs	r3, r3, #10
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4903      	ldr	r1, [pc, #12]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40023800 	.word	0x40023800
 80043c8:	080097cc 	.word	0x080097cc

080043cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043d0:	f7ff ffdc 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0b5b      	lsrs	r3, r3, #13
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	080097cc 	.word	0x080097cc

080043f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004418:	2b00      	cmp	r3, #0
 800441a:	d035      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800441c:	4b62      	ldr	r3, [pc, #392]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004422:	f7fc fdd7 	bl	8000fd4 <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004428:	e008      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800442a:	f7fc fdd3 	bl	8000fd4 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e0b0      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800443c:	4b5b      	ldr	r3, [pc, #364]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	019a      	lsls	r2, r3, #6
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	071b      	lsls	r3, r3, #28
 8004454:	4955      	ldr	r1, [pc, #340]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800445c:	4b52      	ldr	r3, [pc, #328]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004462:	f7fc fdb7 	bl	8000fd4 <HAL_GetTick>
 8004466:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004468:	e008      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800446a:	f7fc fdb3 	bl	8000fd4 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e090      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800447c:	4b4b      	ldr	r3, [pc, #300]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8083 	beq.w	800459c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	4b44      	ldr	r3, [pc, #272]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	4a43      	ldr	r2, [pc, #268]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6413      	str	r3, [r2, #64]	; 0x40
 80044a6:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044b2:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3e      	ldr	r2, [pc, #248]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044be:	f7fc fd89 	bl	8000fd4 <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044c6:	f7fc fd85 	bl	8000fd4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e062      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e4:	4b31      	ldr	r3, [pc, #196]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d02f      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d028      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004502:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800450c:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004512:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800451e:	4b23      	ldr	r3, [pc, #140]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b01      	cmp	r3, #1
 8004528:	d114      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800452a:	f7fc fd53 	bl	8000fd4 <HAL_GetTick>
 800452e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	e00a      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fc fd4f 	bl	8000fd4 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e02a      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	4b18      	ldr	r3, [pc, #96]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ee      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004560:	d10d      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004576:	490d      	ldr	r1, [pc, #52]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004578:	4313      	orrs	r3, r2
 800457a:	608b      	str	r3, [r1, #8]
 800457c:	e005      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004584:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004588:	6093      	str	r3, [r2, #8]
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004596:	4905      	ldr	r1, [pc, #20]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	42470068 	.word	0x42470068
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40007000 	.word	0x40007000
 80045b4:	42470e40 	.word	0x42470e40

080045b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d13e      	bne.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d12f      	bne.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045ec:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045ee:	617b      	str	r3, [r7, #20]
          break;
 80045f0:	e02f      	b.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045f2:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045fe:	d108      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004600:	4b18      	ldr	r3, [pc, #96]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004608:	4a18      	ldr	r2, [pc, #96]	; (800466c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	e007      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461a:	4a15      	ldr	r2, [pc, #84]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004628:	099b      	lsrs	r3, r3, #6
 800462a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463c:	0f1b      	lsrs	r3, r3, #28
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
          break;
 800464a:	e002      	b.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
          break;
 8004650:	bf00      	nop
        }
      }
      break;
 8004652:	bf00      	nop
    }
  }
  return frequency;
 8004654:	697b      	ldr	r3, [r7, #20]
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	00bb8000 	.word	0x00bb8000
 800466c:	007a1200 	.word	0x007a1200
 8004670:	00f42400 	.word	0x00f42400

08004674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07b      	b.n	800477e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004696:	d009      	beq.n	80046ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	61da      	str	r2, [r3, #28]
 800469e:	e005      	b.n	80046ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc fad6 	bl	8000c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	ea42 0103 	orr.w	r1, r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0104 	and.w	r1, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0210 	and.w	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e03f      	b.n	8004818 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fc faab 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2224      	movs	r2, #36	; 0x24
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fdde 	bl	800538c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b20      	cmp	r3, #32
 800483e:	d17c      	bne.n	800493a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UART_Transmit+0x2c>
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e075      	b.n	800493c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_UART_Transmit+0x3e>
 800485a:	2302      	movs	r3, #2
 800485c:	e06e      	b.n	800493c <HAL_UART_Transmit+0x11c>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2221      	movs	r2, #33	; 0x21
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004874:	f7fc fbae 	bl	8000fd4 <HAL_GetTick>
 8004878:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488e:	d108      	bne.n	80048a2 <HAL_UART_Transmit+0x82>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d104      	bne.n	80048a2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	e003      	b.n	80048aa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048b2:	e02a      	b.n	800490a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fb1e 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e036      	b.n	800493c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10b      	bne.n	80048ec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	3302      	adds	r3, #2
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	e007      	b.n	80048fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	781a      	ldrb	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1cf      	bne.n	80048b4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2200      	movs	r2, #0
 800491c:	2140      	movs	r1, #64	; 0x40
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 faee 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e006      	b.n	800493c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e000      	b.n	800493c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800493a:	2302      	movs	r3, #2
  }
}
 800493c:	4618      	mov	r0, r3
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b20      	cmp	r3, #32
 800495c:	d11d      	bne.n	800499a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_UART_Receive_IT+0x26>
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e016      	b.n	800499c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_UART_Receive_IT+0x38>
 8004978:	2302      	movs	r3, #2
 800497a:	e00f      	b.n	800499c <HAL_UART_Receive_IT+0x58>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	461a      	mov	r2, r3
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fb23 	bl	8004fdc <UART_Start_Receive_IT>
 8004996:	4603      	mov	r3, r0
 8004998:	e000      	b.n	800499c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b0ba      	sub	sp, #232	; 0xe8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_UART_IRQHandler+0x66>
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fc07 	bl	8005216 <UART_Receive_IT>
      return;
 8004a08:	e256      	b.n	8004eb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 80de 	beq.w	8004bd0 <HAL_UART_IRQHandler+0x22c>
 8004a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80d1 	beq.w	8004bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_UART_IRQHandler+0xae>
 8004a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_UART_IRQHandler+0xd2>
 8004a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f043 0202 	orr.w	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <HAL_UART_IRQHandler+0xf6>
 8004a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f043 0204 	orr.w	r2, r3, #4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d011      	beq.n	8004aca <HAL_UART_IRQHandler+0x126>
 8004aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d105      	bne.n	8004abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f043 0208 	orr.w	r2, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 81ed 	beq.w	8004eae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_UART_IRQHandler+0x14e>
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fb92 	bl	8005216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <HAL_UART_IRQHandler+0x17a>
 8004b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d04f      	beq.n	8004bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa9a 	bl	8005058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d141      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3314      	adds	r3, #20
 8004b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1d9      	bne.n	8004b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d013      	beq.n	8004bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	4a7d      	ldr	r2, [pc, #500]	; (8004d80 <HAL_UART_IRQHandler+0x3dc>)
 8004b8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fbcf 	bl	8001336 <HAL_DMA_Abort_IT>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	e00e      	b.n	8004bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f990 	bl	8004ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb4:	e00a      	b.n	8004bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f98c 	bl	8004ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	e006      	b.n	8004bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f988 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bca:	e170      	b.n	8004eae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	bf00      	nop
    return;
 8004bce:	e16e      	b.n	8004eae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f040 814a 	bne.w	8004e6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8143 	beq.w	8004e6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 813c 	beq.w	8004e6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c16:	2b40      	cmp	r3, #64	; 0x40
 8004c18:	f040 80b4 	bne.w	8004d84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8140 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	f080 8139 	bcs.w	8004eb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c52:	f000 8088 	beq.w	8004d66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1d9      	bne.n	8004c56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3314      	adds	r3, #20
 8004ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e1      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3314      	adds	r3, #20
 8004ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e3      	bne.n	8004cde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d36:	f023 0310 	bic.w	r3, r3, #16
 8004d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d48:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e3      	bne.n	8004d24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fc fa78 	bl	8001256 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f8b6 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d7c:	e099      	b.n	8004eb2 <HAL_UART_IRQHandler+0x50e>
 8004d7e:	bf00      	nop
 8004d80:	0800511f 	.word	0x0800511f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 808b 	beq.w	8004eb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004dce:	647a      	str	r2, [r7, #68]	; 0x44
 8004dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e3      	bne.n	8004daa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3314      	adds	r3, #20
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	623b      	str	r3, [r7, #32]
   return(result);
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e06:	633a      	str	r2, [r7, #48]	; 0x30
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e3      	bne.n	8004de2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0310 	bic.w	r3, r3, #16
 8004e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69b9      	ldr	r1, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e3      	bne.n	8004e28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f83e 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e6c:	e023      	b.n	8004eb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_UART_IRQHandler+0x4ea>
 8004e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f95d 	bl	8005146 <UART_Transmit_IT>
    return;
 8004e8c:	e014      	b.n	8004eb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00e      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x514>
 8004e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f99d 	bl	80051e6 <UART_EndTransmit_IT>
    return;
 8004eac:	e004      	b.n	8004eb8 <HAL_UART_IRQHandler+0x514>
    return;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8004eb6:	bf00      	nop
  }
}
 8004eb8:	37e8      	adds	r7, #232	; 0xe8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop

08004ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b090      	sub	sp, #64	; 0x40
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	e050      	b.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f18:	d04c      	beq.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f20:	f7fc f858 	bl	8000fd4 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d241      	bcs.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f50:	637a      	str	r2, [r7, #52]	; 0x34
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e5      	bne.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3314      	adds	r3, #20
 8004f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	613b      	str	r3, [r7, #16]
   return(result);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3314      	adds	r3, #20
 8004f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f84:	623a      	str	r2, [r7, #32]
 8004f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	69f9      	ldr	r1, [r7, #28]
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e00f      	b.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d09f      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3740      	adds	r7, #64	; 0x40
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	88fa      	ldrh	r2, [r7, #6]
 8004ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2222      	movs	r2, #34	; 0x22
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005028:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0220 	orr.w	r2, r2, #32
 8005048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b095      	sub	sp, #84	; 0x54
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005080:	643a      	str	r2, [r7, #64]	; 0x40
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e5      	bne.n	8005060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d119      	bne.n	8005104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0310 	bic.w	r3, r3, #16
 80050e6:	647b      	str	r3, [r7, #68]	; 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f0:	61ba      	str	r2, [r7, #24]
 80050f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6979      	ldr	r1, [r7, #20]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	613b      	str	r3, [r7, #16]
   return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005112:	bf00      	nop
 8005114:	3754      	adds	r7, #84	; 0x54
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff fecb 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b21      	cmp	r3, #33	; 0x21
 8005158:	d13e      	bne.n	80051d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d114      	bne.n	800518e <UART_Transmit_IT+0x48>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d110      	bne.n	800518e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]
 800518c:	e008      	b.n	80051a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6211      	str	r1, [r2, #32]
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4619      	mov	r1, r3
 80051ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10f      	bne.n	80051d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e000      	b.n	80051da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fe5a 	bl	8004ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b08c      	sub	sp, #48	; 0x30
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b22      	cmp	r3, #34	; 0x22
 8005228:	f040 80ab 	bne.w	8005382 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d117      	bne.n	8005266 <UART_Receive_IT+0x50>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d113      	bne.n	8005266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005254:	b29a      	uxth	r2, r3
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	1c9a      	adds	r2, r3, #2
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28
 8005264:	e026      	b.n	80052b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d007      	beq.n	800528a <UART_Receive_IT+0x74>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <UART_Receive_IT+0x82>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e008      	b.n	80052aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29b      	uxth	r3, r3
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4619      	mov	r1, r3
 80052c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d15a      	bne.n	800537e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0220 	bic.w	r2, r2, #32
 80052d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0201 	bic.w	r2, r2, #1
 80052f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d135      	bne.n	8005374 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	613b      	str	r3, [r7, #16]
   return(result);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532e:	623a      	str	r2, [r7, #32]
 8005330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	61bb      	str	r3, [r7, #24]
   return(result);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d10a      	bne.n	8005366 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fdbb 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
 8005372:	e002      	b.n	800537a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fb fb49 	bl	8000a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e002      	b.n	8005384 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e000      	b.n	8005384 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	3730      	adds	r7, #48	; 0x30
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005390:	b0c0      	sub	sp, #256	; 0x100
 8005392:	af00      	add	r7, sp, #0
 8005394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	68d9      	ldr	r1, [r3, #12]
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	ea40 0301 	orr.w	r3, r0, r1
 80053b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053e4:	f021 010c 	bic.w	r1, r1, #12
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053f2:	430b      	orrs	r3, r1
 80053f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	6999      	ldr	r1, [r3, #24]
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	ea40 0301 	orr.w	r3, r0, r1
 8005412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b8f      	ldr	r3, [pc, #572]	; (8005658 <UART_SetConfig+0x2cc>)
 800541c:	429a      	cmp	r2, r3
 800541e:	d005      	beq.n	800542c <UART_SetConfig+0xa0>
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b8d      	ldr	r3, [pc, #564]	; (800565c <UART_SetConfig+0x2d0>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d104      	bne.n	8005436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800542c:	f7fe ffce 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 8005430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005434:	e003      	b.n	800543e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005436:	f7fe ffb5 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 800543a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005448:	f040 810c 	bne.w	8005664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800544c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005450:	2200      	movs	r2, #0
 8005452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800545a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800545e:	4622      	mov	r2, r4
 8005460:	462b      	mov	r3, r5
 8005462:	1891      	adds	r1, r2, r2
 8005464:	65b9      	str	r1, [r7, #88]	; 0x58
 8005466:	415b      	adcs	r3, r3
 8005468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800546a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800546e:	4621      	mov	r1, r4
 8005470:	eb12 0801 	adds.w	r8, r2, r1
 8005474:	4629      	mov	r1, r5
 8005476:	eb43 0901 	adc.w	r9, r3, r1
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548e:	4690      	mov	r8, r2
 8005490:	4699      	mov	r9, r3
 8005492:	4623      	mov	r3, r4
 8005494:	eb18 0303 	adds.w	r3, r8, r3
 8005498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800549c:	462b      	mov	r3, r5
 800549e:	eb49 0303 	adc.w	r3, r9, r3
 80054a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054ba:	460b      	mov	r3, r1
 80054bc:	18db      	adds	r3, r3, r3
 80054be:	653b      	str	r3, [r7, #80]	; 0x50
 80054c0:	4613      	mov	r3, r2
 80054c2:	eb42 0303 	adc.w	r3, r2, r3
 80054c6:	657b      	str	r3, [r7, #84]	; 0x54
 80054c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054d0:	f7fa fed6 	bl	8000280 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b61      	ldr	r3, [pc, #388]	; (8005660 <UART_SetConfig+0x2d4>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011c      	lsls	r4, r3, #4
 80054e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80054fc:	415b      	adcs	r3, r3
 80054fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005504:	4641      	mov	r1, r8
 8005506:	eb12 0a01 	adds.w	sl, r2, r1
 800550a:	4649      	mov	r1, r9
 800550c:	eb43 0b01 	adc.w	fp, r3, r1
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800551c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005524:	4692      	mov	sl, r2
 8005526:	469b      	mov	fp, r3
 8005528:	4643      	mov	r3, r8
 800552a:	eb1a 0303 	adds.w	r3, sl, r3
 800552e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005532:	464b      	mov	r3, r9
 8005534:	eb4b 0303 	adc.w	r3, fp, r3
 8005538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800554c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005550:	460b      	mov	r3, r1
 8005552:	18db      	adds	r3, r3, r3
 8005554:	643b      	str	r3, [r7, #64]	; 0x40
 8005556:	4613      	mov	r3, r2
 8005558:	eb42 0303 	adc.w	r3, r2, r3
 800555c:	647b      	str	r3, [r7, #68]	; 0x44
 800555e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005566:	f7fa fe8b 	bl	8000280 <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4611      	mov	r1, r2
 8005570:	4b3b      	ldr	r3, [pc, #236]	; (8005660 <UART_SetConfig+0x2d4>)
 8005572:	fba3 2301 	umull	r2, r3, r3, r1
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2264      	movs	r2, #100	; 0x64
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	1acb      	subs	r3, r1, r3
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005586:	4b36      	ldr	r3, [pc, #216]	; (8005660 <UART_SetConfig+0x2d4>)
 8005588:	fba3 2302 	umull	r2, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005594:	441c      	add	r4, r3
 8005596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80055b0:	415b      	adcs	r3, r3
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055b8:	4641      	mov	r1, r8
 80055ba:	1851      	adds	r1, r2, r1
 80055bc:	6339      	str	r1, [r7, #48]	; 0x30
 80055be:	4649      	mov	r1, r9
 80055c0:	414b      	adcs	r3, r1
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055d0:	4659      	mov	r1, fp
 80055d2:	00cb      	lsls	r3, r1, #3
 80055d4:	4651      	mov	r1, sl
 80055d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055da:	4651      	mov	r1, sl
 80055dc:	00ca      	lsls	r2, r1, #3
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	4642      	mov	r2, r8
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055ec:	464b      	mov	r3, r9
 80055ee:	460a      	mov	r2, r1
 80055f0:	eb42 0303 	adc.w	r3, r2, r3
 80055f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800560c:	460b      	mov	r3, r1
 800560e:	18db      	adds	r3, r3, r3
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
 8005612:	4613      	mov	r3, r2
 8005614:	eb42 0303 	adc.w	r3, r2, r3
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800561e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005622:	f7fa fe2d 	bl	8000280 <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <UART_SetConfig+0x2d4>)
 800562c:	fba3 1302 	umull	r1, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	2164      	movs	r1, #100	; 0x64
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	3332      	adds	r3, #50	; 0x32
 800563e:	4a08      	ldr	r2, [pc, #32]	; (8005660 <UART_SetConfig+0x2d4>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	f003 0207 	and.w	r2, r3, #7
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4422      	add	r2, r4
 8005652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005654:	e105      	b.n	8005862 <UART_SetConfig+0x4d6>
 8005656:	bf00      	nop
 8005658:	40011000 	.word	0x40011000
 800565c:	40011400 	.word	0x40011400
 8005660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005668:	2200      	movs	r2, #0
 800566a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800566e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005676:	4642      	mov	r2, r8
 8005678:	464b      	mov	r3, r9
 800567a:	1891      	adds	r1, r2, r2
 800567c:	6239      	str	r1, [r7, #32]
 800567e:	415b      	adcs	r3, r3
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005686:	4641      	mov	r1, r8
 8005688:	1854      	adds	r4, r2, r1
 800568a:	4649      	mov	r1, r9
 800568c:	eb43 0501 	adc.w	r5, r3, r1
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	00eb      	lsls	r3, r5, #3
 800569a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800569e:	00e2      	lsls	r2, r4, #3
 80056a0:	4614      	mov	r4, r2
 80056a2:	461d      	mov	r5, r3
 80056a4:	4643      	mov	r3, r8
 80056a6:	18e3      	adds	r3, r4, r3
 80056a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056ac:	464b      	mov	r3, r9
 80056ae:	eb45 0303 	adc.w	r3, r5, r3
 80056b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056d2:	4629      	mov	r1, r5
 80056d4:	008b      	lsls	r3, r1, #2
 80056d6:	4621      	mov	r1, r4
 80056d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056dc:	4621      	mov	r1, r4
 80056de:	008a      	lsls	r2, r1, #2
 80056e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056e4:	f7fa fdcc 	bl	8000280 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4b60      	ldr	r3, [pc, #384]	; (8005870 <UART_SetConfig+0x4e4>)
 80056ee:	fba3 2302 	umull	r2, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	011c      	lsls	r4, r3, #4
 80056f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005708:	4642      	mov	r2, r8
 800570a:	464b      	mov	r3, r9
 800570c:	1891      	adds	r1, r2, r2
 800570e:	61b9      	str	r1, [r7, #24]
 8005710:	415b      	adcs	r3, r3
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005718:	4641      	mov	r1, r8
 800571a:	1851      	adds	r1, r2, r1
 800571c:	6139      	str	r1, [r7, #16]
 800571e:	4649      	mov	r1, r9
 8005720:	414b      	adcs	r3, r1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005730:	4659      	mov	r1, fp
 8005732:	00cb      	lsls	r3, r1, #3
 8005734:	4651      	mov	r1, sl
 8005736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573a:	4651      	mov	r1, sl
 800573c:	00ca      	lsls	r2, r1, #3
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	4603      	mov	r3, r0
 8005744:	4642      	mov	r2, r8
 8005746:	189b      	adds	r3, r3, r2
 8005748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800574c:	464b      	mov	r3, r9
 800574e:	460a      	mov	r2, r1
 8005750:	eb42 0303 	adc.w	r3, r2, r3
 8005754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	67bb      	str	r3, [r7, #120]	; 0x78
 8005762:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005770:	4649      	mov	r1, r9
 8005772:	008b      	lsls	r3, r1, #2
 8005774:	4641      	mov	r1, r8
 8005776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577a:	4641      	mov	r1, r8
 800577c:	008a      	lsls	r2, r1, #2
 800577e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005782:	f7fa fd7d 	bl	8000280 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <UART_SetConfig+0x4e4>)
 800578c:	fba3 1302 	umull	r1, r3, r3, r2
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	2164      	movs	r1, #100	; 0x64
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	3332      	adds	r3, #50	; 0x32
 800579e:	4a34      	ldr	r2, [pc, #208]	; (8005870 <UART_SetConfig+0x4e4>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057aa:	441c      	add	r4, r3
 80057ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b0:	2200      	movs	r2, #0
 80057b2:	673b      	str	r3, [r7, #112]	; 0x70
 80057b4:	677a      	str	r2, [r7, #116]	; 0x74
 80057b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057ba:	4642      	mov	r2, r8
 80057bc:	464b      	mov	r3, r9
 80057be:	1891      	adds	r1, r2, r2
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	415b      	adcs	r3, r3
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ca:	4641      	mov	r1, r8
 80057cc:	1851      	adds	r1, r2, r1
 80057ce:	6039      	str	r1, [r7, #0]
 80057d0:	4649      	mov	r1, r9
 80057d2:	414b      	adcs	r3, r1
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057e2:	4659      	mov	r1, fp
 80057e4:	00cb      	lsls	r3, r1, #3
 80057e6:	4651      	mov	r1, sl
 80057e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ec:	4651      	mov	r1, sl
 80057ee:	00ca      	lsls	r2, r1, #3
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	4603      	mov	r3, r0
 80057f6:	4642      	mov	r2, r8
 80057f8:	189b      	adds	r3, r3, r2
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fc:	464b      	mov	r3, r9
 80057fe:	460a      	mov	r2, r1
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	663b      	str	r3, [r7, #96]	; 0x60
 8005810:	667a      	str	r2, [r7, #100]	; 0x64
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800581e:	4649      	mov	r1, r9
 8005820:	008b      	lsls	r3, r1, #2
 8005822:	4641      	mov	r1, r8
 8005824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005828:	4641      	mov	r1, r8
 800582a:	008a      	lsls	r2, r1, #2
 800582c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005830:	f7fa fd26 	bl	8000280 <__aeabi_uldivmod>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <UART_SetConfig+0x4e4>)
 800583a:	fba3 1302 	umull	r1, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	2164      	movs	r1, #100	; 0x64
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	3332      	adds	r3, #50	; 0x32
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <UART_SetConfig+0x4e4>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4422      	add	r2, r4
 8005860:	609a      	str	r2, [r3, #8]
}
 8005862:	bf00      	nop
 8005864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005868:	46bd      	mov	sp, r7
 800586a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800586e:	bf00      	nop
 8005870:	51eb851f 	.word	0x51eb851f

08005874 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005874:	b084      	sub	sp, #16
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	f107 001c 	add.w	r0, r7, #28
 8005882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b01      	cmp	r3, #1
 800588a:	d122      	bne.n	80058d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f9c0 	bl	8005c4c <USB_CoreReset>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	e01a      	b.n	8005908 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9b4 	bl	8005c4c <USB_CoreReset>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
 80058fa:	e005      	b.n	8005908 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10b      	bne.n	8005926 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f043 0206 	orr.w	r2, r3, #6
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005932:	b004      	add	sp, #16
 8005934:	4770      	bx	lr

08005936 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f043 0201 	orr.w	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f023 0201 	bic.w	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d115      	bne.n	80059c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059a8:	2001      	movs	r0, #1
 80059aa:	f7fb fb1f 	bl	8000fec <HAL_Delay>
      ms++;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f93a 	bl	8005c2e <USB_GetMode>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d01e      	beq.n	80059fe <USB_SetCurrentMode+0x84>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b31      	cmp	r3, #49	; 0x31
 80059c4:	d9f0      	bls.n	80059a8 <USB_SetCurrentMode+0x2e>
 80059c6:	e01a      	b.n	80059fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d115      	bne.n	80059fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059da:	2001      	movs	r0, #1
 80059dc:	f7fb fb06 	bl	8000fec <HAL_Delay>
      ms++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f921 	bl	8005c2e <USB_GetMode>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <USB_SetCurrentMode+0x84>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b31      	cmp	r3, #49	; 0x31
 80059f6:	d9f0      	bls.n	80059da <USB_SetCurrentMode+0x60>
 80059f8:	e001      	b.n	80059fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e005      	b.n	8005a0a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b32      	cmp	r3, #50	; 0x32
 8005a02:	d101      	bne.n	8005a08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4a13      	ldr	r2, [pc, #76]	; (8005a78 <USB_FlushTxFifo+0x64>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e01b      	b.n	8005a6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	daf2      	bge.n	8005a22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	019b      	lsls	r3, r3, #6
 8005a44:	f043 0220 	orr.w	r2, r3, #32
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <USB_FlushTxFifo+0x64>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e006      	b.n	8005a6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d0f0      	beq.n	8005a4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	00030d40 	.word	0x00030d40

08005a7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <USB_FlushRxFifo+0x5c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e018      	b.n	8005acc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	daf2      	bge.n	8005a88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <USB_FlushRxFifo+0x5c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e006      	b.n	8005acc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d0f0      	beq.n	8005aac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	00030d40 	.word	0x00030d40

08005adc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	460b      	mov	r3, r1
 8005aec:	71fb      	strb	r3, [r7, #7]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005afa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d123      	bne.n	8005b4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b02:	88bb      	ldrh	r3, [r7, #4]
 8005b04:	3303      	adds	r3, #3
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e018      	b.n	8005b42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	031a      	lsls	r2, r3, #12
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	3301      	adds	r3, #1
 8005b28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	3301      	adds	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d3e2      	bcc.n	8005b10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3724      	adds	r7, #36	; 0x24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b08b      	sub	sp, #44	; 0x2c
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	089b      	lsrs	r3, r3, #2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b7e:	2300      	movs	r3, #0
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	e014      	b.n	8005bae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	3301      	adds	r3, #1
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	3301      	adds	r3, #1
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	3301      	adds	r3, #1
 8005bac:	623b      	str	r3, [r7, #32]
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d3e6      	bcc.n	8005b84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bb6:	8bfb      	ldrh	r3, [r7, #30]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01e      	beq.n	8005bfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f107 0310 	add.w	r3, r7, #16
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	701a      	strb	r2, [r3, #0]
      i++;
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	3301      	adds	r3, #1
 8005be6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	3301      	adds	r3, #1
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bee:	8bfb      	ldrh	r3, [r7, #30]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bf4:	8bfb      	ldrh	r3, [r7, #30]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1ea      	bne.n	8005bd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	372c      	adds	r7, #44	; 0x2c
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c20:	68fb      	ldr	r3, [r7, #12]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
	...

08005c4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <USB_CoreReset+0x64>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e01b      	b.n	8005ca2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	daf2      	bge.n	8005c58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f043 0201 	orr.w	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <USB_CoreReset+0x64>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d901      	bls.n	8005c94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e006      	b.n	8005ca2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d0f0      	beq.n	8005c82 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	00030d40 	.word	0x00030d40

08005cb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10a      	bne.n	8005d26 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d1e:	f043 0304 	orr.w	r3, r3, #4
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e014      	b.n	8005d50 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d34:	f023 0304 	bic.w	r3, r3, #4
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e009      	b.n	8005d50 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d4a:	f023 0304 	bic.w	r3, r3, #4
 8005d4e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d50:	2110      	movs	r1, #16
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fe5e 	bl	8005a14 <USB_FlushTxFifo>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fe8a 	bl	8005a7c <USB_FlushRxFifo>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	e015      	b.n	8005da4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d84:	461a      	mov	r2, r3
 8005d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d8a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	461a      	mov	r2, r3
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	3301      	adds	r3, #1
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d3e5      	bcc.n	8005d78 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005db8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dcc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <USB_HostInit+0x16c>)
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <USB_HostInit+0x170>)
 8005dd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ddc:	e009      	b.n	8005df2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2280      	movs	r2, #128	; 0x80
 8005de2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a10      	ldr	r2, [pc, #64]	; (8005e28 <USB_HostInit+0x174>)
 8005de8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a0f      	ldr	r2, [pc, #60]	; (8005e2c <USB_HostInit+0x178>)
 8005dee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f043 0210 	orr.w	r2, r3, #16
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <USB_HostInit+0x17c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e1c:	b004      	add	sp, #16
 8005e1e:	4770      	bx	lr
 8005e20:	01000200 	.word	0x01000200
 8005e24:	00e00300 	.word	0x00e00300
 8005e28:	00600080 	.word	0x00600080
 8005e2c:	004000e0 	.word	0x004000e0
 8005e30:	a3200008 	.word	0xa3200008

08005e34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d107      	bne.n	8005e86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e82:	6053      	str	r3, [r2, #4]
 8005e84:	e009      	b.n	8005e9a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d106      	bne.n	8005e9a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e92:	461a      	mov	r2, r3
 8005e94:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e98:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ec8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ed8:	2064      	movs	r0, #100	; 0x64
 8005eda:	f7fb f887 	bl	8000fec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005eec:	200a      	movs	r0, #10
 8005eee:	f7fb f87d 	bl	8000fec <HAL_Delay>

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <USB_DriveVbus+0x44>
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d106      	bne.n	8005f40 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f3e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4a:	d109      	bne.n	8005f60 <USB_DriveVbus+0x64>
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f5e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	0c5b      	lsrs	r3, r3, #17
 8005f8c:	f003 0303 	and.w	r3, r3, #3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	b29b      	uxth	r3, r3
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	70fb      	strb	r3, [r7, #3]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	70bb      	strb	r3, [r7, #2]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ff6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d87e      	bhi.n	80060fc <USB_HC_Init+0x13c>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <USB_HC_Init+0x44>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006015 	.word	0x08006015
 8006008:	080060bf 	.word	0x080060bf
 800600c:	08006015 	.word	0x08006015
 8006010:	08006081 	.word	0x08006081
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	461a      	mov	r2, r3
 8006022:	f240 439d 	movw	r3, #1181	; 0x49d
 8006026:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006028:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	da10      	bge.n	8006052 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	440a      	add	r2, r1
 8006046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006050:	e057      	b.n	8006102 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d051      	beq.n	8006102 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	440a      	add	r2, r1
 8006074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006078:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800607c:	60d3      	str	r3, [r2, #12]
      break;
 800607e:	e040      	b.n	8006102 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608c:	461a      	mov	r2, r3
 800608e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006092:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006094:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006098:	2b00      	cmp	r3, #0
 800609a:	da34      	bge.n	8006106 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060bc:	e023      	b.n	8006106 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	461a      	mov	r2, r3
 80060cc:	f240 2325 	movw	r3, #549	; 0x225
 80060d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da17      	bge.n	800610a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060fa:	e006      	b.n	800610a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	77fb      	strb	r3, [r7, #31]
      break;
 8006100:	e004      	b.n	800610c <USB_HC_Init+0x14c>
      break;
 8006102:	bf00      	nop
 8006104:	e002      	b.n	800610c <USB_HC_Init+0x14c>
      break;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <USB_HC_Init+0x14c>
      break;
 800610a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	440a      	add	r2, r1
 8006122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006126:	f043 0302 	orr.w	r3, r3, #2
 800612a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006132:	699a      	ldr	r2, [r3, #24]
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	2101      	movs	r1, #1
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	6939      	ldr	r1, [r7, #16]
 8006142:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006146:	4313      	orrs	r3, r2
 8006148:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006156:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800615a:	2b00      	cmp	r3, #0
 800615c:	da03      	bge.n	8006166 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800615e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	e001      	b.n	800616a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff feff 	bl	8005f6e <USB_GetHostSpeed>
 8006170:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006172:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006176:	2b02      	cmp	r3, #2
 8006178:	d106      	bne.n	8006188 <USB_HC_Init+0x1c8>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d003      	beq.n	8006188 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e001      	b.n	800618c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800618c:	787b      	ldrb	r3, [r7, #1]
 800618e:	059b      	lsls	r3, r3, #22
 8006190:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006194:	78bb      	ldrb	r3, [r7, #2]
 8006196:	02db      	lsls	r3, r3, #11
 8006198:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800619c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800619e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061a2:	049b      	lsls	r3, r3, #18
 80061a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	0159      	lsls	r1, r3, #5
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	440b      	add	r3, r1
 80061be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061c8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80061ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d003      	beq.n	80061da <USB_HC_Init+0x21a>
 80061d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d10f      	bne.n	80061fa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061f8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800621c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006220:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622a:	2b00      	cmp	r3, #0
 800622c:	d02d      	beq.n	800628a <USB_HC_StartXfer+0x86>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	791b      	ldrb	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d129      	bne.n	800628a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d117      	bne.n	800626c <USB_HC_StartXfer+0x68>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	79db      	ldrb	r3, [r3, #7]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <USB_HC_StartXfer+0x48>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	79db      	ldrb	r3, [r3, #7]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d10f      	bne.n	800626c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	440a      	add	r2, r1
 8006262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <USB_HC_StartXfer+0x86>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	795b      	ldrb	r3, [r3, #5]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d107      	bne.n	800628a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	4619      	mov	r1, r3
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fa0f 	bl	80066a4 <USB_DoPing>
      return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e0f8      	b.n	800647c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d018      	beq.n	80062c4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	8912      	ldrh	r2, [r2, #8]
 800629a:	4413      	add	r3, r2
 800629c:	3b01      	subs	r3, #1
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	8912      	ldrh	r2, [r2, #8]
 80062a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062aa:	8b7b      	ldrh	r3, [r7, #26]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d90b      	bls.n	80062c8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80062b0:	8b7b      	ldrh	r3, [r7, #26]
 80062b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	8912      	ldrh	r2, [r2, #8]
 80062ba:	fb03 f202 	mul.w	r2, r3, r2
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	611a      	str	r2, [r3, #16]
 80062c2:	e001      	b.n	80062c8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80062c4:	2301      	movs	r3, #1
 80062c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	78db      	ldrb	r3, [r3, #3]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	8912      	ldrh	r2, [r2, #8]
 80062d6:	fb03 f202 	mul.w	r2, r3, r2
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	611a      	str	r2, [r3, #16]
 80062de:	e003      	b.n	80062e8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	695a      	ldr	r2, [r3, #20]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f2:	04d9      	lsls	r1, r3, #19
 80062f4:	4b63      	ldr	r3, [pc, #396]	; (8006484 <USB_HC_StartXfer+0x280>)
 80062f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	7a9b      	ldrb	r3, [r3, #10]
 80062fe:	075b      	lsls	r3, r3, #29
 8006300:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	0148      	lsls	r0, r1, #5
 8006308:	6a39      	ldr	r1, [r7, #32]
 800630a:	4401      	add	r1, r0
 800630c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006310:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006312:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	68d9      	ldr	r1, [r3, #12]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	460a      	mov	r2, r1
 800632c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	6a3a      	ldr	r2, [r7, #32]
 800635a:	440a      	add	r2, r1
 800635c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006360:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006364:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	4413      	add	r3, r2
 800636e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	7e7b      	ldrb	r3, [r7, #25]
 8006376:	075b      	lsls	r3, r3, #29
 8006378:	69f9      	ldr	r1, [r7, #28]
 800637a:	0148      	lsls	r0, r1, #5
 800637c:	6a39      	ldr	r1, [r7, #32]
 800637e:	4401      	add	r1, r0
 8006380:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006384:	4313      	orrs	r3, r2
 8006386:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800639e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	78db      	ldrb	r3, [r3, #3]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	e003      	b.n	80063ba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063b8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063c0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ce:	461a      	mov	r2, r3
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e04e      	b.n	800647c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	78db      	ldrb	r3, [r3, #3]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d149      	bne.n	800647a <USB_HC_StartXfer+0x276>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d045      	beq.n	800647a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	79db      	ldrb	r3, [r3, #7]
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d830      	bhi.n	8006458 <USB_HC_StartXfer+0x254>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <USB_HC_StartXfer+0x1f8>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	0800640d 	.word	0x0800640d
 8006400:	08006431 	.word	0x08006431
 8006404:	0800640d 	.word	0x0800640d
 8006408:	08006431 	.word	0x08006431
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	3303      	adds	r3, #3
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006416:	8afa      	ldrh	r2, [r7, #22]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	b29b      	uxth	r3, r3
 800641e:	429a      	cmp	r2, r3
 8006420:	d91c      	bls.n	800645c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	619a      	str	r2, [r3, #24]
        }
        break;
 800642e:	e015      	b.n	800645c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	3303      	adds	r3, #3
 8006436:	089b      	lsrs	r3, r3, #2
 8006438:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800643a:	8afa      	ldrh	r2, [r7, #22]
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	b29b      	uxth	r3, r3
 8006446:	429a      	cmp	r2, r3
 8006448:	d90a      	bls.n	8006460 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	619a      	str	r2, [r3, #24]
        }
        break;
 8006456:	e003      	b.n	8006460 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006458:	bf00      	nop
 800645a:	e002      	b.n	8006462 <USB_HC_StartXfer+0x25e>
        break;
 800645c:	bf00      	nop
 800645e:	e000      	b.n	8006462 <USB_HC_StartXfer+0x25e>
        break;
 8006460:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	785a      	ldrb	r2, [r3, #1]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	b29b      	uxth	r3, r3
 8006470:	2000      	movs	r0, #0
 8006472:	9000      	str	r0, [sp, #0]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff fb31 	bl	8005adc <USB_WritePacket>
  }

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3728      	adds	r7, #40	; 0x28
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	1ff80000 	.word	0x1ff80000

08006488 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	b29b      	uxth	r3, r3
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b089      	sub	sp, #36	; 0x24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	0c9b      	lsrs	r3, r3, #18
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	0fdb      	lsrs	r3, r3, #31
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d104      	bne.n	8006504 <USB_HC_Halt+0x5a>
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	e0c8      	b.n	8006696 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <USB_HC_Halt+0x66>
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d163      	bne.n	80065d8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	f040 80ab 	bne.w	8006694 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d133      	bne.n	80065b2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	440a      	add	r2, r1
 8006560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006568:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	440a      	add	r2, r1
 8006580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006588:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006596:	d81d      	bhi.n	80065d4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ae:	d0ec      	beq.n	800658a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065b0:	e070      	b.n	8006694 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065d2:	e05f      	b.n	8006694 <USB_HC_Halt+0x1ea>
            break;
 80065d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065d6:	e05d      	b.n	8006694 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d133      	bne.n	8006670 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	440a      	add	r2, r1
 800661e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006622:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006626:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	440a      	add	r2, r1
 800663e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006646:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3301      	adds	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006654:	d81d      	bhi.n	8006692 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800666c:	d0ec      	beq.n	8006648 <USB_HC_Halt+0x19e>
 800666e:	e011      	b.n	8006694 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	440a      	add	r2, r1
 8006686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	e000      	b.n	8006694 <USB_HC_Halt+0x1ea>
          break;
 8006692:	bf00      	nop
    }
  }

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3724      	adds	r7, #36	; 0x24
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
	...

080066a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066b8:	2301      	movs	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	04da      	lsls	r2, r3, #19
 80066c0:	4b15      	ldr	r3, [pc, #84]	; (8006718 <USB_DoPing+0x74>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006702:	461a      	mov	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	1ff80000 	.word	0x1ff80000

0800671c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff f911 	bl	8005958 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006736:	2110      	movs	r1, #16
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff f96b 	bl	8005a14 <USB_FlushTxFifo>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff f997 	bl	8005a7c <USB_FlushRxFifo>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e01f      	b.n	800679e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006774:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800677c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006784:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	461a      	mov	r2, r3
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	3301      	adds	r3, #1
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	d9dc      	bls.n	800675e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067a4:	2300      	movs	r3, #0
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e034      	b.n	8006814 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067de:	461a      	mov	r2, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f0:	d80c      	bhi.n	800680c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006808:	d0ec      	beq.n	80067e4 <USB_StopHost+0xc8>
 800680a:	e000      	b.n	800680e <USB_StopHost+0xf2>
        break;
 800680c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	3301      	adds	r3, #1
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b0f      	cmp	r3, #15
 8006818:	d9c7      	bls.n	80067aa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006820:	461a      	mov	r2, r3
 8006822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006826:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800682e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff f880 	bl	8005936 <USB_EnableGlobalInt>

  return ret;
 8006836:	7ffb      	ldrb	r3, [r7, #31]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006840:	b590      	push	{r4, r7, lr}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af04      	add	r7, sp, #16
 8006846:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006848:	2301      	movs	r3, #1
 800684a:	2202      	movs	r2, #2
 800684c:	2102      	movs	r1, #2
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fc66 	bl	8007120 <USBH_FindInterface>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2bff      	cmp	r3, #255	; 0xff
 800685c:	d002      	beq.n	8006864 <USBH_CDC_InterfaceInit+0x24>
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d901      	bls.n	8006868 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	e13d      	b.n	8006ae4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc3b 	bl	80070e8 <USBH_SelectInterface>
 8006872:	4603      	mov	r3, r0
 8006874:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800687c:	2302      	movs	r3, #2
 800687e:	e131      	b.n	8006ae4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006886:	2050      	movs	r0, #80	; 0x50
 8006888:	f002 fafa 	bl	8008e80 <malloc>
 800688c:	4603      	mov	r3, r0
 800688e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068a0:	2302      	movs	r3, #2
 80068a2:	e11f      	b.n	8006ae4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068a4:	2250      	movs	r2, #80	; 0x50
 80068a6:	2100      	movs	r1, #0
 80068a8:	68b8      	ldr	r0, [r7, #8]
 80068aa:	f002 faf9 	bl	8008ea0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	211a      	movs	r1, #26
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b25b      	sxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da15      	bge.n	80068f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	211a      	movs	r1, #26
 80068cc:	fb01 f303 	mul.w	r3, r1, r3
 80068d0:	4413      	add	r3, r2
 80068d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068d6:	781a      	ldrb	r2, [r3, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	211a      	movs	r1, #26
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068ec:	881a      	ldrh	r2, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 ff2c 	bl	8008756 <USBH_AllocPipe>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	7819      	ldrb	r1, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	7858      	ldrb	r0, [r3, #1]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	8952      	ldrh	r2, [r2, #10]
 800691e:	9202      	str	r2, [sp, #8]
 8006920:	2203      	movs	r2, #3
 8006922:	9201      	str	r2, [sp, #4]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4623      	mov	r3, r4
 8006928:	4602      	mov	r2, r0
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fee4 	bl	80086f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2200      	movs	r2, #0
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f002 f9f3 	bl	8008d24 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800693e:	2300      	movs	r3, #0
 8006940:	2200      	movs	r2, #0
 8006942:	210a      	movs	r1, #10
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fbeb 	bl	8007120 <USBH_FindInterface>
 800694a:	4603      	mov	r3, r0
 800694c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	2bff      	cmp	r3, #255	; 0xff
 8006952:	d002      	beq.n	800695a <USBH_CDC_InterfaceInit+0x11a>
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d901      	bls.n	800695e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800695a:	2302      	movs	r3, #2
 800695c:	e0c2      	b.n	8006ae4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	211a      	movs	r1, #26
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	4413      	add	r3, r2
 800696a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b25b      	sxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	da16      	bge.n	80069a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	211a      	movs	r1, #26
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	211a      	movs	r1, #26
 8006992:	fb01 f303 	mul.w	r3, r1, r3
 8006996:	4413      	add	r3, r2
 8006998:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800699c:	881a      	ldrh	r2, [r3, #0]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	835a      	strh	r2, [r3, #26]
 80069a2:	e015      	b.n	80069d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	211a      	movs	r1, #26
 80069aa:	fb01 f303 	mul.w	r3, r1, r3
 80069ae:	4413      	add	r3, r2
 80069b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	211a      	movs	r1, #26
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069ca:	881a      	ldrh	r2, [r3, #0]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	211a      	movs	r1, #26
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da16      	bge.n	8006a16 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	211a      	movs	r1, #26
 80069ee:	fb01 f303 	mul.w	r3, r1, r3
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	211a      	movs	r1, #26
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a0e:	881a      	ldrh	r2, [r3, #0]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	835a      	strh	r2, [r3, #26]
 8006a14:	e015      	b.n	8006a42 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	211a      	movs	r1, #26
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	211a      	movs	r1, #26
 8006a32:	fb01 f303 	mul.w	r3, r1, r3
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	7b9b      	ldrb	r3, [r3, #14]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fe84 	bl	8008756 <USBH_AllocPipe>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	461a      	mov	r2, r3
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	7bdb      	ldrb	r3, [r3, #15]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fe7a 	bl	8008756 <USBH_AllocPipe>
 8006a62:	4603      	mov	r3, r0
 8006a64:	461a      	mov	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7b59      	ldrb	r1, [r3, #13]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	7b98      	ldrb	r0, [r3, #14]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	8b12      	ldrh	r2, [r2, #24]
 8006a82:	9202      	str	r2, [sp, #8]
 8006a84:	2202      	movs	r2, #2
 8006a86:	9201      	str	r2, [sp, #4]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fe32 	bl	80086f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	7b19      	ldrb	r1, [r3, #12]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	7bd8      	ldrb	r0, [r3, #15]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	8b52      	ldrh	r2, [r2, #26]
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fe1d 	bl	80086f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	7b5b      	ldrb	r3, [r3, #13]
 8006aca:	2200      	movs	r2, #0
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f002 f928 	bl	8008d24 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	7b1b      	ldrb	r3, [r3, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f002 f921 	bl	8008d24 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd90      	pop	{r4, r7, pc}

08006aec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fe12 	bl	8008736 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fe3d 	bl	8008798 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	7b1b      	ldrb	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00e      	beq.n	8006b4a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	7b1b      	ldrb	r3, [r3, #12]
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 fdff 	bl	8008736 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	7b1b      	ldrb	r3, [r3, #12]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fe2a 	bl	8008798 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	7b5b      	ldrb	r3, [r3, #13]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	7b5b      	ldrb	r3, [r3, #13]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fdec 	bl	8008736 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	7b5b      	ldrb	r3, [r3, #13]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fe17 	bl	8008798 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f002 f983 	bl	8008e90 <free>
    phost->pActiveClass->pData = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b90:	2200      	movs	r2, #0
 8006b92:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3340      	adds	r3, #64	; 0x40
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f8b1 	bl	8006d1e <GetLineCoding>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bcc:	2102      	movs	r1, #2
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d877      	bhi.n	8006cf0 <USBH_CDC_Process+0x114>
 8006c00:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <USBH_CDC_Process+0x2c>)
 8006c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c06:	bf00      	nop
 8006c08:	08006c1d 	.word	0x08006c1d
 8006c0c:	08006c23 	.word	0x08006c23
 8006c10:	08006c53 	.word	0x08006c53
 8006c14:	08006cc7 	.word	0x08006cc7
 8006c18:	08006cd5 	.word	0x08006cd5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c20:	e06d      	b.n	8006cfe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f897 	bl	8006d5c <SetLineCoding>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c40:	e058      	b.n	8006cf4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d055      	beq.n	8006cf4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c50:	e050      	b.n	8006cf4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	3340      	adds	r3, #64	; 0x40
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f860 	bl	8006d1e <GetLineCoding>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d126      	bne.n	8006cb6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7a:	791b      	ldrb	r3, [r3, #4]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d13b      	bne.n	8006cf8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d133      	bne.n	8006cf8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d12b      	bne.n	8006cf8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d124      	bne.n	8006cf8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f958 	bl	8006f64 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cb4:	e020      	b.n	8006cf8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d01d      	beq.n	8006cf8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006cc4:	e018      	b.n	8006cf8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f867 	bl	8006d9a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f8da 	bl	8006e86 <CDC_ProcessReception>
      break;
 8006cd2:	e014      	b.n	8006cfe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 ffef 	bl	8007cba <USBH_ClrFeature>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cee:	e005      	b.n	8006cfc <USBH_CDC_Process+0x120>

    default:
      break;
 8006cf0:	bf00      	nop
 8006cf2:	e004      	b.n	8006cfe <USBH_CDC_Process+0x122>
      break;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <USBH_CDC_Process+0x122>
      break;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <USBH_CDC_Process+0x122>
      break;
 8006cfc:	bf00      	nop

  }

  return status;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	22a1      	movs	r2, #161	; 0xa1
 8006d2c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2221      	movs	r2, #33	; 0x21
 8006d32:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2207      	movs	r2, #7
 8006d44:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2207      	movs	r2, #7
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fa81 	bl	8008254 <USBH_CtlReq>
 8006d52:	4603      	mov	r3, r0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2221      	movs	r2, #33	; 0x21
 8006d6a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2207      	movs	r2, #7
 8006d82:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2207      	movs	r2, #7
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 fa62 	bl	8008254 <USBH_CtlReq>
 8006d90:	4603      	mov	r3, r0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af02      	add	r7, sp, #8
 8006da0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d002      	beq.n	8006dc0 <CDC_ProcessTransmission+0x26>
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d023      	beq.n	8006e06 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dbe:	e05e      	b.n	8006e7e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	8b12      	ldrh	r2, [r2, #24]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d90b      	bls.n	8006de4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	69d9      	ldr	r1, [r3, #28]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8b1a      	ldrh	r2, [r3, #24]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	7b5b      	ldrb	r3, [r3, #13]
 8006dd8:	2001      	movs	r0, #1
 8006dda:	9000      	str	r0, [sp, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fc48 	bl	8008672 <USBH_BulkSendData>
 8006de2:	e00b      	b.n	8006dfc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	7b5b      	ldrb	r3, [r3, #13]
 8006df2:	2001      	movs	r0, #1
 8006df4:	9000      	str	r0, [sp, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fc3b 	bl	8008672 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e04:	e03b      	b.n	8006e7e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	7b5b      	ldrb	r3, [r3, #13]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 ff5f 	bl	8008cd0 <USBH_LL_GetURBState>
 8006e12:	4603      	mov	r3, r0
 8006e14:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d128      	bne.n	8006e6e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	8b12      	ldrh	r2, [r2, #24]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d90e      	bls.n	8006e46 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	8b12      	ldrh	r2, [r2, #24]
 8006e30:	1a9a      	subs	r2, r3, r2
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	8b12      	ldrh	r2, [r2, #24]
 8006e3e:	441a      	add	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	61da      	str	r2, [r3, #28]
 8006e44:	e002      	b.n	8006e4c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d004      	beq.n	8006e5e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e5c:	e00e      	b.n	8006e7c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f868 	bl	8006f3c <USBH_CDC_TransmitCallback>
      break;
 8006e6c:	e006      	b.n	8006e7c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e6e:	7afb      	ldrb	r3, [r7, #11]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d103      	bne.n	8006e7c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e7c:	bf00      	nop
  }
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b086      	sub	sp, #24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d002      	beq.n	8006eac <CDC_ProcessReception+0x26>
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d00e      	beq.n	8006ec8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006eaa:	e043      	b.n	8006f34 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	6a19      	ldr	r1, [r3, #32]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	8b5a      	ldrh	r2, [r3, #26]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	7b1b      	ldrb	r3, [r3, #12]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fbff 	bl	80086bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ec6:	e035      	b.n	8006f34 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	7b1b      	ldrb	r3, [r3, #12]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fefe 	bl	8008cd0 <USBH_LL_GetURBState>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ed8:	7cfb      	ldrb	r3, [r7, #19]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d129      	bne.n	8006f32 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	7b1b      	ldrb	r3, [r3, #12]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fe61 	bl	8008bac <USBH_LL_GetLastXferSize>
 8006eea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d016      	beq.n	8006f24 <CDC_ProcessReception+0x9e>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	8b5b      	ldrh	r3, [r3, #26]
 8006efa:	461a      	mov	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d910      	bls.n	8006f24 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad2      	subs	r2, r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	441a      	add	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f22:	e006      	b.n	8006f32 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f80f 	bl	8006f50 <USBH_CDC_ReceiveCallback>
      break;
 8006f32:	bf00      	nop
  }
}
 8006f34:	bf00      	nop
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e029      	b.n	8006fe4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	79fa      	ldrb	r2, [r7, #7]
 8006f94:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f81f 	bl	8006fec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f001 fd31 	bl	8008a44 <USBH_LL_Init>

  return USBH_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e009      	b.n	8007012 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	33e0      	adds	r3, #224	; 0xe0
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	2200      	movs	r2, #0
 800700a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b0f      	cmp	r3, #15
 8007016:	d9f2      	bls.n	8006ffe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	e009      	b.n	8007032 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007038:	d3f1      	bcc.n	800701e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2240      	movs	r2, #64	; 0x40
 800705e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d016      	beq.n	80070d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10e      	bne.n	80070d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070b8:	1c59      	adds	r1, r3, #1
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	33de      	adds	r3, #222	; 0xde
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
 80070ce:	e004      	b.n	80070da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070d0:	2302      	movs	r3, #2
 80070d2:	73fb      	strb	r3, [r7, #15]
 80070d4:	e001      	b.n	80070da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070d6:	2302      	movs	r3, #2
 80070d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	429a      	cmp	r2, r3
 8007102:	d204      	bcs.n	800710e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800710c:	e001      	b.n	8007112 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800710e:	2302      	movs	r3, #2
 8007110:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	4608      	mov	r0, r1
 800712a:	4611      	mov	r1, r2
 800712c:	461a      	mov	r2, r3
 800712e:	4603      	mov	r3, r0
 8007130:	70fb      	strb	r3, [r7, #3]
 8007132:	460b      	mov	r3, r1
 8007134:	70bb      	strb	r3, [r7, #2]
 8007136:	4613      	mov	r3, r2
 8007138:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007148:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800714a:	e025      	b.n	8007198 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	221a      	movs	r2, #26
 8007150:	fb02 f303 	mul.w	r3, r2, r3
 8007154:	3308      	adds	r3, #8
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	3302      	adds	r3, #2
 800715c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	795b      	ldrb	r3, [r3, #5]
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	429a      	cmp	r2, r3
 8007166:	d002      	beq.n	800716e <USBH_FindInterface+0x4e>
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	2bff      	cmp	r3, #255	; 0xff
 800716c:	d111      	bne.n	8007192 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007172:	78ba      	ldrb	r2, [r7, #2]
 8007174:	429a      	cmp	r2, r3
 8007176:	d002      	beq.n	800717e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007178:	78bb      	ldrb	r3, [r7, #2]
 800717a:	2bff      	cmp	r3, #255	; 0xff
 800717c:	d109      	bne.n	8007192 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007182:	787a      	ldrb	r2, [r7, #1]
 8007184:	429a      	cmp	r2, r3
 8007186:	d002      	beq.n	800718e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007188:	787b      	ldrb	r3, [r7, #1]
 800718a:	2bff      	cmp	r3, #255	; 0xff
 800718c:	d101      	bne.n	8007192 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	e006      	b.n	80071a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	3301      	adds	r3, #1
 8007196:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d9d6      	bls.n	800714c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800719e:	23ff      	movs	r3, #255	; 0xff
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fc81 	bl	8008abc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071ba:	2101      	movs	r1, #1
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fd9a 	bl	8008cf6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071d4:	2302      	movs	r3, #2
 80071d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d102      	bne.n	80071ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2203      	movs	r2, #3
 80071ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b0b      	cmp	r3, #11
 80071f6:	f200 81be 	bhi.w	8007576 <USBH_Process+0x3aa>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <USBH_Process+0x34>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007231 	.word	0x08007231
 8007204:	08007263 	.word	0x08007263
 8007208:	080072cb 	.word	0x080072cb
 800720c:	08007511 	.word	0x08007511
 8007210:	08007577 	.word	0x08007577
 8007214:	0800736f 	.word	0x0800736f
 8007218:	080074b7 	.word	0x080074b7
 800721c:	080073a5 	.word	0x080073a5
 8007220:	080073c5 	.word	0x080073c5
 8007224:	080073e5 	.word	0x080073e5
 8007228:	08007429 	.word	0x08007429
 800722c:	080074f9 	.word	0x080074f9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 819e 	beq.w	800757a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007244:	20c8      	movs	r0, #200	; 0xc8
 8007246:	f001 fd9d 	bl	8008d84 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fc93 	bl	8008b76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007260:	e18b      	b.n	800757a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007268:	2b01      	cmp	r3, #1
 800726a:	d107      	bne.n	800727c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800727a:	e18d      	b.n	8007598 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007286:	d914      	bls.n	80072b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800728e:	3301      	adds	r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d903      	bls.n	80072aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	220d      	movs	r2, #13
 80072a6:	701a      	strb	r2, [r3, #0]
      break;
 80072a8:	e176      	b.n	8007598 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
      break;
 80072b0:	e172      	b.n	8007598 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072b8:	f103 020a 	add.w	r2, r3, #10
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072c2:	200a      	movs	r0, #10
 80072c4:	f001 fd5e 	bl	8008d84 <USBH_Delay>
      break;
 80072c8:	e166      	b.n	8007598 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072da:	2104      	movs	r1, #4
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072e0:	2064      	movs	r0, #100	; 0x64
 80072e2:	f001 fd4f 	bl	8008d84 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 fc1e 	bl	8008b28 <USBH_LL_GetSpeed>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2205      	movs	r2, #5
 80072fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072fc:	2100      	movs	r1, #0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 fa29 	bl	8008756 <USBH_AllocPipe>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800730c:	2180      	movs	r1, #128	; 0x80
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fa21 	bl	8008756 <USBH_AllocPipe>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7919      	ldrb	r1, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007330:	b292      	uxth	r2, r2
 8007332:	9202      	str	r2, [sp, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	9201      	str	r2, [sp, #4]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4603      	mov	r3, r0
 800733c:	2280      	movs	r2, #128	; 0x80
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f9da 	bl	80086f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7959      	ldrb	r1, [r3, #5]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007358:	b292      	uxth	r2, r2
 800735a:	9202      	str	r2, [sp, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	9201      	str	r2, [sp, #4]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	4603      	mov	r3, r0
 8007364:	2200      	movs	r2, #0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f9c6 	bl	80086f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800736c:	e114      	b.n	8007598 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f918 	bl	80075a4 <USBH_HandleEnum>
 8007374:	4603      	mov	r3, r0
 8007376:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 80fe 	bne.w	800757e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007390:	2b01      	cmp	r3, #1
 8007392:	d103      	bne.n	800739c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2208      	movs	r2, #8
 8007398:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800739a:	e0f0      	b.n	800757e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2207      	movs	r2, #7
 80073a0:	701a      	strb	r2, [r3, #0]
      break;
 80073a2:	e0ec      	b.n	800757e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 80e9 	beq.w	8007582 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073b6:	2101      	movs	r1, #1
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2208      	movs	r2, #8
 80073c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073c2:	e0de      	b.n	8007582 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fc2c 	bl	8007c2c <USBH_SetCfg>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f040 80d5 	bne.w	8007586 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2209      	movs	r2, #9
 80073e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073e2:	e0d0      	b.n	8007586 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80073f2:	2101      	movs	r1, #1
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc3c 	bl	8007c72 <USBH_SetFeature>
 80073fa:	4603      	mov	r3, r0
 80073fc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d103      	bne.n	800740e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	220a      	movs	r2, #10
 800740a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800740c:	e0bd      	b.n	800758a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b03      	cmp	r3, #3
 8007414:	f040 80b9 	bne.w	800758a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	220a      	movs	r2, #10
 800741c:	701a      	strb	r2, [r3, #0]
      break;
 800741e:	e0b4      	b.n	800758a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	220a      	movs	r2, #10
 8007424:	701a      	strb	r2, [r3, #0]
      break;
 8007426:	e0b0      	b.n	800758a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 80ad 	beq.w	800758e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]
 8007440:	e016      	b.n	8007470 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007442:	7bfa      	ldrb	r2, [r7, #15]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	32de      	adds	r2, #222	; 0xde
 8007448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744c:	791a      	ldrb	r2, [r3, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007454:	429a      	cmp	r2, r3
 8007456:	d108      	bne.n	800746a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007458:	7bfa      	ldrb	r2, [r7, #15]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32de      	adds	r2, #222	; 0xde
 800745e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007468:	e005      	b.n	8007476 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	3301      	adds	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0e5      	beq.n	8007442 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d016      	beq.n	80074ae <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4798      	blx	r3
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2206      	movs	r2, #6
 8007496:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800749e:	2103      	movs	r1, #3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074a4:	e073      	b.n	800758e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	220d      	movs	r2, #13
 80074aa:	701a      	strb	r2, [r3, #0]
      break;
 80074ac:	e06f      	b.n	800758e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	220d      	movs	r2, #13
 80074b2:	701a      	strb	r2, [r3, #0]
      break;
 80074b4:	e06b      	b.n	800758e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
 80074cc:	4603      	mov	r3, r0
 80074ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	220b      	movs	r2, #11
 80074dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074de:	e058      	b.n	8007592 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d154      	bne.n	8007592 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	220d      	movs	r2, #13
 80074ec:	701a      	strb	r2, [r3, #0]
      break;
 80074ee:	e050      	b.n	8007592 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	220d      	movs	r2, #13
 80074f4:	701a      	strb	r2, [r3, #0]
      break;
 80074f6:	e04c      	b.n	8007592 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d049      	beq.n	8007596 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
      }
      break;
 800750e:	e042      	b.n	8007596 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff fd67 	bl	8006fec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800754c:	2105      	movs	r1, #5
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d107      	bne.n	800756e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fe20 	bl	80071ac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800756c:	e014      	b.n	8007598 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 faa4 	bl	8008abc <USBH_LL_Start>
      break;
 8007574:	e010      	b.n	8007598 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007576:	bf00      	nop
 8007578:	e00e      	b.n	8007598 <USBH_Process+0x3cc>
      break;
 800757a:	bf00      	nop
 800757c:	e00c      	b.n	8007598 <USBH_Process+0x3cc>
      break;
 800757e:	bf00      	nop
 8007580:	e00a      	b.n	8007598 <USBH_Process+0x3cc>
    break;
 8007582:	bf00      	nop
 8007584:	e008      	b.n	8007598 <USBH_Process+0x3cc>
      break;
 8007586:	bf00      	nop
 8007588:	e006      	b.n	8007598 <USBH_Process+0x3cc>
      break;
 800758a:	bf00      	nop
 800758c:	e004      	b.n	8007598 <USBH_Process+0x3cc>
      break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <USBH_Process+0x3cc>
      break;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <USBH_Process+0x3cc>
      break;
 8007596:	bf00      	nop
  }
  return USBH_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop

080075a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af04      	add	r7, sp, #16
 80075aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b07      	cmp	r3, #7
 80075ba:	f200 81c1 	bhi.w	8007940 <USBH_HandleEnum+0x39c>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBH_HandleEnum+0x20>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075e5 	.word	0x080075e5
 80075c8:	080076a3 	.word	0x080076a3
 80075cc:	0800770d 	.word	0x0800770d
 80075d0:	0800779b 	.word	0x0800779b
 80075d4:	08007805 	.word	0x08007805
 80075d8:	08007875 	.word	0x08007875
 80075dc:	080078bb 	.word	0x080078bb
 80075e0:	08007901 	.word	0x08007901
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075e4:	2108      	movs	r1, #8
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fa50 	bl	8007a8c <USBH_Get_DevDesc>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d130      	bne.n	8007658 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7919      	ldrb	r1, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800761a:	b292      	uxth	r2, r2
 800761c:	9202      	str	r2, [sp, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	9201      	str	r2, [sp, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4603      	mov	r3, r0
 8007626:	2280      	movs	r2, #128	; 0x80
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 f865 	bl	80086f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7959      	ldrb	r1, [r3, #5]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007642:	b292      	uxth	r2, r2
 8007644:	9202      	str	r2, [sp, #8]
 8007646:	2200      	movs	r2, #0
 8007648:	9201      	str	r2, [sp, #4]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4603      	mov	r3, r0
 800764e:	2200      	movs	r2, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f851 	bl	80086f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007656:	e175      	b.n	8007944 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b03      	cmp	r3, #3
 800765c:	f040 8172 	bne.w	8007944 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007666:	3301      	adds	r3, #1
 8007668:	b2da      	uxtb	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007676:	2b03      	cmp	r3, #3
 8007678:	d903      	bls.n	8007682 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	220d      	movs	r2, #13
 800767e:	701a      	strb	r2, [r3, #0]
      break;
 8007680:	e160      	b.n	8007944 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	795b      	ldrb	r3, [r3, #5]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 f885 	bl	8008798 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	791b      	ldrb	r3, [r3, #4]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 f87f 	bl	8008798 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
      break;
 80076a0:	e150      	b.n	8007944 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076a2:	2112      	movs	r1, #18
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f9f1 	bl	8007a8c <USBH_Get_DevDesc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ba:	e145      	b.n	8007948 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f040 8142 	bne.w	8007948 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d903      	bls.n	80076e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220d      	movs	r2, #13
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e130      	b.n	8007948 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f853 	bl	8008798 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 f84d 	bl	8008798 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e11d      	b.n	8007948 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800770c:	2101      	movs	r1, #1
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa68 	bl	8007be4 <USBH_SetAddress>
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d132      	bne.n	8007784 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800771e:	2002      	movs	r0, #2
 8007720:	f001 fb30 	bl	8008d84 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2203      	movs	r2, #3
 8007730:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	7919      	ldrb	r1, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007746:	b292      	uxth	r2, r2
 8007748:	9202      	str	r2, [sp, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	9201      	str	r2, [sp, #4]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	4603      	mov	r3, r0
 8007752:	2280      	movs	r2, #128	; 0x80
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 ffcf 	bl	80086f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7959      	ldrb	r1, [r3, #5]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800776e:	b292      	uxth	r2, r2
 8007770:	9202      	str	r2, [sp, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	9201      	str	r2, [sp, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4603      	mov	r3, r0
 800777a:	2200      	movs	r2, #0
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 ffbb 	bl	80086f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007782:	e0e3      	b.n	800794c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b03      	cmp	r3, #3
 8007788:	f040 80e0 	bne.w	800794c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	220d      	movs	r2, #13
 8007790:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	705a      	strb	r2, [r3, #1]
      break;
 8007798:	e0d8      	b.n	800794c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800779a:	2109      	movs	r1, #9
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f99d 	bl	8007adc <USBH_Get_CfgDesc>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2204      	movs	r2, #4
 80077b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077b2:	e0cd      	b.n	8007950 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	f040 80ca 	bne.w	8007950 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077c2:	3301      	adds	r3, #1
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d903      	bls.n	80077de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	220d      	movs	r2, #13
 80077da:	701a      	strb	r2, [r3, #0]
      break;
 80077dc:	e0b8      	b.n	8007950 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	795b      	ldrb	r3, [r3, #5]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 ffd7 	bl	8008798 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 ffd1 	bl	8008798 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e0a5      	b.n	8007950 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f965 	bl	8007adc <USBH_Get_CfgDesc>
 8007812:	4603      	mov	r3, r0
 8007814:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d103      	bne.n	8007824 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2205      	movs	r2, #5
 8007820:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007822:	e097      	b.n	8007954 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	2b03      	cmp	r3, #3
 8007828:	f040 8094 	bne.w	8007954 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007832:	3301      	adds	r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007842:	2b03      	cmp	r3, #3
 8007844:	d903      	bls.n	800784e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	220d      	movs	r2, #13
 800784a:	701a      	strb	r2, [r3, #0]
      break;
 800784c:	e082      	b.n	8007954 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	795b      	ldrb	r3, [r3, #5]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 ff9f 	bl	8008798 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	791b      	ldrb	r3, [r3, #4]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 ff99 	bl	8008798 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	701a      	strb	r2, [r3, #0]
      break;
 8007872:	e06f      	b.n	8007954 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800787a:	2b00      	cmp	r3, #0
 800787c:	d019      	beq.n	80078b2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800788a:	23ff      	movs	r3, #255	; 0xff
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f949 	bl	8007b24 <USBH_Get_StringDesc>
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2206      	movs	r2, #6
 80078a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078a2:	e059      	b.n	8007958 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d156      	bne.n	8007958 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2206      	movs	r2, #6
 80078ae:	705a      	strb	r2, [r3, #1]
      break;
 80078b0:	e052      	b.n	8007958 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2206      	movs	r2, #6
 80078b6:	705a      	strb	r2, [r3, #1]
      break;
 80078b8:	e04e      	b.n	8007958 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d019      	beq.n	80078f8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078d0:	23ff      	movs	r3, #255	; 0xff
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f926 	bl	8007b24 <USBH_Get_StringDesc>
 80078d8:	4603      	mov	r3, r0
 80078da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2207      	movs	r2, #7
 80078e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078e8:	e038      	b.n	800795c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d135      	bne.n	800795c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2207      	movs	r2, #7
 80078f4:	705a      	strb	r2, [r3, #1]
      break;
 80078f6:	e031      	b.n	800795c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2207      	movs	r2, #7
 80078fc:	705a      	strb	r2, [r3, #1]
      break;
 80078fe:	e02d      	b.n	800795c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007906:	2b00      	cmp	r3, #0
 8007908:	d017      	beq.n	800793a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007916:	23ff      	movs	r3, #255	; 0xff
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f903 	bl	8007b24 <USBH_Get_StringDesc>
 800791e:	4603      	mov	r3, r0
 8007920:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800792c:	e018      	b.n	8007960 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d115      	bne.n	8007960 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
      break;
 8007938:	e012      	b.n	8007960 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
      break;
 800793e:	e00f      	b.n	8007960 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007940:	bf00      	nop
 8007942:	e00e      	b.n	8007962 <USBH_HandleEnum+0x3be>
      break;
 8007944:	bf00      	nop
 8007946:	e00c      	b.n	8007962 <USBH_HandleEnum+0x3be>
      break;
 8007948:	bf00      	nop
 800794a:	e00a      	b.n	8007962 <USBH_HandleEnum+0x3be>
      break;
 800794c:	bf00      	nop
 800794e:	e008      	b.n	8007962 <USBH_HandleEnum+0x3be>
      break;
 8007950:	bf00      	nop
 8007952:	e006      	b.n	8007962 <USBH_HandleEnum+0x3be>
      break;
 8007954:	bf00      	nop
 8007956:	e004      	b.n	8007962 <USBH_HandleEnum+0x3be>
      break;
 8007958:	bf00      	nop
 800795a:	e002      	b.n	8007962 <USBH_HandleEnum+0x3be>
      break;
 800795c:	bf00      	nop
 800795e:	e000      	b.n	8007962 <USBH_HandleEnum+0x3be>
      break;
 8007960:	bf00      	nop
  }
  return Status;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f804 	bl	80079ae <USBH_HandleSof>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b0b      	cmp	r3, #11
 80079be:	d10a      	bne.n	80079d6 <USBH_HandleSof+0x28>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
  }
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079ee:	bf00      	nop
}
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a0a:	bf00      	nop
}
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f844 	bl	8008af2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	791b      	ldrb	r3, [r3, #4]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fe91 	bl	8008798 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	795b      	ldrb	r3, [r3, #5]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fe8b 	bl	8008798 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f864 	bl	8007b7a <USBH_GetDescriptor>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	b292      	uxth	r2, r2
 8007acc:	4619      	mov	r1, r3
 8007ace:	f000 f918 	bl	8007d02 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	331c      	adds	r3, #28
 8007aec:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007aee:	887b      	ldrh	r3, [r7, #2]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f83d 	bl	8007b7a <USBH_GetDescriptor>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d107      	bne.n	8007b1a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b0a:	887b      	ldrh	r3, [r7, #2]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f987 	bl	8007e24 <USBH_ParseCfgDesc>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	460b      	mov	r3, r1
 8007b32:	72fb      	strb	r3, [r7, #11]
 8007b34:	4613      	mov	r3, r2
 8007b36:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b40:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b48:	893b      	ldrh	r3, [r7, #8]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	2100      	movs	r1, #0
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f812 	bl	8007b7a <USBH_GetDescriptor>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d107      	bne.n	8007b70 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b66:	893a      	ldrh	r2, [r7, #8]
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fb24 	bl	80081b8 <USBH_ParseStringDesc>
  }

  return status;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	607b      	str	r3, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	72fb      	strb	r3, [r7, #11]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	789b      	ldrb	r3, [r3, #2]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d11c      	bne.n	8007bce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2206      	movs	r2, #6
 8007ba4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	893a      	ldrh	r2, [r7, #8]
 8007baa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bac:	893b      	ldrh	r3, [r7, #8]
 8007bae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb6:	d104      	bne.n	8007bc2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f240 4209 	movw	r2, #1033	; 0x409
 8007bbe:	829a      	strh	r2, [r3, #20]
 8007bc0:	e002      	b.n	8007bc8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8b3a      	ldrh	r2, [r7, #24]
 8007bcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007bce:	8b3b      	ldrh	r3, [r7, #24]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fb3d 	bl	8008254 <USBH_CtlReq>
 8007bda:	4603      	mov	r3, r0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	789b      	ldrb	r3, [r3, #2]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d10f      	bne.n	8007c18 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2205      	movs	r2, #5
 8007c02:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fb19 	bl	8008254 <USBH_CtlReq>
 8007c22:	4603      	mov	r3, r0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	789b      	ldrb	r3, [r3, #2]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10e      	bne.n	8007c5e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2209      	movs	r2, #9
 8007c4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	887a      	ldrh	r2, [r7, #2]
 8007c50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2100      	movs	r1, #0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 faf6 	bl	8008254 <USBH_CtlReq>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	789b      	ldrb	r3, [r3, #2]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d10f      	bne.n	8007ca6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fad2 	bl	8008254 <USBH_CtlReq>
 8007cb0:	4603      	mov	r3, r0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	789b      	ldrb	r3, [r3, #2]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10f      	bne.n	8007cee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 faae 	bl	8008254 <USBH_CtlReq>
 8007cf8:	4603      	mov	r3, r0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	785a      	ldrb	r2, [r3, #1]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3302      	adds	r3, #2
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	3303      	adds	r3, #3
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	4313      	orrs	r3, r2
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	791a      	ldrb	r2, [r3, #4]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	795a      	ldrb	r2, [r3, #5]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	799a      	ldrb	r2, [r3, #6]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	79da      	ldrb	r2, [r3, #7]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	79db      	ldrb	r3, [r3, #7]
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	dc11      	bgt.n	8007d88 <USBH_ParseDevDesc+0x86>
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	db16      	blt.n	8007d96 <USBH_ParseDevDesc+0x94>
 8007d68:	3b08      	subs	r3, #8
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	bf14      	ite	ne
 8007d7c:	2301      	movne	r3, #1
 8007d7e:	2300      	moveq	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <USBH_ParseDevDesc+0x8a>
 8007d86:	e006      	b.n	8007d96 <USBH_ParseDevDesc+0x94>
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d104      	bne.n	8007d96 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	79da      	ldrb	r2, [r3, #7]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	71da      	strb	r2, [r3, #7]
      break;
 8007d94:	e003      	b.n	8007d9e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2240      	movs	r2, #64	; 0x40
 8007d9a:	71da      	strb	r2, [r3, #7]
      break;
 8007d9c:	bf00      	nop
  }

  if (length > 8U)
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d939      	bls.n	8007e18 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	3308      	adds	r3, #8
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	3309      	adds	r3, #9
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	330a      	adds	r3, #10
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	330b      	adds	r3, #11
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	330c      	adds	r3, #12
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	330d      	adds	r3, #13
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	7b9a      	ldrb	r2, [r3, #14]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	7bda      	ldrb	r2, [r3, #15]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	7c1a      	ldrb	r2, [r3, #16]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	7c5a      	ldrb	r2, [r3, #17]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	745a      	strb	r2, [r3, #17]
  }
}
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08c      	sub	sp, #48	; 0x30
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e38:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	781a      	ldrb	r2, [r3, #0]
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	785a      	ldrb	r2, [r3, #1]
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3302      	adds	r3, #2
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	3303      	adds	r3, #3
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e80:	bf28      	it	cs
 8007e82:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	791a      	ldrb	r2, [r3, #4]
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	795a      	ldrb	r2, [r3, #5]
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	799a      	ldrb	r2, [r3, #6]
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	79da      	ldrb	r2, [r3, #7]
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	7a1a      	ldrb	r2, [r3, #8]
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	d002      	beq.n	8007ec2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	2209      	movs	r2, #9
 8007ec0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	f240 809d 	bls.w	8008004 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007eca:	2309      	movs	r3, #9
 8007ecc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ed2:	e081      	b.n	8007fd8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ed4:	f107 0316 	add.w	r3, r7, #22
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007edc:	f000 f99f 	bl	800821e <USBH_GetNextDesc>
 8007ee0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d176      	bne.n	8007fd8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b09      	cmp	r3, #9
 8007ef0:	d002      	beq.n	8007ef8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	2209      	movs	r2, #9
 8007ef6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007efc:	221a      	movs	r2, #26
 8007efe:	fb02 f303 	mul.w	r3, r2, r3
 8007f02:	3308      	adds	r3, #8
 8007f04:	6a3a      	ldr	r2, [r7, #32]
 8007f06:	4413      	add	r3, r2
 8007f08:	3302      	adds	r3, #2
 8007f0a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f0e:	69f8      	ldr	r0, [r7, #28]
 8007f10:	f000 f87e 	bl	8008010 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f1e:	e043      	b.n	8007fa8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f20:	f107 0316 	add.w	r3, r7, #22
 8007f24:	4619      	mov	r1, r3
 8007f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f28:	f000 f979 	bl	800821e <USBH_GetNextDesc>
 8007f2c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	785b      	ldrb	r3, [r3, #1]
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d138      	bne.n	8007fa8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	795b      	ldrb	r3, [r3, #5]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d10f      	bne.n	8007f5e <USBH_ParseCfgDesc+0x13a>
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	799b      	ldrb	r3, [r3, #6]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d10b      	bne.n	8007f5e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	79db      	ldrb	r3, [r3, #7]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10f      	bne.n	8007f6e <USBH_ParseCfgDesc+0x14a>
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d00b      	beq.n	8007f6e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	2209      	movs	r2, #9
 8007f5a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f5c:	e007      	b.n	8007f6e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b07      	cmp	r3, #7
 8007f64:	d004      	beq.n	8007f70 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	2207      	movs	r2, #7
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	e000      	b.n	8007f70 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f6e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f78:	3201      	adds	r2, #1
 8007f7a:	00d2      	lsls	r2, r2, #3
 8007f7c:	211a      	movs	r1, #26
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	3308      	adds	r3, #8
 8007f86:	6a3a      	ldr	r2, [r7, #32]
 8007f88:	4413      	add	r3, r2
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f90:	69b9      	ldr	r1, [r7, #24]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f86b 	bl	800806e <USBH_ParseEPDesc>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	791b      	ldrb	r3, [r3, #4]
 8007fac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d204      	bcs.n	8007fbe <USBH_ParseCfgDesc+0x19a>
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	885a      	ldrh	r2, [r3, #2]
 8007fb8:	8afb      	ldrh	r3, [r7, #22]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d8b0      	bhi.n	8007f20 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d201      	bcs.n	8007fce <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e01c      	b.n	8008008 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d805      	bhi.n	8007fec <USBH_ParseCfgDesc+0x1c8>
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	885a      	ldrh	r2, [r3, #2]
 8007fe4:	8afb      	ldrh	r3, [r7, #22]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	f63f af74 	bhi.w	8007ed4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	791b      	ldrb	r3, [r3, #4]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	bf28      	it	cs
 8007ff4:	2302      	movcs	r3, #2
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d201      	bcs.n	8008004 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008000:	2303      	movs	r3, #3
 8008002:	e001      	b.n	8008008 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008008:	4618      	mov	r0, r3
 800800a:	3730      	adds	r7, #48	; 0x30
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781a      	ldrb	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	785a      	ldrb	r2, [r3, #1]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	789a      	ldrb	r2, [r3, #2]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	78da      	ldrb	r2, [r3, #3]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	791a      	ldrb	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	795a      	ldrb	r2, [r3, #5]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	799a      	ldrb	r2, [r3, #6]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	79da      	ldrb	r2, [r3, #7]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	7a1a      	ldrb	r2, [r3, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	721a      	strb	r2, [r3, #8]
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800806e:	b480      	push	{r7}
 8008070:	b087      	sub	sp, #28
 8008072:	af00      	add	r7, sp, #0
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	60b9      	str	r1, [r7, #8]
 8008078:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	785a      	ldrb	r2, [r3, #1]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	789a      	ldrb	r2, [r3, #2]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	78da      	ldrb	r2, [r3, #3]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3304      	adds	r3, #4
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3305      	adds	r3, #5
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	4313      	orrs	r3, r2
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	799a      	ldrb	r2, [r3, #6]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	889b      	ldrh	r3, [r3, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80080ca:	2303      	movs	r3, #3
 80080cc:	75fb      	strb	r3, [r7, #23]
 80080ce:	e033      	b.n	8008138 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	889b      	ldrh	r3, [r3, #4]
 80080d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080d8:	f023 0307 	bic.w	r3, r3, #7
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	889b      	ldrh	r3, [r3, #4]
 80080e6:	b21a      	sxth	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3304      	adds	r3, #4
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	b299      	uxth	r1, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3305      	adds	r3, #5
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	430b      	orrs	r3, r1
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008104:	2b00      	cmp	r3, #0
 8008106:	d110      	bne.n	800812a <USBH_ParseEPDesc+0xbc>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3304      	adds	r3, #4
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b299      	uxth	r1, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3305      	adds	r3, #5
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	b29b      	uxth	r3, r3
 800811c:	430b      	orrs	r3, r1
 800811e:	b29b      	uxth	r3, r3
 8008120:	b21b      	sxth	r3, r3
 8008122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008126:	b21b      	sxth	r3, r3
 8008128:	e001      	b.n	800812e <USBH_ParseEPDesc+0xc0>
 800812a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800812e:	4313      	orrs	r3, r2
 8008130:	b21b      	sxth	r3, r3
 8008132:	b29a      	uxth	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800813e:	2b00      	cmp	r3, #0
 8008140:	d116      	bne.n	8008170 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	78db      	ldrb	r3, [r3, #3]
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d005      	beq.n	800815a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	78db      	ldrb	r3, [r3, #3]
 8008152:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008156:	2b03      	cmp	r3, #3
 8008158:	d127      	bne.n	80081aa <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	799b      	ldrb	r3, [r3, #6]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <USBH_ParseEPDesc+0xfc>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	799b      	ldrb	r3, [r3, #6]
 8008166:	2b10      	cmp	r3, #16
 8008168:	d91f      	bls.n	80081aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800816a:	2303      	movs	r3, #3
 800816c:	75fb      	strb	r3, [r7, #23]
 800816e:	e01c      	b.n	80081aa <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	78db      	ldrb	r3, [r3, #3]
 8008174:	f003 0303 	and.w	r3, r3, #3
 8008178:	2b01      	cmp	r3, #1
 800817a:	d10a      	bne.n	8008192 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	799b      	ldrb	r3, [r3, #6]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <USBH_ParseEPDesc+0x11e>
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	799b      	ldrb	r3, [r3, #6]
 8008188:	2b10      	cmp	r3, #16
 800818a:	d90e      	bls.n	80081aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800818c:	2303      	movs	r3, #3
 800818e:	75fb      	strb	r3, [r7, #23]
 8008190:	e00b      	b.n	80081aa <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	78db      	ldrb	r3, [r3, #3]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	2b03      	cmp	r3, #3
 800819c:	d105      	bne.n	80081aa <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	799b      	ldrb	r3, [r3, #6]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081a6:	2303      	movs	r3, #3
 80081a8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	4613      	mov	r3, r2
 80081c4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3301      	adds	r3, #1
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d120      	bne.n	8008212 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	1e9a      	subs	r2, r3, #2
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	4293      	cmp	r3, r2
 80081da:	bf28      	it	cs
 80081dc:	4613      	movcs	r3, r2
 80081de:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3302      	adds	r3, #2
 80081e4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80081e6:	2300      	movs	r3, #0
 80081e8:	82fb      	strh	r3, [r7, #22]
 80081ea:	e00b      	b.n	8008204 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081ec:	8afb      	ldrh	r3, [r7, #22]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4413      	add	r3, r2
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	3301      	adds	r3, #1
 80081fc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081fe:	8afb      	ldrh	r3, [r7, #22]
 8008200:	3302      	adds	r3, #2
 8008202:	82fb      	strh	r3, [r7, #22]
 8008204:	8afa      	ldrh	r2, [r7, #22]
 8008206:	8abb      	ldrh	r3, [r7, #20]
 8008208:	429a      	cmp	r2, r3
 800820a:	d3ef      	bcc.n	80081ec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
  }
}
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	881a      	ldrh	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	4413      	add	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4413      	add	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008246:	68fb      	ldr	r3, [r7, #12]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4613      	mov	r3, r2
 8008260:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008262:	2301      	movs	r3, #1
 8008264:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	789b      	ldrb	r3, [r3, #2]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d002      	beq.n	8008274 <USBH_CtlReq+0x20>
 800826e:	2b02      	cmp	r3, #2
 8008270:	d00f      	beq.n	8008292 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008272:	e027      	b.n	80082c4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	88fa      	ldrh	r2, [r7, #6]
 800827e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2201      	movs	r2, #1
 8008284:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2202      	movs	r2, #2
 800828a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800828c:	2301      	movs	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]
      break;
 8008290:	e018      	b.n	80082c4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 f81c 	bl	80082d0 <USBH_HandleControl>
 8008298:	4603      	mov	r3, r0
 800829a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <USBH_CtlReq+0x54>
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d106      	bne.n	80082b6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2201      	movs	r2, #1
 80082ac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	761a      	strb	r2, [r3, #24]
      break;
 80082b4:	e005      	b.n	80082c2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d102      	bne.n	80082c2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	709a      	strb	r2, [r3, #2]
      break;
 80082c2:	bf00      	nop
  }
  return status;
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082dc:	2300      	movs	r3, #0
 80082de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	7e1b      	ldrb	r3, [r3, #24]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	2b0a      	cmp	r3, #10
 80082e8:	f200 8156 	bhi.w	8008598 <USBH_HandleControl+0x2c8>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USBH_HandleControl+0x24>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	08008321 	.word	0x08008321
 80082f8:	0800833b 	.word	0x0800833b
 80082fc:	080083a5 	.word	0x080083a5
 8008300:	080083cb 	.word	0x080083cb
 8008304:	08008403 	.word	0x08008403
 8008308:	0800842d 	.word	0x0800842d
 800830c:	0800847f 	.word	0x0800847f
 8008310:	080084a1 	.word	0x080084a1
 8008314:	080084dd 	.word	0x080084dd
 8008318:	08008503 	.word	0x08008503
 800831c:	08008541 	.word	0x08008541
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f103 0110 	add.w	r1, r3, #16
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	795b      	ldrb	r3, [r3, #5]
 800832a:	461a      	mov	r2, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f943 	bl	80085b8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2202      	movs	r2, #2
 8008336:	761a      	strb	r2, [r3, #24]
      break;
 8008338:	e139      	b.n	80085ae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	795b      	ldrb	r3, [r3, #5]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fcc5 	bl	8008cd0 <USBH_LL_GetURBState>
 8008346:	4603      	mov	r3, r0
 8008348:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d11e      	bne.n	800838e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7c1b      	ldrb	r3, [r3, #16]
 8008354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008358:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	8adb      	ldrh	r3, [r3, #22]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008362:	7b7b      	ldrb	r3, [r7, #13]
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d103      	bne.n	8008370 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2203      	movs	r2, #3
 800836c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800836e:	e115      	b.n	800859c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2205      	movs	r2, #5
 8008374:	761a      	strb	r2, [r3, #24]
      break;
 8008376:	e111      	b.n	800859c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008378:	7b7b      	ldrb	r3, [r7, #13]
 800837a:	2b80      	cmp	r3, #128	; 0x80
 800837c:	d103      	bne.n	8008386 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2209      	movs	r2, #9
 8008382:	761a      	strb	r2, [r3, #24]
      break;
 8008384:	e10a      	b.n	800859c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2207      	movs	r2, #7
 800838a:	761a      	strb	r2, [r3, #24]
      break;
 800838c:	e106      	b.n	800859c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b04      	cmp	r3, #4
 8008392:	d003      	beq.n	800839c <USBH_HandleControl+0xcc>
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b02      	cmp	r3, #2
 8008398:	f040 8100 	bne.w	800859c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	220b      	movs	r2, #11
 80083a0:	761a      	strb	r2, [r3, #24]
      break;
 80083a2:	e0fb      	b.n	800859c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6899      	ldr	r1, [r3, #8]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	899a      	ldrh	r2, [r3, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	791b      	ldrb	r3, [r3, #4]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f93a 	bl	8008636 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2204      	movs	r2, #4
 80083c6:	761a      	strb	r2, [r3, #24]
      break;
 80083c8:	e0f1      	b.n	80085ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	791b      	ldrb	r3, [r3, #4]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fc7d 	bl	8008cd0 <USBH_LL_GetURBState>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d102      	bne.n	80083e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2209      	movs	r2, #9
 80083e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	2b05      	cmp	r3, #5
 80083ea:	d102      	bne.n	80083f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083ec:	2303      	movs	r3, #3
 80083ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083f0:	e0d6      	b.n	80085a0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	f040 80d3 	bne.w	80085a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	220b      	movs	r2, #11
 80083fe:	761a      	strb	r2, [r3, #24]
      break;
 8008400:	e0ce      	b.n	80085a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6899      	ldr	r1, [r3, #8]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	899a      	ldrh	r2, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	795b      	ldrb	r3, [r3, #5]
 800840e:	2001      	movs	r0, #1
 8008410:	9000      	str	r0, [sp, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f8ea 	bl	80085ec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2206      	movs	r2, #6
 8008428:	761a      	strb	r2, [r3, #24]
      break;
 800842a:	e0c0      	b.n	80085ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	795b      	ldrb	r3, [r3, #5]
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fc4c 	bl	8008cd0 <USBH_LL_GetURBState>
 8008438:	4603      	mov	r3, r0
 800843a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d103      	bne.n	800844a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2207      	movs	r2, #7
 8008446:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008448:	e0ac      	b.n	80085a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b05      	cmp	r3, #5
 800844e:	d105      	bne.n	800845c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	220c      	movs	r2, #12
 8008454:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008456:	2303      	movs	r3, #3
 8008458:	73fb      	strb	r3, [r7, #15]
      break;
 800845a:	e0a3      	b.n	80085a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d103      	bne.n	800846a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2205      	movs	r2, #5
 8008466:	761a      	strb	r2, [r3, #24]
      break;
 8008468:	e09c      	b.n	80085a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b04      	cmp	r3, #4
 800846e:	f040 8099 	bne.w	80085a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	220b      	movs	r2, #11
 8008476:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008478:	2302      	movs	r3, #2
 800847a:	73fb      	strb	r3, [r7, #15]
      break;
 800847c:	e092      	b.n	80085a4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	2100      	movs	r1, #0
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f8d5 	bl	8008636 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008492:	b29a      	uxth	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2208      	movs	r2, #8
 800849c:	761a      	strb	r2, [r3, #24]

      break;
 800849e:	e086      	b.n	80085ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	791b      	ldrb	r3, [r3, #4]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fc12 	bl	8008cd0 <USBH_LL_GetURBState>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d105      	bne.n	80084c2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	220d      	movs	r2, #13
 80084ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084c0:	e072      	b.n	80085a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d103      	bne.n	80084d0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	220b      	movs	r2, #11
 80084cc:	761a      	strb	r2, [r3, #24]
      break;
 80084ce:	e06b      	b.n	80085a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d168      	bne.n	80085a8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084d6:	2303      	movs	r3, #3
 80084d8:	73fb      	strb	r3, [r7, #15]
      break;
 80084da:	e065      	b.n	80085a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	795b      	ldrb	r3, [r3, #5]
 80084e0:	2201      	movs	r2, #1
 80084e2:	9200      	str	r2, [sp, #0]
 80084e4:	2200      	movs	r2, #0
 80084e6:	2100      	movs	r1, #0
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f87f 	bl	80085ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	220a      	movs	r2, #10
 80084fe:	761a      	strb	r2, [r3, #24]
      break;
 8008500:	e055      	b.n	80085ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	795b      	ldrb	r3, [r3, #5]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fbe1 	bl	8008cd0 <USBH_LL_GetURBState>
 800850e:	4603      	mov	r3, r0
 8008510:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d105      	bne.n	8008524 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	220d      	movs	r2, #13
 8008520:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008522:	e043      	b.n	80085ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	2b02      	cmp	r3, #2
 8008528:	d103      	bne.n	8008532 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2209      	movs	r2, #9
 800852e:	761a      	strb	r2, [r3, #24]
      break;
 8008530:	e03c      	b.n	80085ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	2b04      	cmp	r3, #4
 8008536:	d139      	bne.n	80085ac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	220b      	movs	r2, #11
 800853c:	761a      	strb	r2, [r3, #24]
      break;
 800853e:	e035      	b.n	80085ac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7e5b      	ldrb	r3, [r3, #25]
 8008544:	3301      	adds	r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	765a      	strb	r2, [r3, #25]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	7e5b      	ldrb	r3, [r3, #25]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d806      	bhi.n	8008562 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008560:	e025      	b.n	80085ae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008568:	2106      	movs	r1, #6
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	795b      	ldrb	r3, [r3, #5]
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f90c 	bl	8008798 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	791b      	ldrb	r3, [r3, #4]
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f906 	bl	8008798 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008592:	2302      	movs	r3, #2
 8008594:	73fb      	strb	r3, [r7, #15]
      break;
 8008596:	e00a      	b.n	80085ae <USBH_HandleControl+0x2de>

    default:
      break;
 8008598:	bf00      	nop
 800859a:	e008      	b.n	80085ae <USBH_HandleControl+0x2de>
      break;
 800859c:	bf00      	nop
 800859e:	e006      	b.n	80085ae <USBH_HandleControl+0x2de>
      break;
 80085a0:	bf00      	nop
 80085a2:	e004      	b.n	80085ae <USBH_HandleControl+0x2de>
      break;
 80085a4:	bf00      	nop
 80085a6:	e002      	b.n	80085ae <USBH_HandleControl+0x2de>
      break;
 80085a8:	bf00      	nop
 80085aa:	e000      	b.n	80085ae <USBH_HandleControl+0x2de>
      break;
 80085ac:	bf00      	nop
  }

  return status;
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af04      	add	r7, sp, #16
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085c6:	79f9      	ldrb	r1, [r7, #7]
 80085c8:	2300      	movs	r3, #0
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	2308      	movs	r3, #8
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	2300      	movs	r3, #0
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2300      	movs	r3, #0
 80085da:	2200      	movs	r2, #0
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fb46 	bl	8008c6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af04      	add	r7, sp, #16
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4611      	mov	r1, r2
 80085f8:	461a      	mov	r2, r3
 80085fa:	460b      	mov	r3, r1
 80085fc:	80fb      	strh	r3, [r7, #6]
 80085fe:	4613      	mov	r3, r2
 8008600:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008610:	7979      	ldrb	r1, [r7, #5]
 8008612:	7e3b      	ldrb	r3, [r7, #24]
 8008614:	9303      	str	r3, [sp, #12]
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	2301      	movs	r3, #1
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	2300      	movs	r3, #0
 8008624:	2200      	movs	r2, #0
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 fb21 	bl	8008c6e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b088      	sub	sp, #32
 800863a:	af04      	add	r7, sp, #16
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	4611      	mov	r1, r2
 8008642:	461a      	mov	r2, r3
 8008644:	460b      	mov	r3, r1
 8008646:	80fb      	strh	r3, [r7, #6]
 8008648:	4613      	mov	r3, r2
 800864a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800864c:	7979      	ldrb	r1, [r7, #5]
 800864e:	2300      	movs	r3, #0
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	9302      	str	r3, [sp, #8]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	2301      	movs	r3, #1
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	2201      	movs	r2, #1
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 fb03 	bl	8008c6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008668:	2300      	movs	r3, #0

}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b088      	sub	sp, #32
 8008676:	af04      	add	r7, sp, #16
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	4611      	mov	r1, r2
 800867e:	461a      	mov	r2, r3
 8008680:	460b      	mov	r3, r1
 8008682:	80fb      	strh	r3, [r7, #6]
 8008684:	4613      	mov	r3, r2
 8008686:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008696:	7979      	ldrb	r1, [r7, #5]
 8008698:	7e3b      	ldrb	r3, [r7, #24]
 800869a:	9303      	str	r3, [sp, #12]
 800869c:	88fb      	ldrh	r3, [r7, #6]
 800869e:	9302      	str	r3, [sp, #8]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	2301      	movs	r3, #1
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	2302      	movs	r3, #2
 80086aa:	2200      	movs	r2, #0
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fade 	bl	8008c6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af04      	add	r7, sp, #16
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4611      	mov	r1, r2
 80086c8:	461a      	mov	r2, r3
 80086ca:	460b      	mov	r3, r1
 80086cc:	80fb      	strh	r3, [r7, #6]
 80086ce:	4613      	mov	r3, r2
 80086d0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086d2:	7979      	ldrb	r1, [r7, #5]
 80086d4:	2300      	movs	r3, #0
 80086d6:	9303      	str	r3, [sp, #12]
 80086d8:	88fb      	ldrh	r3, [r7, #6]
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	2301      	movs	r3, #1
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	2302      	movs	r3, #2
 80086e6:	2201      	movs	r2, #1
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fac0 	bl	8008c6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af04      	add	r7, sp, #16
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	4608      	mov	r0, r1
 8008702:	4611      	mov	r1, r2
 8008704:	461a      	mov	r2, r3
 8008706:	4603      	mov	r3, r0
 8008708:	70fb      	strb	r3, [r7, #3]
 800870a:	460b      	mov	r3, r1
 800870c:	70bb      	strb	r3, [r7, #2]
 800870e:	4613      	mov	r3, r2
 8008710:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008712:	7878      	ldrb	r0, [r7, #1]
 8008714:	78ba      	ldrb	r2, [r7, #2]
 8008716:	78f9      	ldrb	r1, [r7, #3]
 8008718:	8b3b      	ldrh	r3, [r7, #24]
 800871a:	9302      	str	r3, [sp, #8]
 800871c:	7d3b      	ldrb	r3, [r7, #20]
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	7c3b      	ldrb	r3, [r7, #16]
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	4603      	mov	r3, r0
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa53 	bl	8008bd2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa72 	bl	8008c30 <USBH_LL_ClosePipe>

  return USBH_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f836 	bl	80087d4 <USBH_GetFreePipe>
 8008768:	4603      	mov	r3, r0
 800876a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800876c:	89fb      	ldrh	r3, [r7, #14]
 800876e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008772:	4293      	cmp	r3, r2
 8008774:	d00a      	beq.n	800878c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	89fb      	ldrh	r3, [r7, #14]
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	33e0      	adds	r3, #224	; 0xe0
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800878c:	89fb      	ldrh	r3, [r7, #14]
 800878e:	b2db      	uxtb	r3, r3
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d80d      	bhi.n	80087c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	33e0      	adds	r3, #224	; 0xe0
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	33e0      	adds	r3, #224	; 0xe0
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]
 80087e4:	e00f      	b.n	8008806 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	33e0      	adds	r3, #224	; 0xe0
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	e007      	b.n	8008810 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	3301      	adds	r3, #1
 8008804:	73fb      	strb	r3, [r7, #15]
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	2b0f      	cmp	r3, #15
 800880a:	d9ec      	bls.n	80087e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800880c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008820:	2201      	movs	r2, #1
 8008822:	490e      	ldr	r1, [pc, #56]	; (800885c <MX_USB_HOST_Init+0x40>)
 8008824:	480e      	ldr	r0, [pc, #56]	; (8008860 <MX_USB_HOST_Init+0x44>)
 8008826:	f7fe fba7 	bl	8006f78 <USBH_Init>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008830:	f7f8 f92c 	bl	8000a8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008834:	490b      	ldr	r1, [pc, #44]	; (8008864 <MX_USB_HOST_Init+0x48>)
 8008836:	480a      	ldr	r0, [pc, #40]	; (8008860 <MX_USB_HOST_Init+0x44>)
 8008838:	f7fe fc2c 	bl	8007094 <USBH_RegisterClass>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008842:	f7f8 f923 	bl	8000a8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008846:	4806      	ldr	r0, [pc, #24]	; (8008860 <MX_USB_HOST_Init+0x44>)
 8008848:	f7fe fcb0 	bl	80071ac <USBH_Start>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008852:	f7f8 f91b 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008856:	bf00      	nop
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	0800887d 	.word	0x0800887d
 8008860:	20000224 	.word	0x20000224
 8008864:	2000000c 	.word	0x2000000c

08008868 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800886c:	4802      	ldr	r0, [pc, #8]	; (8008878 <MX_USB_HOST_Process+0x10>)
 800886e:	f7fe fcad 	bl	80071cc <USBH_Process>
}
 8008872:	bf00      	nop
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20000224 	.word	0x20000224

0800887c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	3b01      	subs	r3, #1
 800888c:	2b04      	cmp	r3, #4
 800888e:	d819      	bhi.n	80088c4 <USBH_UserProcess+0x48>
 8008890:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <USBH_UserProcess+0x1c>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088c5 	.word	0x080088c5
 800889c:	080088b5 	.word	0x080088b5
 80088a0:	080088c5 	.word	0x080088c5
 80088a4:	080088bd 	.word	0x080088bd
 80088a8:	080088ad 	.word	0x080088ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <USBH_UserProcess+0x58>)
 80088ae:	2203      	movs	r2, #3
 80088b0:	701a      	strb	r2, [r3, #0]
  break;
 80088b2:	e008      	b.n	80088c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <USBH_UserProcess+0x58>)
 80088b6:	2202      	movs	r2, #2
 80088b8:	701a      	strb	r2, [r3, #0]
  break;
 80088ba:	e004      	b.n	80088c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088bc:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <USBH_UserProcess+0x58>)
 80088be:	2201      	movs	r2, #1
 80088c0:	701a      	strb	r2, [r3, #0]
  break;
 80088c2:	e000      	b.n	80088c6 <USBH_UserProcess+0x4a>

  default:
  break;
 80088c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	200005fc 	.word	0x200005fc

080088d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08a      	sub	sp, #40	; 0x28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e0:	f107 0314 	add.w	r3, r7, #20
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	605a      	str	r2, [r3, #4]
 80088ea:	609a      	str	r2, [r3, #8]
 80088ec:	60da      	str	r2, [r3, #12]
 80088ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088f8:	d147      	bne.n	800898a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	4b25      	ldr	r3, [pc, #148]	; (8008994 <HAL_HCD_MspInit+0xbc>)
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	4a24      	ldr	r2, [pc, #144]	; (8008994 <HAL_HCD_MspInit+0xbc>)
 8008904:	f043 0301 	orr.w	r3, r3, #1
 8008908:	6313      	str	r3, [r2, #48]	; 0x30
 800890a:	4b22      	ldr	r3, [pc, #136]	; (8008994 <HAL_HCD_MspInit+0xbc>)
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800891a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800891c:	2300      	movs	r3, #0
 800891e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008924:	f107 0314 	add.w	r3, r7, #20
 8008928:	4619      	mov	r1, r3
 800892a:	481b      	ldr	r0, [pc, #108]	; (8008998 <HAL_HCD_MspInit+0xc0>)
 800892c:	f7f8 fd26 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008930:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008936:	2302      	movs	r3, #2
 8008938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893a:	2300      	movs	r3, #0
 800893c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800893e:	2300      	movs	r3, #0
 8008940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008942:	230a      	movs	r3, #10
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008946:	f107 0314 	add.w	r3, r7, #20
 800894a:	4619      	mov	r1, r3
 800894c:	4812      	ldr	r0, [pc, #72]	; (8008998 <HAL_HCD_MspInit+0xc0>)
 800894e:	f7f8 fd15 	bl	800137c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008952:	4b10      	ldr	r3, [pc, #64]	; (8008994 <HAL_HCD_MspInit+0xbc>)
 8008954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008956:	4a0f      	ldr	r2, [pc, #60]	; (8008994 <HAL_HCD_MspInit+0xbc>)
 8008958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895c:	6353      	str	r3, [r2, #52]	; 0x34
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
 8008962:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <HAL_HCD_MspInit+0xbc>)
 8008964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008966:	4a0b      	ldr	r2, [pc, #44]	; (8008994 <HAL_HCD_MspInit+0xbc>)
 8008968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800896c:	6453      	str	r3, [r2, #68]	; 0x44
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <HAL_HCD_MspInit+0xbc>)
 8008970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	2043      	movs	r0, #67	; 0x43
 8008980:	f7f8 fc33 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008984:	2043      	movs	r0, #67	; 0x43
 8008986:	f7f8 fc4c 	bl	8001222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800898a:	bf00      	nop
 800898c:	3728      	adds	r7, #40	; 0x28
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	40023800 	.word	0x40023800
 8008998:	40020000 	.word	0x40020000

0800899c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe ffed 	bl	800798a <USBH_LL_IncTimer>
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff f825 	bl	8007a16 <USBH_LL_Connect>
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff f82e 	bl	8007a44 <USBH_LL_Disconnect>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
 80089fc:	4613      	mov	r3, r2
 80089fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe ffdf 	bl	80079de <USBH_LL_PortEnabled>
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe ffdf 	bl	80079fa <USBH_LL_PortDisabled>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d12a      	bne.n	8008aac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a56:	4a18      	ldr	r2, [pc, #96]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a62:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a66:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a6e:	4b12      	ldr	r3, [pc, #72]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a70:	2208      	movs	r2, #8
 8008a72:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a74:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a80:	4b0d      	ldr	r3, [pc, #52]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a82:	2202      	movs	r2, #2
 8008a84:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a86:	4b0c      	ldr	r3, [pc, #48]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a8c:	480a      	ldr	r0, [pc, #40]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a8e:	f7f8 fe2a 	bl	80016e6 <HAL_HCD_Init>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a98:	f7f7 fff8 	bl	8000a8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a9c:	4806      	ldr	r0, [pc, #24]	; (8008ab8 <USBH_LL_Init+0x74>)
 8008a9e:	f7f9 fa0e 	bl	8001ebe <HAL_HCD_GetCurrentFrame>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fe ff60 	bl	800796c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000600 	.word	0x20000600

08008abc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f9 f97d 	bl	8001dd2 <HAL_HCD_Start>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f95c 	bl	8008d9c <USBH_Get_USB_Status>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7f9 f985 	bl	8001e18 <HAL_HCD_Stop>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 f941 	bl	8008d9c <USBH_Get_USB_Status>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b30:	2301      	movs	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f9 f9cd 	bl	8001eda <HAL_HCD_GetCurrentSpeed>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d00c      	beq.n	8008b60 <USBH_LL_GetSpeed+0x38>
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d80d      	bhi.n	8008b66 <USBH_LL_GetSpeed+0x3e>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <USBH_LL_GetSpeed+0x2c>
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d003      	beq.n	8008b5a <USBH_LL_GetSpeed+0x32>
 8008b52:	e008      	b.n	8008b66 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e008      	b.n	8008b6c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e005      	b.n	8008b6c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b60:	2302      	movs	r3, #2
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	e002      	b.n	8008b6c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b66:	2301      	movs	r3, #1
 8008b68:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6a:	bf00      	nop
  }
  return  speed;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7f9 f960 	bl	8001e52 <HAL_HCD_ResetPort>
 8008b92:	4603      	mov	r3, r0
 8008b94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f8ff 	bl	8008d9c <USBH_Get_USB_Status>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f9 f967 	bl	8001e96 <HAL_HCD_HC_GetXferCount>
 8008bc8:	4603      	mov	r3, r0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bd2:	b590      	push	{r4, r7, lr}
 8008bd4:	b089      	sub	sp, #36	; 0x24
 8008bd6:	af04      	add	r7, sp, #16
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	461a      	mov	r2, r3
 8008be0:	4603      	mov	r3, r0
 8008be2:	70fb      	strb	r3, [r7, #3]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70bb      	strb	r3, [r7, #2]
 8008be8:	4613      	mov	r3, r2
 8008bea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bfa:	787c      	ldrb	r4, [r7, #1]
 8008bfc:	78ba      	ldrb	r2, [r7, #2]
 8008bfe:	78f9      	ldrb	r1, [r7, #3]
 8008c00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c02:	9302      	str	r3, [sp, #8]
 8008c04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	4623      	mov	r3, r4
 8008c12:	f7f8 fdca 	bl	80017aa <HAL_HCD_HC_Init>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 f8bd 	bl	8008d9c <USBH_Get_USB_Status>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd90      	pop	{r4, r7, pc}

08008c30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f8 fe3a 	bl	80018c8 <HAL_HCD_HC_Halt>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f89e 	bl	8008d9c <USBH_Get_USB_Status>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c6e:	b590      	push	{r4, r7, lr}
 8008c70:	b089      	sub	sp, #36	; 0x24
 8008c72:	af04      	add	r7, sp, #16
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	4608      	mov	r0, r1
 8008c78:	4611      	mov	r1, r2
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	70fb      	strb	r3, [r7, #3]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70bb      	strb	r3, [r7, #2]
 8008c84:	4613      	mov	r3, r2
 8008c86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c96:	787c      	ldrb	r4, [r7, #1]
 8008c98:	78ba      	ldrb	r2, [r7, #2]
 8008c9a:	78f9      	ldrb	r1, [r7, #3]
 8008c9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ca0:	9303      	str	r3, [sp, #12]
 8008ca2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ca4:	9302      	str	r3, [sp, #8]
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	4623      	mov	r3, r4
 8008cb2:	f7f8 fe2d 	bl	8001910 <HAL_HCD_HC_SubmitRequest>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f86d 	bl	8008d9c <USBH_Get_USB_Status>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd90      	pop	{r4, r7, pc}

08008cd0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f9 f8c1 	bl	8001e6e <HAL_HCD_HC_GetURBState>
 8008cec:	4603      	mov	r3, r0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d103      	bne.n	8008d14 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f870 	bl	8008df4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d14:	20c8      	movs	r0, #200	; 0xc8
 8008d16:	f7f8 f969 	bl	8000fec <HAL_Delay>
  return USBH_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
 8008d30:	4613      	mov	r3, r2
 8008d32:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d3a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	212c      	movs	r1, #44	; 0x2c
 8008d42:	fb01 f303 	mul.w	r3, r1, r3
 8008d46:	4413      	add	r3, r2
 8008d48:	333b      	adds	r3, #59	; 0x3b
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	212c      	movs	r1, #44	; 0x2c
 8008d56:	fb01 f303 	mul.w	r3, r1, r3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	3354      	adds	r3, #84	; 0x54
 8008d5e:	78ba      	ldrb	r2, [r7, #2]
 8008d60:	701a      	strb	r2, [r3, #0]
 8008d62:	e008      	b.n	8008d76 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	212c      	movs	r1, #44	; 0x2c
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	4413      	add	r3, r2
 8008d70:	3355      	adds	r3, #85	; 0x55
 8008d72:	78ba      	ldrb	r2, [r7, #2]
 8008d74:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7f8 f92d 	bl	8000fec <HAL_Delay>
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d817      	bhi.n	8008de0 <USBH_Get_USB_Status+0x44>
 8008db0:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <USBH_Get_USB_Status+0x1c>)
 8008db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db6:	bf00      	nop
 8008db8:	08008dc9 	.word	0x08008dc9
 8008dbc:	08008dcf 	.word	0x08008dcf
 8008dc0:	08008dd5 	.word	0x08008dd5
 8008dc4:	08008ddb 	.word	0x08008ddb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
    break;
 8008dcc:	e00b      	b.n	8008de6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008dce:	2302      	movs	r3, #2
 8008dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd2:	e008      	b.n	8008de6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd8:	e005      	b.n	8008de6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dde:	e002      	b.n	8008de6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008de0:	2302      	movs	r3, #2
 8008de2:	73fb      	strb	r3, [r7, #15]
    break;
 8008de4:	bf00      	nop
  }
  return usb_status;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d102      	bne.n	8008e0e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
 8008e0c:	e001      	b.n	8008e12 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	461a      	mov	r2, r3
 8008e16:	2101      	movs	r1, #1
 8008e18:	4803      	ldr	r0, [pc, #12]	; (8008e28 <MX_DriverVbusFS+0x34>)
 8008e1a:	f7f8 fc4b 	bl	80016b4 <HAL_GPIO_WritePin>
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	40020800 	.word	0x40020800

08008e2c <__errno>:
 8008e2c:	4b01      	ldr	r3, [pc, #4]	; (8008e34 <__errno+0x8>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	2000002c 	.word	0x2000002c

08008e38 <__libc_init_array>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	4d0d      	ldr	r5, [pc, #52]	; (8008e70 <__libc_init_array+0x38>)
 8008e3c:	4c0d      	ldr	r4, [pc, #52]	; (8008e74 <__libc_init_array+0x3c>)
 8008e3e:	1b64      	subs	r4, r4, r5
 8008e40:	10a4      	asrs	r4, r4, #2
 8008e42:	2600      	movs	r6, #0
 8008e44:	42a6      	cmp	r6, r4
 8008e46:	d109      	bne.n	8008e5c <__libc_init_array+0x24>
 8008e48:	4d0b      	ldr	r5, [pc, #44]	; (8008e78 <__libc_init_array+0x40>)
 8008e4a:	4c0c      	ldr	r4, [pc, #48]	; (8008e7c <__libc_init_array+0x44>)
 8008e4c:	f000 fc9e 	bl	800978c <_init>
 8008e50:	1b64      	subs	r4, r4, r5
 8008e52:	10a4      	asrs	r4, r4, #2
 8008e54:	2600      	movs	r6, #0
 8008e56:	42a6      	cmp	r6, r4
 8008e58:	d105      	bne.n	8008e66 <__libc_init_array+0x2e>
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e60:	4798      	blx	r3
 8008e62:	3601      	adds	r6, #1
 8008e64:	e7ee      	b.n	8008e44 <__libc_init_array+0xc>
 8008e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6a:	4798      	blx	r3
 8008e6c:	3601      	adds	r6, #1
 8008e6e:	e7f2      	b.n	8008e56 <__libc_init_array+0x1e>
 8008e70:	08009810 	.word	0x08009810
 8008e74:	08009810 	.word	0x08009810
 8008e78:	08009810 	.word	0x08009810
 8008e7c:	08009814 	.word	0x08009814

08008e80 <malloc>:
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <malloc+0xc>)
 8008e82:	4601      	mov	r1, r0
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f000 b87f 	b.w	8008f88 <_malloc_r>
 8008e8a:	bf00      	nop
 8008e8c:	2000002c 	.word	0x2000002c

08008e90 <free>:
 8008e90:	4b02      	ldr	r3, [pc, #8]	; (8008e9c <free+0xc>)
 8008e92:	4601      	mov	r1, r0
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	f000 b80b 	b.w	8008eb0 <_free_r>
 8008e9a:	bf00      	nop
 8008e9c:	2000002c 	.word	0x2000002c

08008ea0 <memset>:
 8008ea0:	4402      	add	r2, r0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d100      	bne.n	8008eaa <memset+0xa>
 8008ea8:	4770      	bx	lr
 8008eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8008eae:	e7f9      	b.n	8008ea4 <memset+0x4>

08008eb0 <_free_r>:
 8008eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eb2:	2900      	cmp	r1, #0
 8008eb4:	d044      	beq.n	8008f40 <_free_r+0x90>
 8008eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eba:	9001      	str	r0, [sp, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8008ec2:	bfb8      	it	lt
 8008ec4:	18e4      	addlt	r4, r4, r3
 8008ec6:	f000 f903 	bl	80090d0 <__malloc_lock>
 8008eca:	4a1e      	ldr	r2, [pc, #120]	; (8008f44 <_free_r+0x94>)
 8008ecc:	9801      	ldr	r0, [sp, #4]
 8008ece:	6813      	ldr	r3, [r2, #0]
 8008ed0:	b933      	cbnz	r3, 8008ee0 <_free_r+0x30>
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	6014      	str	r4, [r2, #0]
 8008ed6:	b003      	add	sp, #12
 8008ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008edc:	f000 b8fe 	b.w	80090dc <__malloc_unlock>
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	d908      	bls.n	8008ef6 <_free_r+0x46>
 8008ee4:	6825      	ldr	r5, [r4, #0]
 8008ee6:	1961      	adds	r1, r4, r5
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf01      	itttt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	1949      	addeq	r1, r1, r5
 8008ef2:	6021      	streq	r1, [r4, #0]
 8008ef4:	e7ed      	b.n	8008ed2 <_free_r+0x22>
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	b10b      	cbz	r3, 8008f00 <_free_r+0x50>
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d9fa      	bls.n	8008ef6 <_free_r+0x46>
 8008f00:	6811      	ldr	r1, [r2, #0]
 8008f02:	1855      	adds	r5, r2, r1
 8008f04:	42a5      	cmp	r5, r4
 8008f06:	d10b      	bne.n	8008f20 <_free_r+0x70>
 8008f08:	6824      	ldr	r4, [r4, #0]
 8008f0a:	4421      	add	r1, r4
 8008f0c:	1854      	adds	r4, r2, r1
 8008f0e:	42a3      	cmp	r3, r4
 8008f10:	6011      	str	r1, [r2, #0]
 8008f12:	d1e0      	bne.n	8008ed6 <_free_r+0x26>
 8008f14:	681c      	ldr	r4, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	6053      	str	r3, [r2, #4]
 8008f1a:	4421      	add	r1, r4
 8008f1c:	6011      	str	r1, [r2, #0]
 8008f1e:	e7da      	b.n	8008ed6 <_free_r+0x26>
 8008f20:	d902      	bls.n	8008f28 <_free_r+0x78>
 8008f22:	230c      	movs	r3, #12
 8008f24:	6003      	str	r3, [r0, #0]
 8008f26:	e7d6      	b.n	8008ed6 <_free_r+0x26>
 8008f28:	6825      	ldr	r5, [r4, #0]
 8008f2a:	1961      	adds	r1, r4, r5
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf04      	itt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	bf04      	itt	eq
 8008f38:	1949      	addeq	r1, r1, r5
 8008f3a:	6021      	streq	r1, [r4, #0]
 8008f3c:	6054      	str	r4, [r2, #4]
 8008f3e:	e7ca      	b.n	8008ed6 <_free_r+0x26>
 8008f40:	b003      	add	sp, #12
 8008f42:	bd30      	pop	{r4, r5, pc}
 8008f44:	20000904 	.word	0x20000904

08008f48 <sbrk_aligned>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4e0e      	ldr	r6, [pc, #56]	; (8008f84 <sbrk_aligned+0x3c>)
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	6831      	ldr	r1, [r6, #0]
 8008f50:	4605      	mov	r5, r0
 8008f52:	b911      	cbnz	r1, 8008f5a <sbrk_aligned+0x12>
 8008f54:	f000 f88c 	bl	8009070 <_sbrk_r>
 8008f58:	6030      	str	r0, [r6, #0]
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f000 f887 	bl	8009070 <_sbrk_r>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	d00a      	beq.n	8008f7c <sbrk_aligned+0x34>
 8008f66:	1cc4      	adds	r4, r0, #3
 8008f68:	f024 0403 	bic.w	r4, r4, #3
 8008f6c:	42a0      	cmp	r0, r4
 8008f6e:	d007      	beq.n	8008f80 <sbrk_aligned+0x38>
 8008f70:	1a21      	subs	r1, r4, r0
 8008f72:	4628      	mov	r0, r5
 8008f74:	f000 f87c 	bl	8009070 <_sbrk_r>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d101      	bne.n	8008f80 <sbrk_aligned+0x38>
 8008f7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f80:	4620      	mov	r0, r4
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	20000908 	.word	0x20000908

08008f88 <_malloc_r>:
 8008f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8c:	1ccd      	adds	r5, r1, #3
 8008f8e:	f025 0503 	bic.w	r5, r5, #3
 8008f92:	3508      	adds	r5, #8
 8008f94:	2d0c      	cmp	r5, #12
 8008f96:	bf38      	it	cc
 8008f98:	250c      	movcc	r5, #12
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	db01      	blt.n	8008fa4 <_malloc_r+0x1c>
 8008fa0:	42a9      	cmp	r1, r5
 8008fa2:	d905      	bls.n	8008fb0 <_malloc_r+0x28>
 8008fa4:	230c      	movs	r3, #12
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	2600      	movs	r6, #0
 8008faa:	4630      	mov	r0, r6
 8008fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb0:	4e2e      	ldr	r6, [pc, #184]	; (800906c <_malloc_r+0xe4>)
 8008fb2:	f000 f88d 	bl	80090d0 <__malloc_lock>
 8008fb6:	6833      	ldr	r3, [r6, #0]
 8008fb8:	461c      	mov	r4, r3
 8008fba:	bb34      	cbnz	r4, 800900a <_malloc_r+0x82>
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f7ff ffc2 	bl	8008f48 <sbrk_aligned>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	d14d      	bne.n	8009066 <_malloc_r+0xde>
 8008fca:	6834      	ldr	r4, [r6, #0]
 8008fcc:	4626      	mov	r6, r4
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	d140      	bne.n	8009054 <_malloc_r+0xcc>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	eb04 0803 	add.w	r8, r4, r3
 8008fdc:	f000 f848 	bl	8009070 <_sbrk_r>
 8008fe0:	4580      	cmp	r8, r0
 8008fe2:	d13a      	bne.n	800905a <_malloc_r+0xd2>
 8008fe4:	6821      	ldr	r1, [r4, #0]
 8008fe6:	3503      	adds	r5, #3
 8008fe8:	1a6d      	subs	r5, r5, r1
 8008fea:	f025 0503 	bic.w	r5, r5, #3
 8008fee:	3508      	adds	r5, #8
 8008ff0:	2d0c      	cmp	r5, #12
 8008ff2:	bf38      	it	cc
 8008ff4:	250c      	movcc	r5, #12
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ffa5 	bl	8008f48 <sbrk_aligned>
 8008ffe:	3001      	adds	r0, #1
 8009000:	d02b      	beq.n	800905a <_malloc_r+0xd2>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	442b      	add	r3, r5
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	e00e      	b.n	8009028 <_malloc_r+0xa0>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	1b52      	subs	r2, r2, r5
 800900e:	d41e      	bmi.n	800904e <_malloc_r+0xc6>
 8009010:	2a0b      	cmp	r2, #11
 8009012:	d916      	bls.n	8009042 <_malloc_r+0xba>
 8009014:	1961      	adds	r1, r4, r5
 8009016:	42a3      	cmp	r3, r4
 8009018:	6025      	str	r5, [r4, #0]
 800901a:	bf18      	it	ne
 800901c:	6059      	strne	r1, [r3, #4]
 800901e:	6863      	ldr	r3, [r4, #4]
 8009020:	bf08      	it	eq
 8009022:	6031      	streq	r1, [r6, #0]
 8009024:	5162      	str	r2, [r4, r5]
 8009026:	604b      	str	r3, [r1, #4]
 8009028:	4638      	mov	r0, r7
 800902a:	f104 060b 	add.w	r6, r4, #11
 800902e:	f000 f855 	bl	80090dc <__malloc_unlock>
 8009032:	f026 0607 	bic.w	r6, r6, #7
 8009036:	1d23      	adds	r3, r4, #4
 8009038:	1af2      	subs	r2, r6, r3
 800903a:	d0b6      	beq.n	8008faa <_malloc_r+0x22>
 800903c:	1b9b      	subs	r3, r3, r6
 800903e:	50a3      	str	r3, [r4, r2]
 8009040:	e7b3      	b.n	8008faa <_malloc_r+0x22>
 8009042:	6862      	ldr	r2, [r4, #4]
 8009044:	42a3      	cmp	r3, r4
 8009046:	bf0c      	ite	eq
 8009048:	6032      	streq	r2, [r6, #0]
 800904a:	605a      	strne	r2, [r3, #4]
 800904c:	e7ec      	b.n	8009028 <_malloc_r+0xa0>
 800904e:	4623      	mov	r3, r4
 8009050:	6864      	ldr	r4, [r4, #4]
 8009052:	e7b2      	b.n	8008fba <_malloc_r+0x32>
 8009054:	4634      	mov	r4, r6
 8009056:	6876      	ldr	r6, [r6, #4]
 8009058:	e7b9      	b.n	8008fce <_malloc_r+0x46>
 800905a:	230c      	movs	r3, #12
 800905c:	603b      	str	r3, [r7, #0]
 800905e:	4638      	mov	r0, r7
 8009060:	f000 f83c 	bl	80090dc <__malloc_unlock>
 8009064:	e7a1      	b.n	8008faa <_malloc_r+0x22>
 8009066:	6025      	str	r5, [r4, #0]
 8009068:	e7de      	b.n	8009028 <_malloc_r+0xa0>
 800906a:	bf00      	nop
 800906c:	20000904 	.word	0x20000904

08009070 <_sbrk_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d06      	ldr	r5, [pc, #24]	; (800908c <_sbrk_r+0x1c>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	f7f7 fed2 	bl	8000e24 <_sbrk>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_sbrk_r+0x1a>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_sbrk_r+0x1a>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	2000090c 	.word	0x2000090c

08009090 <siprintf>:
 8009090:	b40e      	push	{r1, r2, r3}
 8009092:	b500      	push	{lr}
 8009094:	b09c      	sub	sp, #112	; 0x70
 8009096:	ab1d      	add	r3, sp, #116	; 0x74
 8009098:	9002      	str	r0, [sp, #8]
 800909a:	9006      	str	r0, [sp, #24]
 800909c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090a0:	4809      	ldr	r0, [pc, #36]	; (80090c8 <siprintf+0x38>)
 80090a2:	9107      	str	r1, [sp, #28]
 80090a4:	9104      	str	r1, [sp, #16]
 80090a6:	4909      	ldr	r1, [pc, #36]	; (80090cc <siprintf+0x3c>)
 80090a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ac:	9105      	str	r1, [sp, #20]
 80090ae:	6800      	ldr	r0, [r0, #0]
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	a902      	add	r1, sp, #8
 80090b4:	f000 f874 	bl	80091a0 <_svfiprintf_r>
 80090b8:	9b02      	ldr	r3, [sp, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	b01c      	add	sp, #112	; 0x70
 80090c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090c4:	b003      	add	sp, #12
 80090c6:	4770      	bx	lr
 80090c8:	2000002c 	.word	0x2000002c
 80090cc:	ffff0208 	.word	0xffff0208

080090d0 <__malloc_lock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	; (80090d8 <__malloc_lock+0x8>)
 80090d2:	f000 baf9 	b.w	80096c8 <__retarget_lock_acquire_recursive>
 80090d6:	bf00      	nop
 80090d8:	20000910 	.word	0x20000910

080090dc <__malloc_unlock>:
 80090dc:	4801      	ldr	r0, [pc, #4]	; (80090e4 <__malloc_unlock+0x8>)
 80090de:	f000 baf4 	b.w	80096ca <__retarget_lock_release_recursive>
 80090e2:	bf00      	nop
 80090e4:	20000910 	.word	0x20000910

080090e8 <__ssputs_r>:
 80090e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ec:	688e      	ldr	r6, [r1, #8]
 80090ee:	429e      	cmp	r6, r3
 80090f0:	4682      	mov	sl, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	4690      	mov	r8, r2
 80090f6:	461f      	mov	r7, r3
 80090f8:	d838      	bhi.n	800916c <__ssputs_r+0x84>
 80090fa:	898a      	ldrh	r2, [r1, #12]
 80090fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009100:	d032      	beq.n	8009168 <__ssputs_r+0x80>
 8009102:	6825      	ldr	r5, [r4, #0]
 8009104:	6909      	ldr	r1, [r1, #16]
 8009106:	eba5 0901 	sub.w	r9, r5, r1
 800910a:	6965      	ldr	r5, [r4, #20]
 800910c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009114:	3301      	adds	r3, #1
 8009116:	444b      	add	r3, r9
 8009118:	106d      	asrs	r5, r5, #1
 800911a:	429d      	cmp	r5, r3
 800911c:	bf38      	it	cc
 800911e:	461d      	movcc	r5, r3
 8009120:	0553      	lsls	r3, r2, #21
 8009122:	d531      	bpl.n	8009188 <__ssputs_r+0xa0>
 8009124:	4629      	mov	r1, r5
 8009126:	f7ff ff2f 	bl	8008f88 <_malloc_r>
 800912a:	4606      	mov	r6, r0
 800912c:	b950      	cbnz	r0, 8009144 <__ssputs_r+0x5c>
 800912e:	230c      	movs	r3, #12
 8009130:	f8ca 3000 	str.w	r3, [sl]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009144:	6921      	ldr	r1, [r4, #16]
 8009146:	464a      	mov	r2, r9
 8009148:	f000 fac0 	bl	80096cc <memcpy>
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	6126      	str	r6, [r4, #16]
 800915a:	6165      	str	r5, [r4, #20]
 800915c:	444e      	add	r6, r9
 800915e:	eba5 0509 	sub.w	r5, r5, r9
 8009162:	6026      	str	r6, [r4, #0]
 8009164:	60a5      	str	r5, [r4, #8]
 8009166:	463e      	mov	r6, r7
 8009168:	42be      	cmp	r6, r7
 800916a:	d900      	bls.n	800916e <__ssputs_r+0x86>
 800916c:	463e      	mov	r6, r7
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	4632      	mov	r2, r6
 8009172:	4641      	mov	r1, r8
 8009174:	f000 fab8 	bl	80096e8 <memmove>
 8009178:	68a3      	ldr	r3, [r4, #8]
 800917a:	1b9b      	subs	r3, r3, r6
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	4433      	add	r3, r6
 8009182:	6023      	str	r3, [r4, #0]
 8009184:	2000      	movs	r0, #0
 8009186:	e7db      	b.n	8009140 <__ssputs_r+0x58>
 8009188:	462a      	mov	r2, r5
 800918a:	f000 fac7 	bl	800971c <_realloc_r>
 800918e:	4606      	mov	r6, r0
 8009190:	2800      	cmp	r0, #0
 8009192:	d1e1      	bne.n	8009158 <__ssputs_r+0x70>
 8009194:	6921      	ldr	r1, [r4, #16]
 8009196:	4650      	mov	r0, sl
 8009198:	f7ff fe8a 	bl	8008eb0 <_free_r>
 800919c:	e7c7      	b.n	800912e <__ssputs_r+0x46>
	...

080091a0 <_svfiprintf_r>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	4698      	mov	r8, r3
 80091a6:	898b      	ldrh	r3, [r1, #12]
 80091a8:	061b      	lsls	r3, r3, #24
 80091aa:	b09d      	sub	sp, #116	; 0x74
 80091ac:	4607      	mov	r7, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	4614      	mov	r4, r2
 80091b2:	d50e      	bpl.n	80091d2 <_svfiprintf_r+0x32>
 80091b4:	690b      	ldr	r3, [r1, #16]
 80091b6:	b963      	cbnz	r3, 80091d2 <_svfiprintf_r+0x32>
 80091b8:	2140      	movs	r1, #64	; 0x40
 80091ba:	f7ff fee5 	bl	8008f88 <_malloc_r>
 80091be:	6028      	str	r0, [r5, #0]
 80091c0:	6128      	str	r0, [r5, #16]
 80091c2:	b920      	cbnz	r0, 80091ce <_svfiprintf_r+0x2e>
 80091c4:	230c      	movs	r3, #12
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091cc:	e0d1      	b.n	8009372 <_svfiprintf_r+0x1d2>
 80091ce:	2340      	movs	r3, #64	; 0x40
 80091d0:	616b      	str	r3, [r5, #20]
 80091d2:	2300      	movs	r3, #0
 80091d4:	9309      	str	r3, [sp, #36]	; 0x24
 80091d6:	2320      	movs	r3, #32
 80091d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80091e0:	2330      	movs	r3, #48	; 0x30
 80091e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800938c <_svfiprintf_r+0x1ec>
 80091e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091ea:	f04f 0901 	mov.w	r9, #1
 80091ee:	4623      	mov	r3, r4
 80091f0:	469a      	mov	sl, r3
 80091f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091f6:	b10a      	cbz	r2, 80091fc <_svfiprintf_r+0x5c>
 80091f8:	2a25      	cmp	r2, #37	; 0x25
 80091fa:	d1f9      	bne.n	80091f0 <_svfiprintf_r+0x50>
 80091fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009200:	d00b      	beq.n	800921a <_svfiprintf_r+0x7a>
 8009202:	465b      	mov	r3, fp
 8009204:	4622      	mov	r2, r4
 8009206:	4629      	mov	r1, r5
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff ff6d 	bl	80090e8 <__ssputs_r>
 800920e:	3001      	adds	r0, #1
 8009210:	f000 80aa 	beq.w	8009368 <_svfiprintf_r+0x1c8>
 8009214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009216:	445a      	add	r2, fp
 8009218:	9209      	str	r2, [sp, #36]	; 0x24
 800921a:	f89a 3000 	ldrb.w	r3, [sl]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 80a2 	beq.w	8009368 <_svfiprintf_r+0x1c8>
 8009224:	2300      	movs	r3, #0
 8009226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800922a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800922e:	f10a 0a01 	add.w	sl, sl, #1
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	9307      	str	r3, [sp, #28]
 8009236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800923a:	931a      	str	r3, [sp, #104]	; 0x68
 800923c:	4654      	mov	r4, sl
 800923e:	2205      	movs	r2, #5
 8009240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009244:	4851      	ldr	r0, [pc, #324]	; (800938c <_svfiprintf_r+0x1ec>)
 8009246:	f7f6 ffcb 	bl	80001e0 <memchr>
 800924a:	9a04      	ldr	r2, [sp, #16]
 800924c:	b9d8      	cbnz	r0, 8009286 <_svfiprintf_r+0xe6>
 800924e:	06d0      	lsls	r0, r2, #27
 8009250:	bf44      	itt	mi
 8009252:	2320      	movmi	r3, #32
 8009254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009258:	0711      	lsls	r1, r2, #28
 800925a:	bf44      	itt	mi
 800925c:	232b      	movmi	r3, #43	; 0x2b
 800925e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009262:	f89a 3000 	ldrb.w	r3, [sl]
 8009266:	2b2a      	cmp	r3, #42	; 0x2a
 8009268:	d015      	beq.n	8009296 <_svfiprintf_r+0xf6>
 800926a:	9a07      	ldr	r2, [sp, #28]
 800926c:	4654      	mov	r4, sl
 800926e:	2000      	movs	r0, #0
 8009270:	f04f 0c0a 	mov.w	ip, #10
 8009274:	4621      	mov	r1, r4
 8009276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800927a:	3b30      	subs	r3, #48	; 0x30
 800927c:	2b09      	cmp	r3, #9
 800927e:	d94e      	bls.n	800931e <_svfiprintf_r+0x17e>
 8009280:	b1b0      	cbz	r0, 80092b0 <_svfiprintf_r+0x110>
 8009282:	9207      	str	r2, [sp, #28]
 8009284:	e014      	b.n	80092b0 <_svfiprintf_r+0x110>
 8009286:	eba0 0308 	sub.w	r3, r0, r8
 800928a:	fa09 f303 	lsl.w	r3, r9, r3
 800928e:	4313      	orrs	r3, r2
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	46a2      	mov	sl, r4
 8009294:	e7d2      	b.n	800923c <_svfiprintf_r+0x9c>
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	1d19      	adds	r1, r3, #4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	9103      	str	r1, [sp, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bfbb      	ittet	lt
 80092a2:	425b      	neglt	r3, r3
 80092a4:	f042 0202 	orrlt.w	r2, r2, #2
 80092a8:	9307      	strge	r3, [sp, #28]
 80092aa:	9307      	strlt	r3, [sp, #28]
 80092ac:	bfb8      	it	lt
 80092ae:	9204      	strlt	r2, [sp, #16]
 80092b0:	7823      	ldrb	r3, [r4, #0]
 80092b2:	2b2e      	cmp	r3, #46	; 0x2e
 80092b4:	d10c      	bne.n	80092d0 <_svfiprintf_r+0x130>
 80092b6:	7863      	ldrb	r3, [r4, #1]
 80092b8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ba:	d135      	bne.n	8009328 <_svfiprintf_r+0x188>
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	1d1a      	adds	r2, r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	9203      	str	r2, [sp, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	bfb8      	it	lt
 80092c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092cc:	3402      	adds	r4, #2
 80092ce:	9305      	str	r3, [sp, #20]
 80092d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800939c <_svfiprintf_r+0x1fc>
 80092d4:	7821      	ldrb	r1, [r4, #0]
 80092d6:	2203      	movs	r2, #3
 80092d8:	4650      	mov	r0, sl
 80092da:	f7f6 ff81 	bl	80001e0 <memchr>
 80092de:	b140      	cbz	r0, 80092f2 <_svfiprintf_r+0x152>
 80092e0:	2340      	movs	r3, #64	; 0x40
 80092e2:	eba0 000a 	sub.w	r0, r0, sl
 80092e6:	fa03 f000 	lsl.w	r0, r3, r0
 80092ea:	9b04      	ldr	r3, [sp, #16]
 80092ec:	4303      	orrs	r3, r0
 80092ee:	3401      	adds	r4, #1
 80092f0:	9304      	str	r3, [sp, #16]
 80092f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f6:	4826      	ldr	r0, [pc, #152]	; (8009390 <_svfiprintf_r+0x1f0>)
 80092f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092fc:	2206      	movs	r2, #6
 80092fe:	f7f6 ff6f 	bl	80001e0 <memchr>
 8009302:	2800      	cmp	r0, #0
 8009304:	d038      	beq.n	8009378 <_svfiprintf_r+0x1d8>
 8009306:	4b23      	ldr	r3, [pc, #140]	; (8009394 <_svfiprintf_r+0x1f4>)
 8009308:	bb1b      	cbnz	r3, 8009352 <_svfiprintf_r+0x1b2>
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	3307      	adds	r3, #7
 800930e:	f023 0307 	bic.w	r3, r3, #7
 8009312:	3308      	adds	r3, #8
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	4433      	add	r3, r6
 800931a:	9309      	str	r3, [sp, #36]	; 0x24
 800931c:	e767      	b.n	80091ee <_svfiprintf_r+0x4e>
 800931e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009322:	460c      	mov	r4, r1
 8009324:	2001      	movs	r0, #1
 8009326:	e7a5      	b.n	8009274 <_svfiprintf_r+0xd4>
 8009328:	2300      	movs	r3, #0
 800932a:	3401      	adds	r4, #1
 800932c:	9305      	str	r3, [sp, #20]
 800932e:	4619      	mov	r1, r3
 8009330:	f04f 0c0a 	mov.w	ip, #10
 8009334:	4620      	mov	r0, r4
 8009336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800933a:	3a30      	subs	r2, #48	; 0x30
 800933c:	2a09      	cmp	r2, #9
 800933e:	d903      	bls.n	8009348 <_svfiprintf_r+0x1a8>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d0c5      	beq.n	80092d0 <_svfiprintf_r+0x130>
 8009344:	9105      	str	r1, [sp, #20]
 8009346:	e7c3      	b.n	80092d0 <_svfiprintf_r+0x130>
 8009348:	fb0c 2101 	mla	r1, ip, r1, r2
 800934c:	4604      	mov	r4, r0
 800934e:	2301      	movs	r3, #1
 8009350:	e7f0      	b.n	8009334 <_svfiprintf_r+0x194>
 8009352:	ab03      	add	r3, sp, #12
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	462a      	mov	r2, r5
 8009358:	4b0f      	ldr	r3, [pc, #60]	; (8009398 <_svfiprintf_r+0x1f8>)
 800935a:	a904      	add	r1, sp, #16
 800935c:	4638      	mov	r0, r7
 800935e:	f3af 8000 	nop.w
 8009362:	1c42      	adds	r2, r0, #1
 8009364:	4606      	mov	r6, r0
 8009366:	d1d6      	bne.n	8009316 <_svfiprintf_r+0x176>
 8009368:	89ab      	ldrh	r3, [r5, #12]
 800936a:	065b      	lsls	r3, r3, #25
 800936c:	f53f af2c 	bmi.w	80091c8 <_svfiprintf_r+0x28>
 8009370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009372:	b01d      	add	sp, #116	; 0x74
 8009374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009378:	ab03      	add	r3, sp, #12
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	462a      	mov	r2, r5
 800937e:	4b06      	ldr	r3, [pc, #24]	; (8009398 <_svfiprintf_r+0x1f8>)
 8009380:	a904      	add	r1, sp, #16
 8009382:	4638      	mov	r0, r7
 8009384:	f000 f87a 	bl	800947c <_printf_i>
 8009388:	e7eb      	b.n	8009362 <_svfiprintf_r+0x1c2>
 800938a:	bf00      	nop
 800938c:	080097d4 	.word	0x080097d4
 8009390:	080097de 	.word	0x080097de
 8009394:	00000000 	.word	0x00000000
 8009398:	080090e9 	.word	0x080090e9
 800939c:	080097da 	.word	0x080097da

080093a0 <_printf_common>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	4616      	mov	r6, r2
 80093a6:	4699      	mov	r9, r3
 80093a8:	688a      	ldr	r2, [r1, #8]
 80093aa:	690b      	ldr	r3, [r1, #16]
 80093ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093b0:	4293      	cmp	r3, r2
 80093b2:	bfb8      	it	lt
 80093b4:	4613      	movlt	r3, r2
 80093b6:	6033      	str	r3, [r6, #0]
 80093b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093bc:	4607      	mov	r7, r0
 80093be:	460c      	mov	r4, r1
 80093c0:	b10a      	cbz	r2, 80093c6 <_printf_common+0x26>
 80093c2:	3301      	adds	r3, #1
 80093c4:	6033      	str	r3, [r6, #0]
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	0699      	lsls	r1, r3, #26
 80093ca:	bf42      	ittt	mi
 80093cc:	6833      	ldrmi	r3, [r6, #0]
 80093ce:	3302      	addmi	r3, #2
 80093d0:	6033      	strmi	r3, [r6, #0]
 80093d2:	6825      	ldr	r5, [r4, #0]
 80093d4:	f015 0506 	ands.w	r5, r5, #6
 80093d8:	d106      	bne.n	80093e8 <_printf_common+0x48>
 80093da:	f104 0a19 	add.w	sl, r4, #25
 80093de:	68e3      	ldr	r3, [r4, #12]
 80093e0:	6832      	ldr	r2, [r6, #0]
 80093e2:	1a9b      	subs	r3, r3, r2
 80093e4:	42ab      	cmp	r3, r5
 80093e6:	dc26      	bgt.n	8009436 <_printf_common+0x96>
 80093e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093ec:	1e13      	subs	r3, r2, #0
 80093ee:	6822      	ldr	r2, [r4, #0]
 80093f0:	bf18      	it	ne
 80093f2:	2301      	movne	r3, #1
 80093f4:	0692      	lsls	r2, r2, #26
 80093f6:	d42b      	bmi.n	8009450 <_printf_common+0xb0>
 80093f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093fc:	4649      	mov	r1, r9
 80093fe:	4638      	mov	r0, r7
 8009400:	47c0      	blx	r8
 8009402:	3001      	adds	r0, #1
 8009404:	d01e      	beq.n	8009444 <_printf_common+0xa4>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	68e5      	ldr	r5, [r4, #12]
 800940a:	6832      	ldr	r2, [r6, #0]
 800940c:	f003 0306 	and.w	r3, r3, #6
 8009410:	2b04      	cmp	r3, #4
 8009412:	bf08      	it	eq
 8009414:	1aad      	subeq	r5, r5, r2
 8009416:	68a3      	ldr	r3, [r4, #8]
 8009418:	6922      	ldr	r2, [r4, #16]
 800941a:	bf0c      	ite	eq
 800941c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009420:	2500      	movne	r5, #0
 8009422:	4293      	cmp	r3, r2
 8009424:	bfc4      	itt	gt
 8009426:	1a9b      	subgt	r3, r3, r2
 8009428:	18ed      	addgt	r5, r5, r3
 800942a:	2600      	movs	r6, #0
 800942c:	341a      	adds	r4, #26
 800942e:	42b5      	cmp	r5, r6
 8009430:	d11a      	bne.n	8009468 <_printf_common+0xc8>
 8009432:	2000      	movs	r0, #0
 8009434:	e008      	b.n	8009448 <_printf_common+0xa8>
 8009436:	2301      	movs	r3, #1
 8009438:	4652      	mov	r2, sl
 800943a:	4649      	mov	r1, r9
 800943c:	4638      	mov	r0, r7
 800943e:	47c0      	blx	r8
 8009440:	3001      	adds	r0, #1
 8009442:	d103      	bne.n	800944c <_printf_common+0xac>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944c:	3501      	adds	r5, #1
 800944e:	e7c6      	b.n	80093de <_printf_common+0x3e>
 8009450:	18e1      	adds	r1, r4, r3
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	2030      	movs	r0, #48	; 0x30
 8009456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800945a:	4422      	add	r2, r4
 800945c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009464:	3302      	adds	r3, #2
 8009466:	e7c7      	b.n	80093f8 <_printf_common+0x58>
 8009468:	2301      	movs	r3, #1
 800946a:	4622      	mov	r2, r4
 800946c:	4649      	mov	r1, r9
 800946e:	4638      	mov	r0, r7
 8009470:	47c0      	blx	r8
 8009472:	3001      	adds	r0, #1
 8009474:	d0e6      	beq.n	8009444 <_printf_common+0xa4>
 8009476:	3601      	adds	r6, #1
 8009478:	e7d9      	b.n	800942e <_printf_common+0x8e>
	...

0800947c <_printf_i>:
 800947c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009480:	7e0f      	ldrb	r7, [r1, #24]
 8009482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009484:	2f78      	cmp	r7, #120	; 0x78
 8009486:	4691      	mov	r9, r2
 8009488:	4680      	mov	r8, r0
 800948a:	460c      	mov	r4, r1
 800948c:	469a      	mov	sl, r3
 800948e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009492:	d807      	bhi.n	80094a4 <_printf_i+0x28>
 8009494:	2f62      	cmp	r7, #98	; 0x62
 8009496:	d80a      	bhi.n	80094ae <_printf_i+0x32>
 8009498:	2f00      	cmp	r7, #0
 800949a:	f000 80d8 	beq.w	800964e <_printf_i+0x1d2>
 800949e:	2f58      	cmp	r7, #88	; 0x58
 80094a0:	f000 80a3 	beq.w	80095ea <_printf_i+0x16e>
 80094a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094ac:	e03a      	b.n	8009524 <_printf_i+0xa8>
 80094ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094b2:	2b15      	cmp	r3, #21
 80094b4:	d8f6      	bhi.n	80094a4 <_printf_i+0x28>
 80094b6:	a101      	add	r1, pc, #4	; (adr r1, 80094bc <_printf_i+0x40>)
 80094b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094bc:	08009515 	.word	0x08009515
 80094c0:	08009529 	.word	0x08009529
 80094c4:	080094a5 	.word	0x080094a5
 80094c8:	080094a5 	.word	0x080094a5
 80094cc:	080094a5 	.word	0x080094a5
 80094d0:	080094a5 	.word	0x080094a5
 80094d4:	08009529 	.word	0x08009529
 80094d8:	080094a5 	.word	0x080094a5
 80094dc:	080094a5 	.word	0x080094a5
 80094e0:	080094a5 	.word	0x080094a5
 80094e4:	080094a5 	.word	0x080094a5
 80094e8:	08009635 	.word	0x08009635
 80094ec:	08009559 	.word	0x08009559
 80094f0:	08009617 	.word	0x08009617
 80094f4:	080094a5 	.word	0x080094a5
 80094f8:	080094a5 	.word	0x080094a5
 80094fc:	08009657 	.word	0x08009657
 8009500:	080094a5 	.word	0x080094a5
 8009504:	08009559 	.word	0x08009559
 8009508:	080094a5 	.word	0x080094a5
 800950c:	080094a5 	.word	0x080094a5
 8009510:	0800961f 	.word	0x0800961f
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	1d1a      	adds	r2, r3, #4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	602a      	str	r2, [r5, #0]
 800951c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009524:	2301      	movs	r3, #1
 8009526:	e0a3      	b.n	8009670 <_printf_i+0x1f4>
 8009528:	6820      	ldr	r0, [r4, #0]
 800952a:	6829      	ldr	r1, [r5, #0]
 800952c:	0606      	lsls	r6, r0, #24
 800952e:	f101 0304 	add.w	r3, r1, #4
 8009532:	d50a      	bpl.n	800954a <_printf_i+0xce>
 8009534:	680e      	ldr	r6, [r1, #0]
 8009536:	602b      	str	r3, [r5, #0]
 8009538:	2e00      	cmp	r6, #0
 800953a:	da03      	bge.n	8009544 <_printf_i+0xc8>
 800953c:	232d      	movs	r3, #45	; 0x2d
 800953e:	4276      	negs	r6, r6
 8009540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009544:	485e      	ldr	r0, [pc, #376]	; (80096c0 <_printf_i+0x244>)
 8009546:	230a      	movs	r3, #10
 8009548:	e019      	b.n	800957e <_printf_i+0x102>
 800954a:	680e      	ldr	r6, [r1, #0]
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009552:	bf18      	it	ne
 8009554:	b236      	sxthne	r6, r6
 8009556:	e7ef      	b.n	8009538 <_printf_i+0xbc>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	6820      	ldr	r0, [r4, #0]
 800955c:	1d19      	adds	r1, r3, #4
 800955e:	6029      	str	r1, [r5, #0]
 8009560:	0601      	lsls	r1, r0, #24
 8009562:	d501      	bpl.n	8009568 <_printf_i+0xec>
 8009564:	681e      	ldr	r6, [r3, #0]
 8009566:	e002      	b.n	800956e <_printf_i+0xf2>
 8009568:	0646      	lsls	r6, r0, #25
 800956a:	d5fb      	bpl.n	8009564 <_printf_i+0xe8>
 800956c:	881e      	ldrh	r6, [r3, #0]
 800956e:	4854      	ldr	r0, [pc, #336]	; (80096c0 <_printf_i+0x244>)
 8009570:	2f6f      	cmp	r7, #111	; 0x6f
 8009572:	bf0c      	ite	eq
 8009574:	2308      	moveq	r3, #8
 8009576:	230a      	movne	r3, #10
 8009578:	2100      	movs	r1, #0
 800957a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800957e:	6865      	ldr	r5, [r4, #4]
 8009580:	60a5      	str	r5, [r4, #8]
 8009582:	2d00      	cmp	r5, #0
 8009584:	bfa2      	ittt	ge
 8009586:	6821      	ldrge	r1, [r4, #0]
 8009588:	f021 0104 	bicge.w	r1, r1, #4
 800958c:	6021      	strge	r1, [r4, #0]
 800958e:	b90e      	cbnz	r6, 8009594 <_printf_i+0x118>
 8009590:	2d00      	cmp	r5, #0
 8009592:	d04d      	beq.n	8009630 <_printf_i+0x1b4>
 8009594:	4615      	mov	r5, r2
 8009596:	fbb6 f1f3 	udiv	r1, r6, r3
 800959a:	fb03 6711 	mls	r7, r3, r1, r6
 800959e:	5dc7      	ldrb	r7, [r0, r7]
 80095a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095a4:	4637      	mov	r7, r6
 80095a6:	42bb      	cmp	r3, r7
 80095a8:	460e      	mov	r6, r1
 80095aa:	d9f4      	bls.n	8009596 <_printf_i+0x11a>
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d10b      	bne.n	80095c8 <_printf_i+0x14c>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	07de      	lsls	r6, r3, #31
 80095b4:	d508      	bpl.n	80095c8 <_printf_i+0x14c>
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	6861      	ldr	r1, [r4, #4]
 80095ba:	4299      	cmp	r1, r3
 80095bc:	bfde      	ittt	le
 80095be:	2330      	movle	r3, #48	; 0x30
 80095c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095c8:	1b52      	subs	r2, r2, r5
 80095ca:	6122      	str	r2, [r4, #16]
 80095cc:	f8cd a000 	str.w	sl, [sp]
 80095d0:	464b      	mov	r3, r9
 80095d2:	aa03      	add	r2, sp, #12
 80095d4:	4621      	mov	r1, r4
 80095d6:	4640      	mov	r0, r8
 80095d8:	f7ff fee2 	bl	80093a0 <_printf_common>
 80095dc:	3001      	adds	r0, #1
 80095de:	d14c      	bne.n	800967a <_printf_i+0x1fe>
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095e4:	b004      	add	sp, #16
 80095e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ea:	4835      	ldr	r0, [pc, #212]	; (80096c0 <_printf_i+0x244>)
 80095ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095f0:	6829      	ldr	r1, [r5, #0]
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80095f8:	6029      	str	r1, [r5, #0]
 80095fa:	061d      	lsls	r5, r3, #24
 80095fc:	d514      	bpl.n	8009628 <_printf_i+0x1ac>
 80095fe:	07df      	lsls	r7, r3, #31
 8009600:	bf44      	itt	mi
 8009602:	f043 0320 	orrmi.w	r3, r3, #32
 8009606:	6023      	strmi	r3, [r4, #0]
 8009608:	b91e      	cbnz	r6, 8009612 <_printf_i+0x196>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	f023 0320 	bic.w	r3, r3, #32
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	2310      	movs	r3, #16
 8009614:	e7b0      	b.n	8009578 <_printf_i+0xfc>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	f043 0320 	orr.w	r3, r3, #32
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	2378      	movs	r3, #120	; 0x78
 8009620:	4828      	ldr	r0, [pc, #160]	; (80096c4 <_printf_i+0x248>)
 8009622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009626:	e7e3      	b.n	80095f0 <_printf_i+0x174>
 8009628:	0659      	lsls	r1, r3, #25
 800962a:	bf48      	it	mi
 800962c:	b2b6      	uxthmi	r6, r6
 800962e:	e7e6      	b.n	80095fe <_printf_i+0x182>
 8009630:	4615      	mov	r5, r2
 8009632:	e7bb      	b.n	80095ac <_printf_i+0x130>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	6826      	ldr	r6, [r4, #0]
 8009638:	6961      	ldr	r1, [r4, #20]
 800963a:	1d18      	adds	r0, r3, #4
 800963c:	6028      	str	r0, [r5, #0]
 800963e:	0635      	lsls	r5, r6, #24
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	d501      	bpl.n	8009648 <_printf_i+0x1cc>
 8009644:	6019      	str	r1, [r3, #0]
 8009646:	e002      	b.n	800964e <_printf_i+0x1d2>
 8009648:	0670      	lsls	r0, r6, #25
 800964a:	d5fb      	bpl.n	8009644 <_printf_i+0x1c8>
 800964c:	8019      	strh	r1, [r3, #0]
 800964e:	2300      	movs	r3, #0
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	4615      	mov	r5, r2
 8009654:	e7ba      	b.n	80095cc <_printf_i+0x150>
 8009656:	682b      	ldr	r3, [r5, #0]
 8009658:	1d1a      	adds	r2, r3, #4
 800965a:	602a      	str	r2, [r5, #0]
 800965c:	681d      	ldr	r5, [r3, #0]
 800965e:	6862      	ldr	r2, [r4, #4]
 8009660:	2100      	movs	r1, #0
 8009662:	4628      	mov	r0, r5
 8009664:	f7f6 fdbc 	bl	80001e0 <memchr>
 8009668:	b108      	cbz	r0, 800966e <_printf_i+0x1f2>
 800966a:	1b40      	subs	r0, r0, r5
 800966c:	6060      	str	r0, [r4, #4]
 800966e:	6863      	ldr	r3, [r4, #4]
 8009670:	6123      	str	r3, [r4, #16]
 8009672:	2300      	movs	r3, #0
 8009674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009678:	e7a8      	b.n	80095cc <_printf_i+0x150>
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	462a      	mov	r2, r5
 800967e:	4649      	mov	r1, r9
 8009680:	4640      	mov	r0, r8
 8009682:	47d0      	blx	sl
 8009684:	3001      	adds	r0, #1
 8009686:	d0ab      	beq.n	80095e0 <_printf_i+0x164>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	079b      	lsls	r3, r3, #30
 800968c:	d413      	bmi.n	80096b6 <_printf_i+0x23a>
 800968e:	68e0      	ldr	r0, [r4, #12]
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	4298      	cmp	r0, r3
 8009694:	bfb8      	it	lt
 8009696:	4618      	movlt	r0, r3
 8009698:	e7a4      	b.n	80095e4 <_printf_i+0x168>
 800969a:	2301      	movs	r3, #1
 800969c:	4632      	mov	r2, r6
 800969e:	4649      	mov	r1, r9
 80096a0:	4640      	mov	r0, r8
 80096a2:	47d0      	blx	sl
 80096a4:	3001      	adds	r0, #1
 80096a6:	d09b      	beq.n	80095e0 <_printf_i+0x164>
 80096a8:	3501      	adds	r5, #1
 80096aa:	68e3      	ldr	r3, [r4, #12]
 80096ac:	9903      	ldr	r1, [sp, #12]
 80096ae:	1a5b      	subs	r3, r3, r1
 80096b0:	42ab      	cmp	r3, r5
 80096b2:	dcf2      	bgt.n	800969a <_printf_i+0x21e>
 80096b4:	e7eb      	b.n	800968e <_printf_i+0x212>
 80096b6:	2500      	movs	r5, #0
 80096b8:	f104 0619 	add.w	r6, r4, #25
 80096bc:	e7f5      	b.n	80096aa <_printf_i+0x22e>
 80096be:	bf00      	nop
 80096c0:	080097e5 	.word	0x080097e5
 80096c4:	080097f6 	.word	0x080097f6

080096c8 <__retarget_lock_acquire_recursive>:
 80096c8:	4770      	bx	lr

080096ca <__retarget_lock_release_recursive>:
 80096ca:	4770      	bx	lr

080096cc <memcpy>:
 80096cc:	440a      	add	r2, r1
 80096ce:	4291      	cmp	r1, r2
 80096d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096d4:	d100      	bne.n	80096d8 <memcpy+0xc>
 80096d6:	4770      	bx	lr
 80096d8:	b510      	push	{r4, lr}
 80096da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096e2:	4291      	cmp	r1, r2
 80096e4:	d1f9      	bne.n	80096da <memcpy+0xe>
 80096e6:	bd10      	pop	{r4, pc}

080096e8 <memmove>:
 80096e8:	4288      	cmp	r0, r1
 80096ea:	b510      	push	{r4, lr}
 80096ec:	eb01 0402 	add.w	r4, r1, r2
 80096f0:	d902      	bls.n	80096f8 <memmove+0x10>
 80096f2:	4284      	cmp	r4, r0
 80096f4:	4623      	mov	r3, r4
 80096f6:	d807      	bhi.n	8009708 <memmove+0x20>
 80096f8:	1e43      	subs	r3, r0, #1
 80096fa:	42a1      	cmp	r1, r4
 80096fc:	d008      	beq.n	8009710 <memmove+0x28>
 80096fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009706:	e7f8      	b.n	80096fa <memmove+0x12>
 8009708:	4402      	add	r2, r0
 800970a:	4601      	mov	r1, r0
 800970c:	428a      	cmp	r2, r1
 800970e:	d100      	bne.n	8009712 <memmove+0x2a>
 8009710:	bd10      	pop	{r4, pc}
 8009712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800971a:	e7f7      	b.n	800970c <memmove+0x24>

0800971c <_realloc_r>:
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	4680      	mov	r8, r0
 8009722:	4614      	mov	r4, r2
 8009724:	460e      	mov	r6, r1
 8009726:	b921      	cbnz	r1, 8009732 <_realloc_r+0x16>
 8009728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800972c:	4611      	mov	r1, r2
 800972e:	f7ff bc2b 	b.w	8008f88 <_malloc_r>
 8009732:	b92a      	cbnz	r2, 8009740 <_realloc_r+0x24>
 8009734:	f7ff fbbc 	bl	8008eb0 <_free_r>
 8009738:	4625      	mov	r5, r4
 800973a:	4628      	mov	r0, r5
 800973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009740:	f000 f81b 	bl	800977a <_malloc_usable_size_r>
 8009744:	4284      	cmp	r4, r0
 8009746:	4607      	mov	r7, r0
 8009748:	d802      	bhi.n	8009750 <_realloc_r+0x34>
 800974a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800974e:	d812      	bhi.n	8009776 <_realloc_r+0x5a>
 8009750:	4621      	mov	r1, r4
 8009752:	4640      	mov	r0, r8
 8009754:	f7ff fc18 	bl	8008f88 <_malloc_r>
 8009758:	4605      	mov	r5, r0
 800975a:	2800      	cmp	r0, #0
 800975c:	d0ed      	beq.n	800973a <_realloc_r+0x1e>
 800975e:	42bc      	cmp	r4, r7
 8009760:	4622      	mov	r2, r4
 8009762:	4631      	mov	r1, r6
 8009764:	bf28      	it	cs
 8009766:	463a      	movcs	r2, r7
 8009768:	f7ff ffb0 	bl	80096cc <memcpy>
 800976c:	4631      	mov	r1, r6
 800976e:	4640      	mov	r0, r8
 8009770:	f7ff fb9e 	bl	8008eb0 <_free_r>
 8009774:	e7e1      	b.n	800973a <_realloc_r+0x1e>
 8009776:	4635      	mov	r5, r6
 8009778:	e7df      	b.n	800973a <_realloc_r+0x1e>

0800977a <_malloc_usable_size_r>:
 800977a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800977e:	1f18      	subs	r0, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfbc      	itt	lt
 8009784:	580b      	ldrlt	r3, [r1, r0]
 8009786:	18c0      	addlt	r0, r0, r3
 8009788:	4770      	bx	lr
	...

0800978c <_init>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr

08009798 <_fini>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr
