
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d0  080097d0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d8  080097d8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080097e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000888  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000918  20000918  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a068  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd8  00000000  00000000  0003a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  0003f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e41  00000000  00000000  00040420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa19  00000000  00000000  00064261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd63  00000000  00000000  0007ec7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c9dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c8  00000000  00000000  0014ca30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800975c 	.word	0x0800975c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800975c 	.word	0x0800975c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fc9b 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f835 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f95b 	bl	800084c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f000 f89b 	bl	80006d0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800059a:	f000 f8c7 	bl	800072c <MX_I2S3_Init>
  MX_SPI1_Init();
 800059e:	f000 f8f5 	bl	800078c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005a2:	f008 f923 	bl	80087ec <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f927 	bl	80007f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 10);
 80005aa:	220a      	movs	r2, #10
 80005ac:	490f      	ldr	r1, [pc, #60]	; (80005ec <main+0x68>)
 80005ae:	4810      	ldr	r0, [pc, #64]	; (80005f0 <main+0x6c>)
 80005b0:	f004 f9a6 	bl	8004900 <HAL_UART_Receive_IT>
  int num = 10;
 80005b4:	230a      	movs	r3, #10
 80005b6:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b8:	f008 f93e 	bl	8008838 <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */
    sprintf(tx_data, "%d hello \r\n", num);
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	490d      	ldr	r1, [pc, #52]	; (80005f4 <main+0x70>)
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <main+0x74>)
 80005c2:	f008 fd4d 	bl	8009060 <siprintf>
    num ++;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3301      	adds	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
   	HAL_UART_Transmit(&huart2, &tx_data, strlen(tx_data), 0xffff);
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <main+0x74>)
 80005ce:	f7ff fdff 	bl	80001d0 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005da:	4907      	ldr	r1, [pc, #28]	; (80005f8 <main+0x74>)
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <main+0x6c>)
 80005de:	f004 f8fd 	bl	80047dc <HAL_UART_Transmit>

   	HAL_Delay(200);
 80005e2:	20c8      	movs	r0, #200	; 0xc8
 80005e4:	f000 fce0 	bl	8000fa8 <HAL_Delay>
  {
 80005e8:	e7e6      	b.n	80005b8 <main+0x34>
 80005ea:	bf00      	nop
 80005ec:	20000218 	.word	0x20000218
 80005f0:	200001a0 	.word	0x200001a0
 80005f4:	08009774 	.word	0x08009774
 80005f8:	200001e4 	.word	0x200001e4

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 fc30 	bl	8008e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f003 f9fc 	bl	8003a80 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068e:	f000 f9db 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2105      	movs	r1, #5
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fc5d 	bl	8003f70 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 f9c4 	bl	8000a48 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_I2C1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C1_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_I2C1_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_I2C1_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_I2C1_Init+0x50>)
 800070e:	f002 fbd3 	bl	8002eb8 <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f996 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000ac 	.word	0x200000ac
 8000724:	40005400 	.word	0x40005400
 8000728:	000186a0 	.word	0x000186a0

0800072c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_I2S3_Init+0x54>)
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <MX_I2S3_Init+0x58>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_I2S3_Init+0x54>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_I2S3_Init+0x54>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_I2S3_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_I2S3_Init+0x54>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_I2S3_Init+0x54>)
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <MX_I2S3_Init+0x5c>)
 8000756:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_I2S3_Init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_I2S3_Init+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_I2S3_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_I2S3_Init+0x54>)
 800076c:	f002 fce8 	bl	8003140 <HAL_I2S_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000776:	f000 f967 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000100 	.word	0x20000100
 8000784:	40003c00 	.word	0x40003c00
 8000788:	00017700 	.word	0x00017700

0800078c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_SPI1_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_SPI1_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_SPI1_Init+0x64>)
 8000798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800079c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007d8:	220a      	movs	r2, #10
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007de:	f003 ff27 	bl	8004630 <HAL_SPI_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 f92e 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000148 	.word	0x20000148
 80007f4:	40013000 	.word	0x40013000

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <MX_USART2_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000804:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000830:	f003 ff87 	bl	8004742 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f000 f905 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200001a0 	.word	0x200001a0
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	4b72      	ldr	r3, [pc, #456]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a71      	ldr	r2, [pc, #452]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b6f      	ldr	r3, [pc, #444]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	4b6b      	ldr	r3, [pc, #428]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a6a      	ldr	r2, [pc, #424]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b68      	ldr	r3, [pc, #416]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b64      	ldr	r3, [pc, #400]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a63      	ldr	r2, [pc, #396]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b61      	ldr	r3, [pc, #388]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b5d      	ldr	r3, [pc, #372]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a5c      	ldr	r2, [pc, #368]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b56      	ldr	r3, [pc, #344]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a55      	ldr	r2, [pc, #340]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b53      	ldr	r3, [pc, #332]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b4f      	ldr	r3, [pc, #316]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a4e      	ldr	r2, [pc, #312]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b4c      	ldr	r3, [pc, #304]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2108      	movs	r1, #8
 800090e:	4849      	ldr	r0, [pc, #292]	; (8000a34 <MX_GPIO_Init+0x1e8>)
 8000910:	f000 feae 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4847      	ldr	r0, [pc, #284]	; (8000a38 <MX_GPIO_Init+0x1ec>)
 800091a:	f000 fea9 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091e:	2200      	movs	r2, #0
 8000920:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000924:	4845      	ldr	r0, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x1f0>)
 8000926:	f000 fea3 	bl	8001670 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800092a:	2308      	movs	r3, #8
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	483c      	ldr	r0, [pc, #240]	; (8000a34 <MX_GPIO_Init+0x1e8>)
 8000942:	f000 fcf9 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4836      	ldr	r0, [pc, #216]	; (8000a38 <MX_GPIO_Init+0x1ec>)
 800095e:	f000 fceb 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000962:	2308      	movs	r3, #8
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	482e      	ldr	r0, [pc, #184]	; (8000a38 <MX_GPIO_Init+0x1ec>)
 800097e:	f000 fcdb 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000986:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	482a      	ldr	r0, [pc, #168]	; (8000a40 <MX_GPIO_Init+0x1f4>)
 8000998:	f000 fcce 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800099c:	2304      	movs	r3, #4
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4825      	ldr	r0, [pc, #148]	; (8000a44 <MX_GPIO_Init+0x1f8>)
 80009b0:	f000 fcc2 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c6:	2305      	movs	r3, #5
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481c      	ldr	r0, [pc, #112]	; (8000a44 <MX_GPIO_Init+0x1f8>)
 80009d2:	f000 fcb1 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4813      	ldr	r0, [pc, #76]	; (8000a3c <MX_GPIO_Init+0x1f0>)
 80009f0:	f000 fca2 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f4:	2320      	movs	r3, #32
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_GPIO_Init+0x1f0>)
 8000a08:	f000 fc96 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_GPIO_Init+0x1e8>)
 8000a22:	f000 fc89 	bl	8001338 <HAL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a92:	2007      	movs	r0, #7
 8000a94:	f000 fb7c 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_I2C_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12c      	bne.n	8000b20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_I2C_MspInit+0x88>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_I2C_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ae2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae8:	2312      	movs	r3, #18
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af4:	2304      	movs	r3, #4
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	; (8000b30 <HAL_I2C_MspInit+0x8c>)
 8000b00:	f000 fc1a 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_I2C_MspInit+0x88>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400

08000b34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a31      	ldr	r2, [pc, #196]	; (8000c24 <HAL_I2S_MspInit+0xf0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d15a      	bne.n	8000c1a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b68:	23c0      	movs	r3, #192	; 0xc0
 8000b6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 fc1b 	bl	80043b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b80:	f7ff ff62 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a26      	ldr	r2, [pc, #152]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_I2S_MspInit+0xf4>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be8:	2306      	movs	r3, #6
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480e      	ldr	r0, [pc, #56]	; (8000c2c <HAL_I2S_MspInit+0xf8>)
 8000bf4:	f000 fba0 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bf8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <HAL_I2S_MspInit+0xfc>)
 8000c16:	f000 fb8f 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	; 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40003c00 	.word	0x40003c00
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020800 	.word	0x40020800

08000c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_SPI_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c8e:	23e0      	movs	r3, #224	; 0xe0
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_SPI_MspInit+0x8c>)
 8000caa:	f000 fb45 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d133      	bne.n	8000d4e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_UART_MspInit+0x98>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_UART_MspInit+0x9c>)
 8000d3a:	f000 fafd 	bl	8001338 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2026      	movs	r0, #38	; 0x26
 8000d44:	f000 fa2f 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d48:	2026      	movs	r0, #38	; 0x26
 8000d4a:	f000 fa48 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f8da 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <USART2_IRQHandler+0x10>)
 8000dbe:	f003 fdcf 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001a0 	.word	0x200001a0

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f000 fed1 	bl	8001b78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000604 	.word	0x20000604

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f007 fff4 	bl	8008dfc <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20000220 	.word	0x20000220
 8000e48:	20000918 	.word	0x20000918

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f007 ffb3 	bl	8008e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fb6f 	bl	8000584 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000eb4:	080097e0 	.word	0x080097e0
  ldr r2, =_sbss
 8000eb8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ebc:	20000918 	.word	0x20000918

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f94f 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fdac 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f967 	bl	80011fa <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f44:	f000 f92f 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000224 	.word	0x20000224

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000224 	.word	0x20000224

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff3e 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff31 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff feb6 	bl	8000f90 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d008      	beq.n	8001244 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e052      	b.n	80012ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0216 	bic.w	r2, r2, #22
 8001252:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001262:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	2b00      	cmp	r3, #0
 800126a:	d103      	bne.n	8001274 <HAL_DMA_Abort+0x62>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0208 	bic.w	r2, r2, #8
 8001282:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001294:	e013      	b.n	80012be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001296:	f7ff fe7b 	bl	8000f90 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d90c      	bls.n	80012be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2220      	movs	r2, #32
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2203      	movs	r2, #3
 80012ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e015      	b.n	80012ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e4      	bne.n	8001296 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	223f      	movs	r2, #63	; 0x3f
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d004      	beq.n	8001310 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e00c      	b.n	800132a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2205      	movs	r2, #5
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	e16b      	b.n	800162c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	429a      	cmp	r2, r3
 800136e:	f040 815a 	bne.w	8001626 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d005      	beq.n	800138a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001386:	2b02      	cmp	r3, #2
 8001388:	d130      	bne.n	80013ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c0:	2201      	movs	r2, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f003 0201 	and.w	r2, r3, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d017      	beq.n	8001428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d123      	bne.n	800147c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	69b9      	ldr	r1, [r7, #24]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80b4 	beq.w	8001626 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b60      	ldr	r3, [pc, #384]	; (8001644 <HAL_GPIO_Init+0x30c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a5f      	ldr	r2, [pc, #380]	; (8001644 <HAL_GPIO_Init+0x30c>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b5d      	ldr	r3, [pc, #372]	; (8001644 <HAL_GPIO_Init+0x30c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014da:	4a5b      	ldr	r2, [pc, #364]	; (8001648 <HAL_GPIO_Init+0x310>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a52      	ldr	r2, [pc, #328]	; (800164c <HAL_GPIO_Init+0x314>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d02b      	beq.n	800155e <HAL_GPIO_Init+0x226>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a51      	ldr	r2, [pc, #324]	; (8001650 <HAL_GPIO_Init+0x318>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d025      	beq.n	800155a <HAL_GPIO_Init+0x222>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a50      	ldr	r2, [pc, #320]	; (8001654 <HAL_GPIO_Init+0x31c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01f      	beq.n	8001556 <HAL_GPIO_Init+0x21e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <HAL_GPIO_Init+0x320>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_GPIO_Init+0x21a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4e      	ldr	r2, [pc, #312]	; (800165c <HAL_GPIO_Init+0x324>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x216>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4d      	ldr	r2, [pc, #308]	; (8001660 <HAL_GPIO_Init+0x328>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x212>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4c      	ldr	r2, [pc, #304]	; (8001664 <HAL_GPIO_Init+0x32c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x20e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4b      	ldr	r2, [pc, #300]	; (8001668 <HAL_GPIO_Init+0x330>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x20a>
 800153e:	2307      	movs	r3, #7
 8001540:	e00e      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001542:	2308      	movs	r3, #8
 8001544:	e00c      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001546:	2306      	movs	r3, #6
 8001548:	e00a      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800154a:	2305      	movs	r3, #5
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800154e:	2304      	movs	r3, #4
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800155e:	2300      	movs	r3, #0
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	4935      	ldr	r1, [pc, #212]	; (8001648 <HAL_GPIO_Init+0x310>)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <HAL_GPIO_Init+0x334>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a2:	4a32      	ldr	r2, [pc, #200]	; (800166c <HAL_GPIO_Init+0x334>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_GPIO_Init+0x334>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_GPIO_Init+0x334>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_GPIO_Init+0x334>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_GPIO_Init+0x334>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_GPIO_Init+0x334>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_GPIO_Init+0x334>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	f67f ae90 	bls.w	8001354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40013800 	.word	0x40013800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40020800 	.word	0x40020800
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40021000 	.word	0x40021000
 8001660:	40021400 	.word	0x40021400
 8001664:	40021800 	.word	0x40021800
 8001668:	40021c00 	.word	0x40021c00
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a4:	b08f      	sub	sp, #60	; 0x3c
 80016a6:	af0a      	add	r7, sp, #40	; 0x28
 80016a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e054      	b.n	800175e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f007 f8ea 	bl	80088a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2203      	movs	r2, #3
 80016d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 f918 	bl	8005928 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	687e      	ldr	r6, [r7, #4]
 8001700:	466d      	mov	r5, sp
 8001702:	f106 0410 	add.w	r4, r6, #16
 8001706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001712:	e885 0003 	stmia.w	r5, {r0, r1}
 8001716:	1d33      	adds	r3, r6, #4
 8001718:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171a:	6838      	ldr	r0, [r7, #0]
 800171c:	f004 f892 	bl	8005844 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	4618      	mov	r0, r3
 8001728:	f004 f90f 	bl	800594a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	687e      	ldr	r6, [r7, #4]
 8001734:	466d      	mov	r5, sp
 8001736:	f106 0410 	add.w	r4, r6, #16
 800173a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001746:	e885 0003 	stmia.w	r5, {r0, r1}
 800174a:	1d33      	adds	r3, r6, #4
 800174c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174e:	6838      	ldr	r0, [r7, #0]
 8001750:	f004 fa98 	bl	8005c84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001766 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001766:	b590      	push	{r4, r7, lr}
 8001768:	b089      	sub	sp, #36	; 0x24
 800176a:	af04      	add	r7, sp, #16
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	4608      	mov	r0, r1
 8001770:	4611      	mov	r1, r2
 8001772:	461a      	mov	r2, r3
 8001774:	4603      	mov	r3, r0
 8001776:	70fb      	strb	r3, [r7, #3]
 8001778:	460b      	mov	r3, r1
 800177a:	70bb      	strb	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_HCD_HC_Init+0x28>
 800178a:	2302      	movs	r3, #2
 800178c:	e076      	b.n	800187c <HAL_HCD_HC_Init+0x116>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	333d      	adds	r3, #61	; 0x3d
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	212c      	movs	r1, #44	; 0x2c
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	787a      	ldrb	r2, [r7, #1]
 80017b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	3340      	adds	r3, #64	; 0x40
 80017c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017ca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3339      	adds	r3, #57	; 0x39
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	212c      	movs	r1, #44	; 0x2c
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	333f      	adds	r3, #63	; 0x3f
 80017ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	78ba      	ldrb	r2, [r7, #2]
 80017f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017fa:	b2d0      	uxtb	r0, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	333a      	adds	r3, #58	; 0x3a
 8001808:	4602      	mov	r2, r0
 800180a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800180c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001810:	2b00      	cmp	r3, #0
 8001812:	da09      	bge.n	8001828 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	333b      	adds	r3, #59	; 0x3b
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e008      	b.n	800183a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	333b      	adds	r3, #59	; 0x3b
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	333c      	adds	r3, #60	; 0x3c
 8001848:	f897 2020 	ldrb.w	r2, [r7, #32]
 800184c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	787c      	ldrb	r4, [r7, #1]
 8001854:	78ba      	ldrb	r2, [r7, #2]
 8001856:	78f9      	ldrb	r1, [r7, #3]
 8001858:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	4623      	mov	r3, r4
 800186a:	f004 fb91 	bl	8005f90 <USB_HC_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}

08001884 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_HCD_HC_Halt+0x1e>
 800189e:	2302      	movs	r3, #2
 80018a0:	e00f      	b.n	80018c2 <HAL_HCD_HC_Halt+0x3e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f004 fde1 	bl	800647a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	70fb      	strb	r3, [r7, #3]
 80018de:	460b      	mov	r3, r1
 80018e0:	70bb      	strb	r3, [r7, #2]
 80018e2:	4613      	mov	r3, r2
 80018e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	333b      	adds	r3, #59	; 0x3b
 80018f4:	78ba      	ldrb	r2, [r7, #2]
 80018f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	333f      	adds	r3, #63	; 0x3f
 8001906:	787a      	ldrb	r2, [r7, #1]
 8001908:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800190a:	7c3b      	ldrb	r3, [r7, #16]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d112      	bne.n	8001936 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	3342      	adds	r3, #66	; 0x42
 800191e:	2203      	movs	r2, #3
 8001920:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	333d      	adds	r3, #61	; 0x3d
 8001930:	7f3a      	ldrb	r2, [r7, #28]
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	e008      	b.n	8001948 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3342      	adds	r3, #66	; 0x42
 8001944:	2202      	movs	r2, #2
 8001946:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b03      	cmp	r3, #3
 800194c:	f200 80c6 	bhi.w	8001adc <HAL_HCD_HC_SubmitRequest+0x210>
 8001950:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001956:	bf00      	nop
 8001958:	08001969 	.word	0x08001969
 800195c:	08001ac9 	.word	0x08001ac9
 8001960:	080019cd 	.word	0x080019cd
 8001964:	08001a4b 	.word	0x08001a4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001968:	7c3b      	ldrb	r3, [r7, #16]
 800196a:	2b01      	cmp	r3, #1
 800196c:	f040 80b8 	bne.w	8001ae0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001970:	78bb      	ldrb	r3, [r7, #2]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80b4 	bne.w	8001ae0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001978:	8b3b      	ldrh	r3, [r7, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d108      	bne.n	8001990 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	212c      	movs	r1, #44	; 0x2c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	3355      	adds	r3, #85	; 0x55
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	212c      	movs	r1, #44	; 0x2c
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4413      	add	r3, r2
 800199c:	3355      	adds	r3, #85	; 0x55
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	212c      	movs	r1, #44	; 0x2c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	3342      	adds	r3, #66	; 0x42
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019b6:	e093      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3342      	adds	r3, #66	; 0x42
 80019c6:	2202      	movs	r2, #2
 80019c8:	701a      	strb	r2, [r3, #0]
      break;
 80019ca:	e089      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019cc:	78bb      	ldrb	r3, [r7, #2]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11d      	bne.n	8001a0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	3355      	adds	r3, #85	; 0x55
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3342      	adds	r3, #66	; 0x42
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019f8:	e073      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3342      	adds	r3, #66	; 0x42
 8001a08:	2202      	movs	r2, #2
 8001a0a:	701a      	strb	r2, [r3, #0]
      break;
 8001a0c:	e069      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3354      	adds	r3, #84	; 0x54
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	212c      	movs	r1, #44	; 0x2c
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3342      	adds	r3, #66	; 0x42
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
      break;
 8001a34:	e055      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	3342      	adds	r3, #66	; 0x42
 8001a44:	2202      	movs	r2, #2
 8001a46:	701a      	strb	r2, [r3, #0]
      break;
 8001a48:	e04b      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a4a:	78bb      	ldrb	r3, [r7, #2]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11d      	bne.n	8001a8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3355      	adds	r3, #85	; 0x55
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3342      	adds	r3, #66	; 0x42
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a76:	e034      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3342      	adds	r3, #66	; 0x42
 8001a86:	2202      	movs	r2, #2
 8001a88:	701a      	strb	r2, [r3, #0]
      break;
 8001a8a:	e02a      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3354      	adds	r3, #84	; 0x54
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3342      	adds	r3, #66	; 0x42
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
      break;
 8001ab2:	e016      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3342      	adds	r3, #66	; 0x42
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	701a      	strb	r2, [r3, #0]
      break;
 8001ac6:	e00c      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3342      	adds	r3, #66	; 0x42
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ae0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3344      	adds	r3, #68	; 0x44
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	8b3a      	ldrh	r2, [r7, #24]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	202c      	movs	r0, #44	; 0x2c
 8001afc:	fb00 f303 	mul.w	r3, r0, r3
 8001b00:	440b      	add	r3, r1
 8001b02:	334c      	adds	r3, #76	; 0x4c
 8001b04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	212c      	movs	r1, #44	; 0x2c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	3360      	adds	r3, #96	; 0x60
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3350      	adds	r3, #80	; 0x50
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	3339      	adds	r3, #57	; 0x39
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3361      	adds	r3, #97	; 0x61
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	222c      	movs	r2, #44	; 0x2c
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	3338      	adds	r3, #56	; 0x38
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	18d1      	adds	r1, r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	f004 fb34 	bl	80061d4 <USB_HC_StartXfer>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop

08001b78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 f835 	bl	8005bfe <USB_GetMode>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	f040 80f6 	bne.w	8001d88 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 f819 	bl	8005bd8 <USB_ReadInterrupts>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80ec 	beq.w	8001d86 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 f810 	bl	8005bd8 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bc2:	d104      	bne.n	8001bce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 f800 	bl	8005bd8 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001be2:	d104      	bne.n	8001bee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fff0 	bl	8005bd8 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c02:	d104      	bne.n	8001c0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 ffe0 	bl	8005bd8 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d103      	bne.n	8001c2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2202      	movs	r2, #2
 8001c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 ffd2 	bl	8005bd8 <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c3e:	d11c      	bne.n	8001c7a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10f      	bne.n	8001c7a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	6938      	ldr	r0, [r7, #16]
 8001c5e:	f003 fec1 	bl	80059e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c62:	6938      	ldr	r0, [r7, #16]
 8001c64:	f003 fef2 	bl	8005a4c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 f8c8 	bl	8005e04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f006 fe95 	bl	80089a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 ffaa 	bl	8005bd8 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c8e:	d102      	bne.n	8001c96 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f001 f89e 	bl	8002dd2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 ff9c 	bl	8005bd8 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d106      	bne.n	8001cb8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f006 fe5e 	bl	800896c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 ff8b 	bl	8005bd8 <USB_ReadInterrupts>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d101      	bne.n	8001cd0 <HAL_HCD_IRQHandler+0x158>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_HCD_IRQHandler+0x15a>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0210 	bic.w	r2, r2, #16
 8001ce4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 ffa1 	bl	8002c2e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0210 	orr.w	r2, r2, #16
 8001cfa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 ff69 	bl	8005bd8 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d10:	d13a      	bne.n	8001d88 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fb9e 	bl	8006458 <USB_HC_ReadInterrupt>
 8001d1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e025      	b.n	8001d70 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d018      	beq.n	8001d6a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4e:	d106      	bne.n	8001d5e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4619      	mov	r1, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8ab 	bl	8001eb2 <HCD_HC_IN_IRQHandler>
 8001d5c:	e005      	b.n	8001d6a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fbf9 	bl	800255c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3d4      	bcc.n	8001d24 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	e000      	b.n	8001d88 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d86:	bf00      	nop
    }
  }
}
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_HCD_Start+0x16>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e013      	b.n	8001dcc <HAL_HCD_Start+0x3e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 f88a 	bl	8005ecc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fda2 	bl	8005906 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_HCD_Stop+0x16>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e00d      	b.n	8001e06 <HAL_HCD_Stop+0x32>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fc78 	bl	80066ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 f82c 	bl	8005e78 <USB_ResetPort>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3360      	adds	r3, #96	; 0x60
 8001e44:	781b      	ldrb	r3, [r3, #0]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3350      	adds	r3, #80	; 0x50
 8001e6c:	681b      	ldr	r3, [r3, #0]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 f870 	bl	8005f6c <USB_GetCurrentFrame>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 f84b 	bl	8005f3e <USB_GetHostSpeed>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d11a      	bne.n	8001f18 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	212c      	movs	r1, #44	; 0x2c
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	3361      	adds	r3, #97	; 0x61
 8001f02:	2206      	movs	r2, #6
 8001f04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fab2 	bl	800647a <USB_HC_Halt>
 8001f16:	e0af      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2e:	d11b      	bne.n	8001f68 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	212c      	movs	r1, #44	; 0x2c
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	3361      	adds	r3, #97	; 0x61
 8001f52:	2207      	movs	r2, #7
 8001f54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fa8a 	bl	800647a <USB_HC_Halt>
 8001f66:	e087      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d109      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	6093      	str	r3, [r2, #8]
 8001f90:	e072      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d11a      	bne.n	8001fde <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3361      	adds	r3, #97	; 0x61
 8001fc8:	2205      	movs	r2, #5
 8001fca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 fa4f 	bl	800647a <USB_HC_Halt>
 8001fdc:	e04c      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff4:	d11b      	bne.n	800202e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	461a      	mov	r2, r3
 8002004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002008:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3361      	adds	r3, #97	; 0x61
 8002018:	2208      	movs	r2, #8
 800201a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f004 fa27 	bl	800647a <USB_HC_Halt>
 800202c:	e024      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	d119      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3361      	adds	r3, #97	; 0x61
 8002064:	2206      	movs	r2, #6
 8002066:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f004 fa01 	bl	800647a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208e:	d112      	bne.n	80020b6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f004 f9ed 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	461a      	mov	r2, r3
 80020ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020b4:	e24e      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f040 80df 	bne.w	800228c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d019      	beq.n	800210a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3348      	adds	r3, #72	; 0x48
 80020e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0159      	lsls	r1, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020f8:	1ad2      	subs	r2, r2, r3
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	202c      	movs	r0, #44	; 0x2c
 8002100:	fb00 f303 	mul.w	r3, r0, r3
 8002104:	440b      	add	r3, r1
 8002106:	3350      	adds	r3, #80	; 0x50
 8002108:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3361      	adds	r3, #97	; 0x61
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	335c      	adds	r3, #92	; 0x5c
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	461a      	mov	r2, r3
 800213c:	2301      	movs	r3, #1
 800213e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	333f      	adds	r3, #63	; 0x3f
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d009      	beq.n	8002168 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	333f      	adds	r3, #63	; 0x3f
 8002162:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002164:	2b02      	cmp	r3, #2
 8002166:	d111      	bne.n	800218c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f981 	bl	800647a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	2310      	movs	r3, #16
 8002188:	6093      	str	r3, [r2, #8]
 800218a:	e03a      	b.n	8002202 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	333f      	adds	r3, #63	; 0x3f
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d009      	beq.n	80021b4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	333f      	adds	r3, #63	; 0x3f
 80021ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d126      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	0151      	lsls	r1, r2, #5
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	440a      	add	r2, r1
 80021ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3360      	adds	r3, #96	; 0x60
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	b2d9      	uxtb	r1, r3
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	202c      	movs	r0, #44	; 0x2c
 80021f0:	fb00 f303 	mul.w	r3, r0, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3360      	adds	r3, #96	; 0x60
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f006 fbdf 	bl	80089c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d12b      	bne.n	8002262 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3348      	adds	r3, #72	; 0x48
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	202c      	movs	r0, #44	; 0x2c
 8002220:	fb00 f202 	mul.w	r2, r0, r2
 8002224:	440a      	add	r2, r1
 8002226:	3240      	adds	r2, #64	; 0x40
 8002228:	8812      	ldrh	r2, [r2, #0]
 800222a:	fbb3 f3f2 	udiv	r3, r3, r2
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 818e 	beq.w	8002554 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3354      	adds	r3, #84	; 0x54
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	f083 0301 	eor.w	r3, r3, #1
 800224c:	b2d8      	uxtb	r0, r3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3354      	adds	r3, #84	; 0x54
 800225c:	4602      	mov	r2, r0
 800225e:	701a      	strb	r2, [r3, #0]
}
 8002260:	e178      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3354      	adds	r3, #84	; 0x54
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	b2d8      	uxtb	r0, r3
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3354      	adds	r3, #84	; 0x54
 8002286:	4602      	mov	r2, r0
 8002288:	701a      	strb	r2, [r3, #0]
}
 800228a:	e163      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	f040 80f6 	bne.w	8002490 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	3361      	adds	r3, #97	; 0x61
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d109      	bne.n	80022cc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3360      	adds	r3, #96	; 0x60
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e0c9      	b.n	8002460 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3361      	adds	r3, #97	; 0x61
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d109      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3360      	adds	r3, #96	; 0x60
 80022ee:	2205      	movs	r2, #5
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e0b5      	b.n	8002460 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3361      	adds	r3, #97	; 0x61
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d009      	beq.n	800231c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3361      	adds	r3, #97	; 0x61
 8002316:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002318:	2b08      	cmp	r3, #8
 800231a:	d150      	bne.n	80023be <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	335c      	adds	r3, #92	; 0x5c
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	202c      	movs	r0, #44	; 0x2c
 8002334:	fb00 f303 	mul.w	r3, r0, r3
 8002338:	440b      	add	r3, r1
 800233a:	335c      	adds	r3, #92	; 0x5c
 800233c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	335c      	adds	r3, #92	; 0x5c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d912      	bls.n	8002378 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	335c      	adds	r3, #92	; 0x5c
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3360      	adds	r3, #96	; 0x60
 8002372:	2204      	movs	r2, #4
 8002374:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002376:	e073      	b.n	8002460 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3360      	adds	r3, #96	; 0x60
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023a0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023a8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023bc:	e050      	b.n	8002460 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3361      	adds	r3, #97	; 0x61
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d122      	bne.n	8002418 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3360      	adds	r3, #96	; 0x60
 80023e0:	2202      	movs	r2, #2
 80023e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002402:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e023      	b.n	8002460 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3361      	adds	r3, #97	; 0x61
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b07      	cmp	r3, #7
 800242a:	d119      	bne.n	8002460 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	335c      	adds	r3, #92	; 0x5c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	202c      	movs	r0, #44	; 0x2c
 8002444:	fb00 f303 	mul.w	r3, r0, r3
 8002448:	440b      	add	r3, r1
 800244a:	335c      	adds	r3, #92	; 0x5c
 800244c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3360      	adds	r3, #96	; 0x60
 800245c:	2204      	movs	r2, #4
 800245e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	461a      	mov	r2, r3
 800246e:	2302      	movs	r3, #2
 8002470:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	b2d9      	uxtb	r1, r3
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	202c      	movs	r0, #44	; 0x2c
 800247c:	fb00 f303 	mul.w	r3, r0, r3
 8002480:	4413      	add	r3, r2
 8002482:	3360      	adds	r3, #96	; 0x60
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f006 fa99 	bl	80089c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800248e:	e061      	b.n	8002554 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d156      	bne.n	8002554 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	333f      	adds	r3, #63	; 0x3f
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d111      	bne.n	80024de <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	335c      	adds	r3, #92	; 0x5c
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 ffcf 	bl	800647a <USB_HC_Halt>
 80024dc:	e031      	b.n	8002542 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	333f      	adds	r3, #63	; 0x3f
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	333f      	adds	r3, #63	; 0x3f
 8002500:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002502:	2b02      	cmp	r3, #2
 8002504:	d11d      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	335c      	adds	r3, #92	; 0x5c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d110      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3361      	adds	r3, #97	; 0x61
 800252e:	2203      	movs	r2, #3
 8002530:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f003 ff9c 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	461a      	mov	r2, r3
 8002550:	2310      	movs	r3, #16
 8002552:	6093      	str	r3, [r2, #8]
}
 8002554:	bf00      	nop
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b04      	cmp	r3, #4
 800258a:	d11a      	bne.n	80025c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	2304      	movs	r3, #4
 800259c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3361      	adds	r3, #97	; 0x61
 80025ac:	2206      	movs	r2, #6
 80025ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 ff5d 	bl	800647a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80025c0:	e331      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d12e      	bne.n	8002636 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2320      	movs	r3, #32
 80025e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	333d      	adds	r3, #61	; 0x3d
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	f040 8313 	bne.w	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	333d      	adds	r3, #61	; 0x3d
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	3360      	adds	r3, #96	; 0x60
 8002620:	2202      	movs	r2, #2
 8002622:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f003 ff23 	bl	800647a <USB_HC_Halt>
}
 8002634:	e2f7      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800264c:	d112      	bne.n	8002674 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002660:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f003 ff04 	bl	800647a <USB_HC_Halt>
}
 8002672:	e2d8      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d140      	bne.n	800270c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d111      	bne.n	80026d6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333d      	adds	r3, #61	; 0x3d
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	461a      	mov	r2, r3
 80026d2:	2340      	movs	r3, #64	; 0x40
 80026d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	2301      	movs	r3, #1
 80026e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3361      	adds	r3, #97	; 0x61
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f003 feb8 	bl	800647a <USB_HC_Halt>
}
 800270a:	e28c      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d12c      	bne.n	800277c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3361      	adds	r3, #97	; 0x61
 8002730:	2204      	movs	r2, #4
 8002732:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	333d      	adds	r3, #61	; 0x3d
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	335c      	adds	r3, #92	; 0x5c
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fe89 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	2340      	movs	r3, #64	; 0x40
 8002778:	6093      	str	r3, [r2, #8]
}
 800277a:	e254      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b08      	cmp	r3, #8
 8002790:	d11a      	bne.n	80027c8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	461a      	mov	r2, r3
 80027a0:	2308      	movs	r3, #8
 80027a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3361      	adds	r3, #97	; 0x61
 80027b2:	2205      	movs	r2, #5
 80027b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 fe5a 	bl	800647a <USB_HC_Halt>
}
 80027c6:	e22e      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d140      	bne.n	8002860 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	335c      	adds	r3, #92	; 0x5c
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3361      	adds	r3, #97	; 0x61
 80027fe:	2203      	movs	r2, #3
 8002800:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	333d      	adds	r3, #61	; 0x3d
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d112      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	333c      	adds	r3, #60	; 0x3c
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d108      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	333d      	adds	r3, #61	; 0x3d
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fe17 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	461a      	mov	r2, r3
 800285a:	2310      	movs	r3, #16
 800285c:	6093      	str	r3, [r2, #8]
}
 800285e:	e1e2      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b80      	cmp	r3, #128	; 0x80
 8002874:	d164      	bne.n	8002940 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d111      	bne.n	80028a2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3361      	adds	r3, #97	; 0x61
 800288c:	2206      	movs	r2, #6
 800288e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f003 fded 	bl	800647a <USB_HC_Halt>
 80028a0:	e044      	b.n	800292c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	335c      	adds	r3, #92	; 0x5c
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	202c      	movs	r0, #44	; 0x2c
 80028ba:	fb00 f303 	mul.w	r3, r0, r3
 80028be:	440b      	add	r3, r1
 80028c0:	335c      	adds	r3, #92	; 0x5c
 80028c2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	335c      	adds	r3, #92	; 0x5c
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d920      	bls.n	800291a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	335c      	adds	r3, #92	; 0x5c
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3360      	adds	r3, #96	; 0x60
 80028f8:	2204      	movs	r2, #4
 80028fa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	b2d9      	uxtb	r1, r3
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	202c      	movs	r0, #44	; 0x2c
 8002906:	fb00 f303 	mul.w	r3, r0, r3
 800290a:	4413      	add	r3, r2
 800290c:	3360      	adds	r3, #96	; 0x60
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f006 f854 	bl	80089c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002918:	e008      	b.n	800292c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3360      	adds	r3, #96	; 0x60
 8002928:	2202      	movs	r2, #2
 800292a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	461a      	mov	r2, r3
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	6093      	str	r3, [r2, #8]
}
 800293e:	e172      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002956:	d11b      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3361      	adds	r3, #97	; 0x61
 8002966:	2208      	movs	r2, #8
 8002968:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fd80 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298c:	6093      	str	r3, [r2, #8]
}
 800298e:	e14a      	b.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	f040 813f 	bne.w	8002c26 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3361      	adds	r3, #97	; 0x61
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d17d      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3360      	adds	r3, #96	; 0x60
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	333f      	adds	r3, #63	; 0x3f
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d00a      	beq.n	80029f8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	333f      	adds	r3, #63	; 0x3f
 80029f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	f040 8100 	bne.w	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d113      	bne.n	8002a28 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3355      	adds	r3, #85	; 0x55
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f083 0301 	eor.w	r3, r3, #1
 8002a14:	b2d8      	uxtb	r0, r3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3355      	adds	r3, #85	; 0x55
 8002a24:	4602      	mov	r2, r0
 8002a26:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 80e3 	bne.w	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	334c      	adds	r3, #76	; 0x4c
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80d8 	beq.w	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	334c      	adds	r3, #76	; 0x4c
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	202c      	movs	r0, #44	; 0x2c
 8002a5e:	fb00 f202 	mul.w	r2, r0, r2
 8002a62:	440a      	add	r2, r1
 8002a64:	3240      	adds	r2, #64	; 0x40
 8002a66:	8812      	ldrh	r2, [r2, #0]
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	202c      	movs	r0, #44	; 0x2c
 8002a72:	fb00 f202 	mul.w	r2, r0, r2
 8002a76:	440a      	add	r2, r1
 8002a78:	3240      	adds	r2, #64	; 0x40
 8002a7a:	8812      	ldrh	r2, [r2, #0]
 8002a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80b5 	beq.w	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3355      	adds	r3, #85	; 0x55
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2d8      	uxtb	r0, r3
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3355      	adds	r3, #85	; 0x55
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	e09f      	b.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3361      	adds	r3, #97	; 0x61
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d109      	bne.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3360      	adds	r3, #96	; 0x60
 8002ada:	2202      	movs	r2, #2
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e08b      	b.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3361      	adds	r3, #97	; 0x61
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d109      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3360      	adds	r3, #96	; 0x60
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e077      	b.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3361      	adds	r3, #97	; 0x61
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d109      	bne.n	8002b30 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3360      	adds	r3, #96	; 0x60
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e063      	b.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3361      	adds	r3, #97	; 0x61
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	d009      	beq.n	8002b58 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3361      	adds	r3, #97	; 0x61
 8002b52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d14f      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	335c      	adds	r3, #92	; 0x5c
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	202c      	movs	r0, #44	; 0x2c
 8002b70:	fb00 f303 	mul.w	r3, r0, r3
 8002b74:	440b      	add	r3, r1
 8002b76:	335c      	adds	r3, #92	; 0x5c
 8002b78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	335c      	adds	r3, #92	; 0x5c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d912      	bls.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	335c      	adds	r3, #92	; 0x5c
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	2204      	movs	r2, #4
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e021      	b.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3360      	adds	r3, #96	; 0x60
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bdc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	461a      	mov	r2, r3
 8002c06:	2302      	movs	r3, #2
 8002c08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	b2d9      	uxtb	r1, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	202c      	movs	r0, #44	; 0x2c
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3360      	adds	r3, #96	; 0x60
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f005 fecd 	bl	80089c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b08a      	sub	sp, #40	; 0x28
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	0c5b      	lsrs	r3, r3, #17
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c62:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d004      	beq.n	8002c74 <HCD_RXQLVL_IRQHandler+0x46>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	f000 80a9 	beq.w	8002dc4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c72:	e0aa      	b.n	8002dca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a6 	beq.w	8002dc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3344      	adds	r3, #68	; 0x44
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 809b 	beq.w	8002dc8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3350      	adds	r3, #80	; 0x50
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	202c      	movs	r0, #44	; 0x2c
 8002cac:	fb00 f303 	mul.w	r3, r0, r3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	334c      	adds	r3, #76	; 0x4c
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d87a      	bhi.n	8002db0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3344      	adds	r3, #68	; 0x44
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f002 ff28 	bl	8005b28 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3344      	adds	r3, #68	; 0x44
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	441a      	add	r2, r3
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	202c      	movs	r0, #44	; 0x2c
 8002cf2:	fb00 f303 	mul.w	r3, r0, r3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3344      	adds	r3, #68	; 0x44
 8002cfa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3350      	adds	r3, #80	; 0x50
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	441a      	add	r2, r3
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	202c      	movs	r0, #44	; 0x2c
 8002d16:	fb00 f303 	mul.w	r3, r0, r3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3350      	adds	r3, #80	; 0x50
 8002d1e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	0cdb      	lsrs	r3, r3, #19
 8002d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d34:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3340      	adds	r3, #64	; 0x40
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d13c      	bne.n	8002dc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d039      	beq.n	8002dc8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3354      	adds	r3, #84	; 0x54
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	f083 0301 	eor.w	r3, r3, #1
 8002d9a:	b2d8      	uxtb	r0, r3
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3354      	adds	r3, #84	; 0x54
 8002daa:	4602      	mov	r2, r0
 8002dac:	701a      	strb	r2, [r3, #0]
      break;
 8002dae:	e00b      	b.n	8002dc8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3360      	adds	r3, #96	; 0x60
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	701a      	strb	r2, [r3, #0]
      break;
 8002dc2:	e001      	b.n	8002dc8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002dc8:	bf00      	nop
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dfe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d10b      	bne.n	8002e22 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f005 fdb7 	bl	8008988 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d132      	bne.n	8002e92 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f043 0308 	orr.w	r3, r3, #8
 8002e32:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d126      	bne.n	8002e8c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d113      	bne.n	8002e6e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e50:	d106      	bne.n	8002e60 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2102      	movs	r1, #2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 ffd3 	bl	8005e04 <USB_InitFSLSPClkSel>
 8002e5e:	e011      	b.n	8002e84 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 ffcc 	bl	8005e04 <USB_InitFSLSPClkSel>
 8002e6c:	e00a      	b.n	8002e84 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d106      	bne.n	8002e84 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e82:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f005 fda9 	bl	80089dc <HAL_HCD_PortEnabled_Callback>
 8002e8a:	e002      	b.n	8002e92 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f005 fdb3 	bl	80089f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d103      	bne.n	8002ea4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f043 0320 	orr.w	r3, r3, #32
 8002ea2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e12b      	b.n	8003122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fde0 	bl	8000aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	; 0x24
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f001 fa20 	bl	8004360 <HAL_RCC_GetPCLK1Freq>
 8002f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4a81      	ldr	r2, [pc, #516]	; (800312c <HAL_I2C_Init+0x274>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d807      	bhi.n	8002f3c <HAL_I2C_Init+0x84>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a80      	ldr	r2, [pc, #512]	; (8003130 <HAL_I2C_Init+0x278>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	bf94      	ite	ls
 8002f34:	2301      	movls	r3, #1
 8002f36:	2300      	movhi	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e006      	b.n	8002f4a <HAL_I2C_Init+0x92>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a7d      	ldr	r2, [pc, #500]	; (8003134 <HAL_I2C_Init+0x27c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	bf94      	ite	ls
 8002f44:	2301      	movls	r3, #1
 8002f46:	2300      	movhi	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e0e7      	b.n	8003122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4a78      	ldr	r2, [pc, #480]	; (8003138 <HAL_I2C_Init+0x280>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	0c9b      	lsrs	r3, r3, #18
 8002f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a6a      	ldr	r2, [pc, #424]	; (800312c <HAL_I2C_Init+0x274>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d802      	bhi.n	8002f8c <HAL_I2C_Init+0xd4>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	e009      	b.n	8002fa0 <HAL_I2C_Init+0xe8>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	4a69      	ldr	r2, [pc, #420]	; (800313c <HAL_I2C_Init+0x284>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	099b      	lsrs	r3, r3, #6
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	495c      	ldr	r1, [pc, #368]	; (800312c <HAL_I2C_Init+0x274>)
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	d819      	bhi.n	8002ff4 <HAL_I2C_Init+0x13c>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e59      	subs	r1, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fce:	1c59      	adds	r1, r3, #1
 8002fd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_I2C_Init+0x138>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1e59      	subs	r1, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fee:	e051      	b.n	8003094 <HAL_I2C_Init+0x1dc>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	e04f      	b.n	8003094 <HAL_I2C_Init+0x1dc>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d111      	bne.n	8003020 <HAL_I2C_Init+0x168>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	440b      	add	r3, r1
 800300a:	fbb0 f3f3 	udiv	r3, r0, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e012      	b.n	8003046 <HAL_I2C_Init+0x18e>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	0099      	lsls	r1, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Init+0x196>
 800304a:	2301      	movs	r3, #1
 800304c:	e022      	b.n	8003094 <HAL_I2C_Init+0x1dc>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10e      	bne.n	8003074 <HAL_I2C_Init+0x1bc>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1e58      	subs	r0, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	440b      	add	r3, r1
 8003064:	fbb0 f3f3 	udiv	r3, r0, r3
 8003068:	3301      	adds	r3, #1
 800306a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003072:	e00f      	b.n	8003094 <HAL_I2C_Init+0x1dc>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	0099      	lsls	r1, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	6809      	ldr	r1, [r1, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6911      	ldr	r1, [r2, #16]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	000186a0 	.word	0x000186a0
 8003130:	001e847f 	.word	0x001e847f
 8003134:	003d08ff 	.word	0x003d08ff
 8003138:	431bde83 	.word	0x431bde83
 800313c:	10624dd3 	.word	0x10624dd3

08003140 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e128      	b.n	80033a4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a90      	ldr	r2, [pc, #576]	; (80033ac <HAL_I2S_Init+0x26c>)
 800316a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fd fce1 	bl	8000b34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003188:	f023 030f 	bic.w	r3, r3, #15
 800318c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2202      	movs	r2, #2
 8003194:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d060      	beq.n	8003260 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031a6:	2310      	movs	r3, #16
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e001      	b.n	80031b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031ac:	2320      	movs	r3, #32
 80031ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d802      	bhi.n	80031be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031be:	2001      	movs	r0, #1
 80031c0:	f001 f9d8 	bl	8004574 <HAL_RCCEx_GetPeriphCLKFreq>
 80031c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ce:	d125      	bne.n	800321c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	461a      	mov	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	3305      	adds	r3, #5
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e01f      	b.n	800323a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	fbb2 f2f3 	udiv	r2, r2, r3
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	461a      	mov	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	3305      	adds	r3, #5
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e00e      	b.n	800323a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	fbb2 f2f3 	udiv	r2, r2, r3
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	461a      	mov	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	fbb2 f3f3 	udiv	r3, r2, r3
 8003236:	3305      	adds	r3, #5
 8003238:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4a5c      	ldr	r2, [pc, #368]	; (80033b0 <HAL_I2S_Init+0x270>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	e003      	b.n	8003268 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003260:	2302      	movs	r3, #2
 8003262:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d902      	bls.n	8003274 <HAL_I2S_Init+0x134>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2bff      	cmp	r3, #255	; 0xff
 8003272:	d907      	bls.n	8003284 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e08f      	b.n	80033a4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	ea42 0103 	orr.w	r1, r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	430a      	orrs	r2, r1
 8003296:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032a2:	f023 030f 	bic.w	r3, r3, #15
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6851      	ldr	r1, [r2, #4]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6892      	ldr	r2, [r2, #8]
 80032ae:	4311      	orrs	r1, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68d2      	ldr	r2, [r2, #12]
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6992      	ldr	r2, [r2, #24]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d161      	bne.n	8003394 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a38      	ldr	r2, [pc, #224]	; (80033b4 <HAL_I2S_Init+0x274>)
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a37      	ldr	r2, [pc, #220]	; (80033b8 <HAL_I2S_Init+0x278>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_I2S_Init+0x1a4>
 80032e0:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_I2S_Init+0x27c>)
 80032e2:	e001      	b.n	80032e8 <HAL_I2S_Init+0x1a8>
 80032e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	4932      	ldr	r1, [pc, #200]	; (80033b8 <HAL_I2S_Init+0x278>)
 80032f0:	428a      	cmp	r2, r1
 80032f2:	d101      	bne.n	80032f8 <HAL_I2S_Init+0x1b8>
 80032f4:	4a31      	ldr	r2, [pc, #196]	; (80033bc <HAL_I2S_Init+0x27c>)
 80032f6:	e001      	b.n	80032fc <HAL_I2S_Init+0x1bc>
 80032f8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2b      	ldr	r2, [pc, #172]	; (80033b8 <HAL_I2S_Init+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d101      	bne.n	8003314 <HAL_I2S_Init+0x1d4>
 8003310:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <HAL_I2S_Init+0x27c>)
 8003312:	e001      	b.n	8003318 <HAL_I2S_Init+0x1d8>
 8003314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003318:	2202      	movs	r2, #2
 800331a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <HAL_I2S_Init+0x278>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_I2S_Init+0x1ea>
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <HAL_I2S_Init+0x27c>)
 8003328:	e001      	b.n	800332e <HAL_I2S_Init+0x1ee>
 800332a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333a:	d003      	beq.n	8003344 <HAL_I2S_Init+0x204>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e001      	b.n	8003350 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800335a:	4313      	orrs	r3, r2
 800335c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003364:	4313      	orrs	r3, r2
 8003366:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800336e:	4313      	orrs	r3, r2
 8003370:	b29a      	uxth	r2, r3
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	4313      	orrs	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800337c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <HAL_I2S_Init+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_I2S_Init+0x24c>
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <HAL_I2S_Init+0x27c>)
 800338a:	e001      	b.n	8003390 <HAL_I2S_Init+0x250>
 800338c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003390:	897a      	ldrh	r2, [r7, #10]
 8003392:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	080034b7 	.word	0x080034b7
 80033b0:	cccccccd 	.word	0xcccccccd
 80033b4:	080035cd 	.word	0x080035cd
 80033b8:	40003800 	.word	0x40003800
 80033bc:	40003400 	.word	0x40003400

080033c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	881a      	ldrh	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	1c9a      	adds	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003440:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff ffb8 	bl	80033c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	b292      	uxth	r2, r2
 800346c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	1c9a      	adds	r2, r3, #2
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10e      	bne.n	80034ae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800349e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff93 	bl	80033d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d13a      	bne.n	8003548 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d109      	bne.n	80034f0 <I2S_IRQHandler+0x3a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d102      	bne.n	80034f0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ffb4 	bl	8003458 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d126      	bne.n	8003548 <I2S_IRQHandler+0x92>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b20      	cmp	r3, #32
 8003506:	d11f      	bne.n	8003548 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003516:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f043 0202 	orr.w	r2, r3, #2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ff50 	bl	80033e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b03      	cmp	r3, #3
 8003552:	d136      	bne.n	80035c2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d109      	bne.n	8003572 <I2S_IRQHandler+0xbc>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d102      	bne.n	8003572 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff45 	bl	80033fc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b08      	cmp	r3, #8
 800357a:	d122      	bne.n	80035c2 <I2S_IRQHandler+0x10c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b20      	cmp	r3, #32
 8003588:	d11b      	bne.n	80035c2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003598:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff13 	bl	80033e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a92      	ldr	r2, [pc, #584]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035e6:	4b92      	ldr	r3, [pc, #584]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e8:	e001      	b.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a8b      	ldr	r2, [pc, #556]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003604:	4b8a      	ldr	r3, [pc, #552]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003606:	e001      	b.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003608:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003618:	d004      	beq.n	8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 8099 	bne.w	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d107      	bne.n	800363e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f925 	bl	8003888 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d107      	bne.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9c8 	bl	80039e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d13a      	bne.n	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d035      	beq.n	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6e      	ldr	r2, [pc, #440]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003676:	4b6e      	ldr	r3, [pc, #440]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003678:	e001      	b.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4969      	ldr	r1, [pc, #420]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003686:	428b      	cmp	r3, r1
 8003688:	d101      	bne.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800368a:	4b69      	ldr	r3, [pc, #420]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800368c:	e001      	b.n	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800368e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003692:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003696:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f043 0202 	orr.w	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fe88 	bl	80033e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b08      	cmp	r3, #8
 80036e0:	f040 80c3 	bne.w	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80bd 	beq.w	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a49      	ldr	r2, [pc, #292]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800370a:	4b49      	ldr	r3, [pc, #292]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800370c:	e001      	b.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800370e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4944      	ldr	r1, [pc, #272]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371a:	428b      	cmp	r3, r1
 800371c:	d101      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800371e:	4b44      	ldr	r3, [pc, #272]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003720:	e001      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800372a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fe4a 	bl	80033e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003754:	e089      	b.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d107      	bne.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8be 	bl	80038ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d107      	bne.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f8fd 	bl	8003984 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d12f      	bne.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02a      	beq.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ba:	e001      	b.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4919      	ldr	r1, [pc, #100]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c8:	428b      	cmp	r3, r1
 80037ca:	d101      	bne.n	80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ce:	e001      	b.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fdfa 	bl	80033e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d136      	bne.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d031      	beq.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a07      	ldr	r2, [pc, #28]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003814:	e001      	b.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4902      	ldr	r1, [pc, #8]	; (800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003822:	428b      	cmp	r3, r1
 8003824:	d106      	bne.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003826:	4b02      	ldr	r3, [pc, #8]	; (8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003828:	e006      	b.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800382a:	bf00      	nop
 800382c:	40003800 	.word	0x40003800
 8003830:	40003400 	.word	0x40003400
 8003834:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003838:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800383c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff fdc0 	bl	80033e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003868:	e000      	b.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800386a:	bf00      	nop
}
 800386c:	bf00      	nop
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	1c99      	adds	r1, r3, #2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6251      	str	r1, [r2, #36]	; 0x24
 800389a:	881a      	ldrh	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d113      	bne.n	80038e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ffc9 	bl	8003874 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	1c99      	adds	r1, r3, #2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6251      	str	r1, [r2, #36]	; 0x24
 80038fe:	8819      	ldrh	r1, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <I2SEx_TxISR_I2SExt+0x90>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <I2SEx_TxISR_I2SExt+0x22>
 800390a:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <I2SEx_TxISR_I2SExt+0x94>)
 800390c:	e001      	b.n	8003912 <I2SEx_TxISR_I2SExt+0x26>
 800390e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003912:	460a      	mov	r2, r1
 8003914:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d121      	bne.n	8003972 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <I2SEx_TxISR_I2SExt+0x90>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <I2SEx_TxISR_I2SExt+0x50>
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <I2SEx_TxISR_I2SExt+0x94>)
 800393a:	e001      	b.n	8003940 <I2SEx_TxISR_I2SExt+0x54>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	490d      	ldr	r1, [pc, #52]	; (800397c <I2SEx_TxISR_I2SExt+0x90>)
 8003948:	428b      	cmp	r3, r1
 800394a:	d101      	bne.n	8003950 <I2SEx_TxISR_I2SExt+0x64>
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <I2SEx_TxISR_I2SExt+0x94>)
 800394e:	e001      	b.n	8003954 <I2SEx_TxISR_I2SExt+0x68>
 8003950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003954:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003958:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff81 	bl	8003874 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40003800 	.word	0x40003800
 8003980:	40003400 	.word	0x40003400

08003984 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68d8      	ldr	r0, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	1c99      	adds	r1, r3, #2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800399c:	b282      	uxth	r2, r0
 800399e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d113      	bne.n	80039e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ff4a 	bl	8003874 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <I2SEx_RxISR_I2SExt+0x90>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <I2SEx_RxISR_I2SExt+0x16>
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <I2SEx_RxISR_I2SExt+0x94>)
 80039fc:	e001      	b.n	8003a02 <I2SEx_RxISR_I2SExt+0x1a>
 80039fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a02:	68d8      	ldr	r0, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	1c99      	adds	r1, r3, #2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a0e:	b282      	uxth	r2, r0
 8003a10:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d121      	bne.n	8003a6e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <I2SEx_RxISR_I2SExt+0x90>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <I2SEx_RxISR_I2SExt+0x50>
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <I2SEx_RxISR_I2SExt+0x94>)
 8003a36:	e001      	b.n	8003a3c <I2SEx_RxISR_I2SExt+0x54>
 8003a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	490d      	ldr	r1, [pc, #52]	; (8003a78 <I2SEx_RxISR_I2SExt+0x90>)
 8003a44:	428b      	cmp	r3, r1
 8003a46:	d101      	bne.n	8003a4c <I2SEx_RxISR_I2SExt+0x64>
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <I2SEx_RxISR_I2SExt+0x94>)
 8003a4a:	e001      	b.n	8003a50 <I2SEx_RxISR_I2SExt+0x68>
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a54:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff03 	bl	8003874 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40003800 	.word	0x40003800
 8003a7c:	40003400 	.word	0x40003400

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e267      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d075      	beq.n	8003b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a9e:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aaa:	4b85      	ldr	r3, [pc, #532]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d112      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4b82      	ldr	r3, [pc, #520]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b7e      	ldr	r3, [pc, #504]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05b      	beq.n	8003b88 <HAL_RCC_OscConfig+0x108>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d157      	bne.n	8003b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e242      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_OscConfig+0x74>
 8003ae6:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a75      	ldr	r2, [pc, #468]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e01d      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x98>
 8003afe:	4b70      	ldr	r3, [pc, #448]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6f      	ldr	r2, [pc, #444]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b6d      	ldr	r3, [pc, #436]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a6c      	ldr	r2, [pc, #432]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003b18:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a68      	ldr	r2, [pc, #416]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b66      	ldr	r3, [pc, #408]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a65      	ldr	r2, [pc, #404]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fd fa2a 	bl	8000f90 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fd fa26 	bl	8000f90 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e207      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b5b      	ldr	r3, [pc, #364]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0xc0>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fd fa16 	bl	8000f90 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fd fa12 	bl	8000f90 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e1f3      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0xe8>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d063      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b96:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d11c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x152>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e1c7      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4937      	ldr	r1, [pc, #220]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	e03a      	b.n	8003c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf0:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <HAL_RCC_OscConfig+0x244>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fd f9cb 	bl	8000f90 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7fd f9c7 	bl	8000f90 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e1a8      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4925      	ldr	r1, [pc, #148]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_OscConfig+0x244>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd f9aa 	bl	8000f90 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fd f9a6 	bl	8000f90 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e187      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d036      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_RCC_OscConfig+0x248>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd f98a 	bl	8000f90 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fd f986 	bl	8000f90 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e167      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_OscConfig+0x240>)
 8003c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x200>
 8003c9e:	e01b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_OscConfig+0x248>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fd f973 	bl	8000f90 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cac:	e00e      	b.n	8003ccc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cae:	f7fd f96f 	bl	8000f90 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d907      	bls.n	8003ccc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e150      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	42470000 	.word	0x42470000
 8003cc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ccc:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ea      	bne.n	8003cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8097 	beq.w	8003e14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b81      	ldr	r3, [pc, #516]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	4b7d      	ldr	r3, [pc, #500]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	4a7c      	ldr	r2, [pc, #496]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6413      	str	r3, [r2, #64]	; 0x40
 8003d06:	4b7a      	ldr	r3, [pc, #488]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	4b77      	ldr	r3, [pc, #476]	; (8003ef4 <HAL_RCC_OscConfig+0x474>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d118      	bne.n	8003d54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d22:	4b74      	ldr	r3, [pc, #464]	; (8003ef4 <HAL_RCC_OscConfig+0x474>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a73      	ldr	r2, [pc, #460]	; (8003ef4 <HAL_RCC_OscConfig+0x474>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2e:	f7fd f92f 	bl	8000f90 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fd f92b 	bl	8000f90 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e10c      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <HAL_RCC_OscConfig+0x474>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x2ea>
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a63      	ldr	r2, [pc, #396]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	e01c      	b.n	8003da4 <HAL_RCC_OscConfig+0x324>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x30c>
 8003d72:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a5e      	ldr	r2, [pc, #376]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a5b      	ldr	r2, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0x324>
 8003d8c:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a54      	ldr	r2, [pc, #336]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 0304 	bic.w	r3, r3, #4
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd f8f0 	bl	8000f90 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db4:	f7fd f8ec 	bl	8000f90 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0cb      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ee      	beq.n	8003db4 <HAL_RCC_OscConfig+0x334>
 8003dd6:	e014      	b.n	8003e02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd8:	f7fd f8da 	bl	8000f90 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f7fd f8d6 	bl	8000f90 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e0b5      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df6:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ee      	bne.n	8003de0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e08:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	4a38      	ldr	r2, [pc, #224]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a1 	beq.w	8003f60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e1e:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d05c      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d141      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <HAL_RCC_OscConfig+0x478>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e38:	f7fd f8aa 	bl	8000f90 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd f8a6 	bl	8000f90 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e087      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	019b      	lsls	r3, r3, #6
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	3b01      	subs	r3, #1
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	491b      	ldr	r1, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_RCC_OscConfig+0x478>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fd f87f 	bl	8000f90 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fd f87b 	bl	8000f90 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e05c      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x416>
 8003eb4:	e054      	b.n	8003f60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_RCC_OscConfig+0x478>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fd f868 	bl	8000f90 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fd f864 	bl	8000f90 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e045      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x444>
 8003ee2:	e03d      	b.n	8003f60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e038      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_RCC_OscConfig+0x4ec>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d028      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d121      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d11a      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d111      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	3b01      	subs	r3, #1
 8003f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800

08003f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0cc      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f84:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d90c      	bls.n	8003fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0b8      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc4:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a52      	ldr	r2, [pc, #328]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	494d      	ldr	r1, [pc, #308]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d044      	beq.n	8004090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d119      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e07f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d003      	beq.n	800402e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402a:	2b03      	cmp	r3, #3
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e06f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e067      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4934      	ldr	r1, [pc, #208]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004060:	f7fc ff96 	bl	8000f90 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	e00a      	b.n	800407e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7fc ff92 	bl	8000f90 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e04f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 020c 	and.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d1eb      	bne.n	8004068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d20c      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e032      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4916      	ldr	r1, [pc, #88]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040f6:	f000 f821 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	490a      	ldr	r1, [pc, #40]	; (8004130 <HAL_RCC_ClockConfig+0x1c0>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	4a09      	ldr	r2, [pc, #36]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc fef6 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023c00 	.word	0x40023c00
 800412c:	40023800 	.word	0x40023800
 8004130:	08009784 	.word	0x08009784
 8004134:	20000000 	.word	0x20000000
 8004138:	20000004 	.word	0x20000004

0800413c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004140:	b094      	sub	sp, #80	; 0x50
 8004142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	647b      	str	r3, [r7, #68]	; 0x44
 8004148:	2300      	movs	r3, #0
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414c:	2300      	movs	r3, #0
 800414e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004154:	4b79      	ldr	r3, [pc, #484]	; (800433c <HAL_RCC_GetSysClockFreq+0x200>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d00d      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x40>
 8004160:	2b08      	cmp	r3, #8
 8004162:	f200 80e1 	bhi.w	8004328 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x34>
 800416a:	2b04      	cmp	r3, #4
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x3a>
 800416e:	e0db      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b73      	ldr	r3, [pc, #460]	; (8004340 <HAL_RCC_GetSysClockFreq+0x204>)
 8004172:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004174:	e0db      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004176:	4b73      	ldr	r3, [pc, #460]	; (8004344 <HAL_RCC_GetSysClockFreq+0x208>)
 8004178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800417a:	e0d8      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800417c:	4b6f      	ldr	r3, [pc, #444]	; (800433c <HAL_RCC_GetSysClockFreq+0x200>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004186:	4b6d      	ldr	r3, [pc, #436]	; (800433c <HAL_RCC_GetSysClockFreq+0x200>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d063      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b6a      	ldr	r3, [pc, #424]	; (800433c <HAL_RCC_GetSysClockFreq+0x200>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	2200      	movs	r2, #0
 800419a:	63bb      	str	r3, [r7, #56]	; 0x38
 800419c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
 80041a6:	2300      	movs	r3, #0
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
 80041aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041ae:	4622      	mov	r2, r4
 80041b0:	462b      	mov	r3, r5
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	0159      	lsls	r1, r3, #5
 80041bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c0:	0150      	lsls	r0, r2, #5
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4621      	mov	r1, r4
 80041c8:	1a51      	subs	r1, r2, r1
 80041ca:	6139      	str	r1, [r7, #16]
 80041cc:	4629      	mov	r1, r5
 80041ce:	eb63 0301 	sbc.w	r3, r3, r1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041e0:	4659      	mov	r1, fp
 80041e2:	018b      	lsls	r3, r1, #6
 80041e4:	4651      	mov	r1, sl
 80041e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ea:	4651      	mov	r1, sl
 80041ec:	018a      	lsls	r2, r1, #6
 80041ee:	4651      	mov	r1, sl
 80041f0:	ebb2 0801 	subs.w	r8, r2, r1
 80041f4:	4659      	mov	r1, fp
 80041f6:	eb63 0901 	sbc.w	r9, r3, r1
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800420a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800420e:	4690      	mov	r8, r2
 8004210:	4699      	mov	r9, r3
 8004212:	4623      	mov	r3, r4
 8004214:	eb18 0303 	adds.w	r3, r8, r3
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	462b      	mov	r3, r5
 800421c:	eb49 0303 	adc.w	r3, r9, r3
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800422e:	4629      	mov	r1, r5
 8004230:	024b      	lsls	r3, r1, #9
 8004232:	4621      	mov	r1, r4
 8004234:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004238:	4621      	mov	r1, r4
 800423a:	024a      	lsls	r2, r1, #9
 800423c:	4610      	mov	r0, r2
 800423e:	4619      	mov	r1, r3
 8004240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004242:	2200      	movs	r2, #0
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
 8004246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004248:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800424c:	f7fc f818 	bl	8000280 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004258:	e058      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425a:	4b38      	ldr	r3, [pc, #224]	; (800433c <HAL_RCC_GetSysClockFreq+0x200>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	2200      	movs	r2, #0
 8004262:	4618      	mov	r0, r3
 8004264:	4611      	mov	r1, r2
 8004266:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004274:	4642      	mov	r2, r8
 8004276:	464b      	mov	r3, r9
 8004278:	f04f 0000 	mov.w	r0, #0
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	0159      	lsls	r1, r3, #5
 8004282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004286:	0150      	lsls	r0, r2, #5
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4641      	mov	r1, r8
 800428e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004292:	4649      	mov	r1, r9
 8004294:	eb63 0b01 	sbc.w	fp, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042ac:	ebb2 040a 	subs.w	r4, r2, sl
 80042b0:	eb63 050b 	sbc.w	r5, r3, fp
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	00eb      	lsls	r3, r5, #3
 80042be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c2:	00e2      	lsls	r2, r4, #3
 80042c4:	4614      	mov	r4, r2
 80042c6:	461d      	mov	r5, r3
 80042c8:	4643      	mov	r3, r8
 80042ca:	18e3      	adds	r3, r4, r3
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	464b      	mov	r3, r9
 80042d0:	eb45 0303 	adc.w	r3, r5, r3
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042e2:	4629      	mov	r1, r5
 80042e4:	028b      	lsls	r3, r1, #10
 80042e6:	4621      	mov	r1, r4
 80042e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042ec:	4621      	mov	r1, r4
 80042ee:	028a      	lsls	r2, r1, #10
 80042f0:	4610      	mov	r0, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f6:	2200      	movs	r2, #0
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	61fa      	str	r2, [r7, #28]
 80042fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004300:	f7fb ffbe 	bl	8000280 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4613      	mov	r3, r2
 800430a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_GetSysClockFreq+0x200>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800431c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800431e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004326:	e002      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetSysClockFreq+0x204>)
 800432a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800432e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004330:	4618      	mov	r0, r3
 8004332:	3750      	adds	r7, #80	; 0x50
 8004334:	46bd      	mov	sp, r7
 8004336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800
 8004340:	00f42400 	.word	0x00f42400
 8004344:	007a1200 	.word	0x007a1200

08004348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800434c:	4b03      	ldr	r3, [pc, #12]	; (800435c <HAL_RCC_GetHCLKFreq+0x14>)
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	4618      	mov	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20000000 	.word	0x20000000

08004360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004364:	f7ff fff0 	bl	8004348 <HAL_RCC_GetHCLKFreq>
 8004368:	4602      	mov	r2, r0
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	0a9b      	lsrs	r3, r3, #10
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004376:	5ccb      	ldrb	r3, [r1, r3]
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40023800 	.word	0x40023800
 8004384:	08009794 	.word	0x08009794

08004388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800438c:	f7ff ffdc 	bl	8004348 <HAL_RCC_GetHCLKFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	0b5b      	lsrs	r3, r3, #13
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	4903      	ldr	r1, [pc, #12]	; (80043ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40023800 	.word	0x40023800
 80043ac:	08009794 	.word	0x08009794

080043b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d035      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043d8:	4b62      	ldr	r3, [pc, #392]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043de:	f7fc fdd7 	bl	8000f90 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043e6:	f7fc fdd3 	bl	8000f90 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0b0      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043f8:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	019a      	lsls	r2, r3, #6
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	071b      	lsls	r3, r3, #28
 8004410:	4955      	ldr	r1, [pc, #340]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004418:	4b52      	ldr	r3, [pc, #328]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800441e:	f7fc fdb7 	bl	8000f90 <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004426:	f7fc fdb3 	bl	8000f90 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e090      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004438:	4b4b      	ldr	r3, [pc, #300]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8083 	beq.w	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b44      	ldr	r3, [pc, #272]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	4a43      	ldr	r2, [pc, #268]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004460:	6413      	str	r3, [r2, #64]	; 0x40
 8004462:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800446e:	4b3f      	ldr	r3, [pc, #252]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3e      	ldr	r2, [pc, #248]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800447a:	f7fc fd89 	bl	8000f90 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fc fd85 	bl	8000f90 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e062      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004494:	4b35      	ldr	r3, [pc, #212]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044a0:	4b31      	ldr	r3, [pc, #196]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d02f      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d028      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044be:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044c8:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ce:	4b28      	ldr	r3, [pc, #160]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044d4:	4a24      	ldr	r2, [pc, #144]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044da:	4b23      	ldr	r3, [pc, #140]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d114      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fc fd53 	bl	8000f90 <HAL_GetTick>
 80044ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ec:	e00a      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f7fc fd4f 	bl	8000f90 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d901      	bls.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e02a      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004504:	4b18      	ldr	r3, [pc, #96]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ee      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451c:	d10d      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	490d      	ldr	r1, [pc, #52]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]
 8004538:	e005      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004540:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004544:	6093      	str	r3, [r2, #8]
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004552:	4905      	ldr	r1, [pc, #20]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	42470068 	.word	0x42470068
 8004568:	40023800 	.word	0x40023800
 800456c:	40007000 	.word	0x40007000
 8004570:	42470e40 	.word	0x42470e40

08004574 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d13e      	bne.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d12f      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045a8:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045aa:	617b      	str	r3, [r7, #20]
          break;
 80045ac:	e02f      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ba:	d108      	bne.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e007      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045ce:	4b14      	ldr	r3, [pc, #80]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d6:	4a15      	ldr	r2, [pc, #84]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	fb02 f303 	mul.w	r3, r2, r3
 80045f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f8:	0f1b      	lsrs	r3, r3, #28
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
          break;
 8004606:	e002      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
          break;
 800460c:	bf00      	nop
        }
      }
      break;
 800460e:	bf00      	nop
    }
  }
  return frequency;
 8004610:	697b      	ldr	r3, [r7, #20]
}
 8004612:	4618      	mov	r0, r3
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	00bb8000 	.word	0x00bb8000
 8004628:	007a1200 	.word	0x007a1200
 800462c:	00f42400 	.word	0x00f42400

08004630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e07b      	b.n	800473a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d108      	bne.n	800465c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004652:	d009      	beq.n	8004668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	61da      	str	r2, [r3, #28]
 800465a:	e005      	b.n	8004668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fad6 	bl	8000c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	ea42 0103 	orr.w	r1, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	f003 0104 	and.w	r1, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0210 	and.w	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e03f      	b.n	80047d4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fc faab 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2224      	movs	r2, #36	; 0x24
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004784:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fde8 	bl	800535c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800479a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d17c      	bne.n	80048f6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_UART_Transmit+0x2c>
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e075      	b.n	80048f8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_UART_Transmit+0x3e>
 8004816:	2302      	movs	r3, #2
 8004818:	e06e      	b.n	80048f8 <HAL_UART_Transmit+0x11c>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2221      	movs	r2, #33	; 0x21
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004830:	f7fc fbae 	bl	8000f90 <HAL_GetTick>
 8004834:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	88fa      	ldrh	r2, [r7, #6]
 8004840:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d108      	bne.n	800485e <HAL_UART_Transmit+0x82>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	e003      	b.n	8004866 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800486e:	e02a      	b.n	80048c6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fb28 	bl	8004ed0 <UART_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e036      	b.n	80048f8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800489e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	3302      	adds	r3, #2
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	e007      	b.n	80048b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	3301      	adds	r3, #1
 80048b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1cf      	bne.n	8004870 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2200      	movs	r2, #0
 80048d8:	2140      	movs	r1, #64	; 0x40
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 faf8 	bl	8004ed0 <UART_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e006      	b.n	80048f8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	d11d      	bne.n	8004956 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_UART_Receive_IT+0x26>
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e016      	b.n	8004958 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_UART_Receive_IT+0x38>
 8004934:	2302      	movs	r3, #2
 8004936:	e00f      	b.n	8004958 <HAL_UART_Receive_IT+0x58>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	461a      	mov	r2, r3
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fb2d 	bl	8004fac <UART_Start_Receive_IT>
 8004952:	4603      	mov	r3, r0
 8004954:	e000      	b.n	8004958 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0ba      	sub	sp, #232	; 0xe8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800499e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_UART_IRQHandler+0x66>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fc11 	bl	80051e6 <UART_Receive_IT>
      return;
 80049c4:	e256      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80de 	beq.w	8004b8c <HAL_UART_IRQHandler+0x22c>
 80049d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80d1 	beq.w	8004b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_UART_IRQHandler+0xae>
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <HAL_UART_IRQHandler+0xd2>
 8004a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f043 0202 	orr.w	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_UART_IRQHandler+0xf6>
 8004a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0204 	orr.w	r2, r3, #4
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d011      	beq.n	8004a86 <HAL_UART_IRQHandler+0x126>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f043 0208 	orr.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 81ed 	beq.w	8004e6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_UART_IRQHandler+0x14e>
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fb9c 	bl	80051e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_UART_IRQHandler+0x17a>
 8004ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04f      	beq.n	8004b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 faa4 	bl	8005028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d141      	bne.n	8004b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3314      	adds	r3, #20
 8004af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1d9      	bne.n	8004aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4a7d      	ldr	r2, [pc, #500]	; (8004d3c <HAL_UART_IRQHandler+0x3dc>)
 8004b48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc fbcf 	bl	80012f2 <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00e      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f99a 	bl	8004ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00a      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f996 	bl	8004ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e006      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f992 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b86:	e170      	b.n	8004e6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	bf00      	nop
    return;
 8004b8a:	e16e      	b.n	8004e6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 814a 	bne.w	8004e2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8143 	beq.w	8004e2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 813c 	beq.w	8004e2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	f040 80b4 	bne.w	8004d40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8140 	beq.w	8004e6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	f080 8139 	bcs.w	8004e6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0e:	f000 8088 	beq.w	8004d22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1d9      	bne.n	8004c12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e1      	bne.n	8004c5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e3      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fc fa78 	bl	8001212 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f8c0 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d38:	e099      	b.n	8004e6e <HAL_UART_IRQHandler+0x50e>
 8004d3a:	bf00      	nop
 8004d3c:	080050ef 	.word	0x080050ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 808b 	beq.w	8004e72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8086 	beq.w	8004e72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e3      	bne.n	8004d66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	623b      	str	r3, [r7, #32]
   return(result);
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0310 	bic.w	r3, r3, #16
 8004dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e08:	61fa      	str	r2, [r7, #28]
 8004e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	617b      	str	r3, [r7, #20]
   return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e3      	bne.n	8004de4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f848 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e28:	e023      	b.n	8004e72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <HAL_UART_IRQHandler+0x4ea>
 8004e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f967 	bl	8005116 <UART_Transmit_IT>
    return;
 8004e48:	e014      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <HAL_UART_IRQHandler+0x514>
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9a7 	bl	80051b6 <UART_EndTransmit_IT>
    return;
 8004e68:	e004      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
    return;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
      return;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <HAL_UART_IRQHandler+0x514>
      return;
 8004e72:	bf00      	nop
  }
}
 8004e74:	37e8      	adds	r7, #232	; 0xe8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop

08004e7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b090      	sub	sp, #64	; 0x40
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee0:	e050      	b.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee8:	d04c      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ef0:	f7fc f84e 	bl	8000f90 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d241      	bcs.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f20:	637a      	str	r2, [r7, #52]	; 0x34
 8004f22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	613b      	str	r3, [r7, #16]
   return(result);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f54:	623a      	str	r2, [r7, #32]
 8004f56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	69f9      	ldr	r1, [r7, #28]
 8004f5a:	6a3a      	ldr	r2, [r7, #32]
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e00f      	b.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d09f      	beq.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3740      	adds	r7, #64	; 0x40
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	88fa      	ldrh	r2, [r7, #6]
 8004fc4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	88fa      	ldrh	r2, [r7, #6]
 8004fca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2222      	movs	r2, #34	; 0x22
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0201 	orr.w	r2, r2, #1
 8005008:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0220 	orr.w	r2, r2, #32
 8005018:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b095      	sub	sp, #84	; 0x54
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	330c      	adds	r3, #12
 800504e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005050:	643a      	str	r2, [r7, #64]	; 0x40
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e5      	bne.n	8005030 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3314      	adds	r3, #20
 800506a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	61fb      	str	r3, [r7, #28]
   return(result);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3314      	adds	r3, #20
 8005082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005084:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e5      	bne.n	8005064 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	2b01      	cmp	r3, #1
 800509e:	d119      	bne.n	80050d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f023 0310 	bic.w	r3, r3, #16
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c0:	61ba      	str	r2, [r7, #24]
 80050c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	613b      	str	r3, [r7, #16]
   return(result);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e5      	bne.n	80050a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050e2:	bf00      	nop
 80050e4:	3754      	adds	r7, #84	; 0x54
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fecb 	bl	8004ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b21      	cmp	r3, #33	; 0x21
 8005128:	d13e      	bne.n	80051a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005132:	d114      	bne.n	800515e <UART_Transmit_IT+0x48>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d110      	bne.n	800515e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005150:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	1c9a      	adds	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]
 800515c:	e008      	b.n	8005170 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6211      	str	r1, [r2, #32]
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4619      	mov	r1, r3
 800517e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10f      	bne.n	80051a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005192:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e000      	b.n	80051aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051a8:	2302      	movs	r3, #2
  }
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fe50 	bl	8004e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b08c      	sub	sp, #48	; 0x30
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b22      	cmp	r3, #34	; 0x22
 80051f8:	f040 80ab 	bne.w	8005352 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005204:	d117      	bne.n	8005236 <UART_Receive_IT+0x50>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d113      	bne.n	8005236 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005224:	b29a      	uxth	r2, r3
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	1c9a      	adds	r2, r3, #2
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	629a      	str	r2, [r3, #40]	; 0x28
 8005234:	e026      	b.n	8005284 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005248:	d007      	beq.n	800525a <UART_Receive_IT+0x74>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <UART_Receive_IT+0x82>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e008      	b.n	800527a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005274:	b2da      	uxtb	r2, r3
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29b      	uxth	r3, r3
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4619      	mov	r1, r3
 8005292:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005294:	2b00      	cmp	r3, #0
 8005296:	d15a      	bne.n	800534e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0220 	bic.w	r2, r2, #32
 80052a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d135      	bne.n	8005344 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	613b      	str	r3, [r7, #16]
   return(result);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f023 0310 	bic.w	r3, r3, #16
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	330c      	adds	r3, #12
 80052fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fe:	623a      	str	r2, [r7, #32]
 8005300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	69f9      	ldr	r1, [r7, #28]
 8005304:	6a3a      	ldr	r2, [r7, #32]
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	61bb      	str	r3, [r7, #24]
   return(result);
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e5      	bne.n	80052de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b10      	cmp	r3, #16
 800531e:	d10a      	bne.n	8005336 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff fdbb 	bl	8004eb8 <HAL_UARTEx_RxEventCallback>
 8005342:	e002      	b.n	800534a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fda3 	bl	8004e90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e002      	b.n	8005354 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3730      	adds	r7, #48	; 0x30
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800535c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005360:	b0c0      	sub	sp, #256	; 0x100
 8005362:	af00      	add	r7, sp, #0
 8005364:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	68d9      	ldr	r1, [r3, #12]
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	ea40 0301 	orr.w	r3, r0, r1
 8005384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	431a      	orrs	r2, r3
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	431a      	orrs	r2, r3
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053b4:	f021 010c 	bic.w	r1, r1, #12
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053c2:	430b      	orrs	r3, r1
 80053c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d6:	6999      	ldr	r1, [r3, #24]
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	ea40 0301 	orr.w	r3, r0, r1
 80053e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b8f      	ldr	r3, [pc, #572]	; (8005628 <UART_SetConfig+0x2cc>)
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d005      	beq.n	80053fc <UART_SetConfig+0xa0>
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b8d      	ldr	r3, [pc, #564]	; (800562c <UART_SetConfig+0x2d0>)
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d104      	bne.n	8005406 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053fc:	f7fe ffc4 	bl	8004388 <HAL_RCC_GetPCLK2Freq>
 8005400:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005404:	e003      	b.n	800540e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005406:	f7fe ffab 	bl	8004360 <HAL_RCC_GetPCLK1Freq>
 800540a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005418:	f040 810c 	bne.w	8005634 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800541c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005420:	2200      	movs	r2, #0
 8005422:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005426:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800542a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800542e:	4622      	mov	r2, r4
 8005430:	462b      	mov	r3, r5
 8005432:	1891      	adds	r1, r2, r2
 8005434:	65b9      	str	r1, [r7, #88]	; 0x58
 8005436:	415b      	adcs	r3, r3
 8005438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800543a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800543e:	4621      	mov	r1, r4
 8005440:	eb12 0801 	adds.w	r8, r2, r1
 8005444:	4629      	mov	r1, r5
 8005446:	eb43 0901 	adc.w	r9, r3, r1
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800545a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800545e:	4690      	mov	r8, r2
 8005460:	4699      	mov	r9, r3
 8005462:	4623      	mov	r3, r4
 8005464:	eb18 0303 	adds.w	r3, r8, r3
 8005468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800546c:	462b      	mov	r3, r5
 800546e:	eb49 0303 	adc.w	r3, r9, r3
 8005472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005482:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005486:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800548a:	460b      	mov	r3, r1
 800548c:	18db      	adds	r3, r3, r3
 800548e:	653b      	str	r3, [r7, #80]	; 0x50
 8005490:	4613      	mov	r3, r2
 8005492:	eb42 0303 	adc.w	r3, r2, r3
 8005496:	657b      	str	r3, [r7, #84]	; 0x54
 8005498:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800549c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054a0:	f7fa feee 	bl	8000280 <__aeabi_uldivmod>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4b61      	ldr	r3, [pc, #388]	; (8005630 <UART_SetConfig+0x2d4>)
 80054aa:	fba3 2302 	umull	r2, r3, r3, r2
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	011c      	lsls	r4, r3, #4
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	1891      	adds	r1, r2, r2
 80054ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80054cc:	415b      	adcs	r3, r3
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054d4:	4641      	mov	r1, r8
 80054d6:	eb12 0a01 	adds.w	sl, r2, r1
 80054da:	4649      	mov	r1, r9
 80054dc:	eb43 0b01 	adc.w	fp, r3, r1
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054f4:	4692      	mov	sl, r2
 80054f6:	469b      	mov	fp, r3
 80054f8:	4643      	mov	r3, r8
 80054fa:	eb1a 0303 	adds.w	r3, sl, r3
 80054fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005502:	464b      	mov	r3, r9
 8005504:	eb4b 0303 	adc.w	r3, fp, r3
 8005508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005518:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800551c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005520:	460b      	mov	r3, r1
 8005522:	18db      	adds	r3, r3, r3
 8005524:	643b      	str	r3, [r7, #64]	; 0x40
 8005526:	4613      	mov	r3, r2
 8005528:	eb42 0303 	adc.w	r3, r2, r3
 800552c:	647b      	str	r3, [r7, #68]	; 0x44
 800552e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005532:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005536:	f7fa fea3 	bl	8000280 <__aeabi_uldivmod>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4611      	mov	r1, r2
 8005540:	4b3b      	ldr	r3, [pc, #236]	; (8005630 <UART_SetConfig+0x2d4>)
 8005542:	fba3 2301 	umull	r2, r3, r3, r1
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	2264      	movs	r2, #100	; 0x64
 800554a:	fb02 f303 	mul.w	r3, r2, r3
 800554e:	1acb      	subs	r3, r1, r3
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005556:	4b36      	ldr	r3, [pc, #216]	; (8005630 <UART_SetConfig+0x2d4>)
 8005558:	fba3 2302 	umull	r2, r3, r3, r2
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005564:	441c      	add	r4, r3
 8005566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005570:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005574:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	1891      	adds	r1, r2, r2
 800557e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005580:	415b      	adcs	r3, r3
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005588:	4641      	mov	r1, r8
 800558a:	1851      	adds	r1, r2, r1
 800558c:	6339      	str	r1, [r7, #48]	; 0x30
 800558e:	4649      	mov	r1, r9
 8005590:	414b      	adcs	r3, r1
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055a0:	4659      	mov	r1, fp
 80055a2:	00cb      	lsls	r3, r1, #3
 80055a4:	4651      	mov	r1, sl
 80055a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055aa:	4651      	mov	r1, sl
 80055ac:	00ca      	lsls	r2, r1, #3
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	4642      	mov	r2, r8
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055bc:	464b      	mov	r3, r9
 80055be:	460a      	mov	r2, r1
 80055c0:	eb42 0303 	adc.w	r3, r2, r3
 80055c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055dc:	460b      	mov	r3, r1
 80055de:	18db      	adds	r3, r3, r3
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e2:	4613      	mov	r3, r2
 80055e4:	eb42 0303 	adc.w	r3, r2, r3
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055f2:	f7fa fe45 	bl	8000280 <__aeabi_uldivmod>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <UART_SetConfig+0x2d4>)
 80055fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	2164      	movs	r1, #100	; 0x64
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	3332      	adds	r3, #50	; 0x32
 800560e:	4a08      	ldr	r2, [pc, #32]	; (8005630 <UART_SetConfig+0x2d4>)
 8005610:	fba2 2303 	umull	r2, r3, r2, r3
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	f003 0207 	and.w	r2, r3, #7
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4422      	add	r2, r4
 8005622:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005624:	e105      	b.n	8005832 <UART_SetConfig+0x4d6>
 8005626:	bf00      	nop
 8005628:	40011000 	.word	0x40011000
 800562c:	40011400 	.word	0x40011400
 8005630:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005638:	2200      	movs	r2, #0
 800563a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800563e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005642:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005646:	4642      	mov	r2, r8
 8005648:	464b      	mov	r3, r9
 800564a:	1891      	adds	r1, r2, r2
 800564c:	6239      	str	r1, [r7, #32]
 800564e:	415b      	adcs	r3, r3
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
 8005652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005656:	4641      	mov	r1, r8
 8005658:	1854      	adds	r4, r2, r1
 800565a:	4649      	mov	r1, r9
 800565c:	eb43 0501 	adc.w	r5, r3, r1
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	00eb      	lsls	r3, r5, #3
 800566a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800566e:	00e2      	lsls	r2, r4, #3
 8005670:	4614      	mov	r4, r2
 8005672:	461d      	mov	r5, r3
 8005674:	4643      	mov	r3, r8
 8005676:	18e3      	adds	r3, r4, r3
 8005678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800567c:	464b      	mov	r3, r9
 800567e:	eb45 0303 	adc.w	r3, r5, r3
 8005682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005692:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056a2:	4629      	mov	r1, r5
 80056a4:	008b      	lsls	r3, r1, #2
 80056a6:	4621      	mov	r1, r4
 80056a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ac:	4621      	mov	r1, r4
 80056ae:	008a      	lsls	r2, r1, #2
 80056b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056b4:	f7fa fde4 	bl	8000280 <__aeabi_uldivmod>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4b60      	ldr	r3, [pc, #384]	; (8005840 <UART_SetConfig+0x4e4>)
 80056be:	fba3 2302 	umull	r2, r3, r3, r2
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	011c      	lsls	r4, r3, #4
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	1891      	adds	r1, r2, r2
 80056de:	61b9      	str	r1, [r7, #24]
 80056e0:	415b      	adcs	r3, r3
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056e8:	4641      	mov	r1, r8
 80056ea:	1851      	adds	r1, r2, r1
 80056ec:	6139      	str	r1, [r7, #16]
 80056ee:	4649      	mov	r1, r9
 80056f0:	414b      	adcs	r3, r1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005700:	4659      	mov	r1, fp
 8005702:	00cb      	lsls	r3, r1, #3
 8005704:	4651      	mov	r1, sl
 8005706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800570a:	4651      	mov	r1, sl
 800570c:	00ca      	lsls	r2, r1, #3
 800570e:	4610      	mov	r0, r2
 8005710:	4619      	mov	r1, r3
 8005712:	4603      	mov	r3, r0
 8005714:	4642      	mov	r2, r8
 8005716:	189b      	adds	r3, r3, r2
 8005718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800571c:	464b      	mov	r3, r9
 800571e:	460a      	mov	r2, r1
 8005720:	eb42 0303 	adc.w	r3, r2, r3
 8005724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	67bb      	str	r3, [r7, #120]	; 0x78
 8005732:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005740:	4649      	mov	r1, r9
 8005742:	008b      	lsls	r3, r1, #2
 8005744:	4641      	mov	r1, r8
 8005746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800574a:	4641      	mov	r1, r8
 800574c:	008a      	lsls	r2, r1, #2
 800574e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005752:	f7fa fd95 	bl	8000280 <__aeabi_uldivmod>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4b39      	ldr	r3, [pc, #228]	; (8005840 <UART_SetConfig+0x4e4>)
 800575c:	fba3 1302 	umull	r1, r3, r3, r2
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	2164      	movs	r1, #100	; 0x64
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	3332      	adds	r3, #50	; 0x32
 800576e:	4a34      	ldr	r2, [pc, #208]	; (8005840 <UART_SetConfig+0x4e4>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800577a:	441c      	add	r4, r3
 800577c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005780:	2200      	movs	r2, #0
 8005782:	673b      	str	r3, [r7, #112]	; 0x70
 8005784:	677a      	str	r2, [r7, #116]	; 0x74
 8005786:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800578a:	4642      	mov	r2, r8
 800578c:	464b      	mov	r3, r9
 800578e:	1891      	adds	r1, r2, r2
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	415b      	adcs	r3, r3
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800579a:	4641      	mov	r1, r8
 800579c:	1851      	adds	r1, r2, r1
 800579e:	6039      	str	r1, [r7, #0]
 80057a0:	4649      	mov	r1, r9
 80057a2:	414b      	adcs	r3, r1
 80057a4:	607b      	str	r3, [r7, #4]
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057b2:	4659      	mov	r1, fp
 80057b4:	00cb      	lsls	r3, r1, #3
 80057b6:	4651      	mov	r1, sl
 80057b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057bc:	4651      	mov	r1, sl
 80057be:	00ca      	lsls	r2, r1, #3
 80057c0:	4610      	mov	r0, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	4603      	mov	r3, r0
 80057c6:	4642      	mov	r2, r8
 80057c8:	189b      	adds	r3, r3, r2
 80057ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80057cc:	464b      	mov	r3, r9
 80057ce:	460a      	mov	r2, r1
 80057d0:	eb42 0303 	adc.w	r3, r2, r3
 80057d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	663b      	str	r3, [r7, #96]	; 0x60
 80057e0:	667a      	str	r2, [r7, #100]	; 0x64
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057ee:	4649      	mov	r1, r9
 80057f0:	008b      	lsls	r3, r1, #2
 80057f2:	4641      	mov	r1, r8
 80057f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f8:	4641      	mov	r1, r8
 80057fa:	008a      	lsls	r2, r1, #2
 80057fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005800:	f7fa fd3e 	bl	8000280 <__aeabi_uldivmod>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <UART_SetConfig+0x4e4>)
 800580a:	fba3 1302 	umull	r1, r3, r3, r2
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	2164      	movs	r1, #100	; 0x64
 8005812:	fb01 f303 	mul.w	r3, r1, r3
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	3332      	adds	r3, #50	; 0x32
 800581c:	4a08      	ldr	r2, [pc, #32]	; (8005840 <UART_SetConfig+0x4e4>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	f003 020f 	and.w	r2, r3, #15
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4422      	add	r2, r4
 8005830:	609a      	str	r2, [r3, #8]
}
 8005832:	bf00      	nop
 8005834:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005838:	46bd      	mov	sp, r7
 800583a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800583e:	bf00      	nop
 8005840:	51eb851f 	.word	0x51eb851f

08005844 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005844:	b084      	sub	sp, #16
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	f107 001c 	add.w	r0, r7, #28
 8005852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2b01      	cmp	r3, #1
 800585a:	d122      	bne.n	80058a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9c0 	bl	8005c1c <USB_CoreReset>
 800589c:	4603      	mov	r3, r0
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	e01a      	b.n	80058d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9b4 	bl	8005c1c <USB_CoreReset>
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
 80058ca:	e005      	b.n	80058d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d10b      	bne.n	80058f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f043 0206 	orr.w	r2, r3, #6
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f043 0220 	orr.w	r2, r3, #32
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005902:	b004      	add	sp, #16
 8005904:	4770      	bx	lr

08005906 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f023 0201 	bic.w	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d115      	bne.n	8005998 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005978:	2001      	movs	r0, #1
 800597a:	f7fb fb15 	bl	8000fa8 <HAL_Delay>
      ms++;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3301      	adds	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f93a 	bl	8005bfe <USB_GetMode>
 800598a:	4603      	mov	r3, r0
 800598c:	2b01      	cmp	r3, #1
 800598e:	d01e      	beq.n	80059ce <USB_SetCurrentMode+0x84>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b31      	cmp	r3, #49	; 0x31
 8005994:	d9f0      	bls.n	8005978 <USB_SetCurrentMode+0x2e>
 8005996:	e01a      	b.n	80059ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d115      	bne.n	80059ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059aa:	2001      	movs	r0, #1
 80059ac:	f7fb fafc 	bl	8000fa8 <HAL_Delay>
      ms++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f921 	bl	8005bfe <USB_GetMode>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <USB_SetCurrentMode+0x84>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b31      	cmp	r3, #49	; 0x31
 80059c6:	d9f0      	bls.n	80059aa <USB_SetCurrentMode+0x60>
 80059c8:	e001      	b.n	80059ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e005      	b.n	80059da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b32      	cmp	r3, #50	; 0x32
 80059d2:	d101      	bne.n	80059d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <USB_FlushTxFifo+0x64>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d901      	bls.n	8005a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e01b      	b.n	8005a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	daf2      	bge.n	80059f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	019b      	lsls	r3, r3, #6
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <USB_FlushTxFifo+0x64>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e006      	b.n	8005a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d0f0      	beq.n	8005a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	00030d40 	.word	0x00030d40

08005a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <USB_FlushRxFifo+0x5c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e018      	b.n	8005a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	daf2      	bge.n	8005a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <USB_FlushRxFifo+0x5c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e006      	b.n	8005a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d0f0      	beq.n	8005a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	00030d40 	.word	0x00030d40

08005aac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	; 0x24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	460b      	mov	r3, r1
 8005abc:	71fb      	strb	r3, [r7, #7]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d123      	bne.n	8005b1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ad2:	88bb      	ldrh	r3, [r7, #4]
 8005ad4:	3303      	adds	r3, #3
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ada:	2300      	movs	r3, #0
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e018      	b.n	8005b12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	031a      	lsls	r2, r3, #12
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	461a      	mov	r2, r3
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3e2      	bcc.n	8005ae0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3724      	adds	r7, #36	; 0x24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b08b      	sub	sp, #44	; 0x2c
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	089b      	lsrs	r3, r3, #2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	623b      	str	r3, [r7, #32]
 8005b52:	e014      	b.n	8005b7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	3301      	adds	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	3301      	adds	r3, #1
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	6a3a      	ldr	r2, [r7, #32]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3e6      	bcc.n	8005b54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b86:	8bfb      	ldrh	r3, [r7, #30]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01e      	beq.n	8005bca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b96:	461a      	mov	r2, r3
 8005b98:	f107 0310 	add.w	r3, r7, #16
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	701a      	strb	r2, [r3, #0]
      i++;
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	3301      	adds	r3, #1
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bbe:	8bfb      	ldrh	r3, [r7, #30]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bc4:	8bfb      	ldrh	r3, [r7, #30]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1ea      	bne.n	8005ba0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	372c      	adds	r7, #44	; 0x2c
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4013      	ands	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <USB_CoreReset+0x64>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e01b      	b.n	8005c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	daf2      	bge.n	8005c28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <USB_CoreReset+0x64>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e006      	b.n	8005c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d0f0      	beq.n	8005c52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	00030d40 	.word	0x00030d40

08005c84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c84:	b084      	sub	sp, #16
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d018      	beq.n	8005d0c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10a      	bne.n	8005cf6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	e014      	b.n	8005d20 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d04:	f023 0304 	bic.w	r3, r3, #4
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e009      	b.n	8005d20 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d1a:	f023 0304 	bic.w	r3, r3, #4
 8005d1e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d20:	2110      	movs	r1, #16
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fe5e 	bl	80059e4 <USB_FlushTxFifo>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff fe8a 	bl	8005a4c <USB_FlushRxFifo>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	e015      	b.n	8005d74 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	461a      	mov	r2, r3
 8005d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	3301      	adds	r3, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d3e5      	bcc.n	8005d48 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d88:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <USB_HostInit+0x16c>)
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a13      	ldr	r2, [pc, #76]	; (8005df4 <USB_HostInit+0x170>)
 8005da8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005dac:	e009      	b.n	8005dc2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <USB_HostInit+0x174>)
 8005db8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <USB_HostInit+0x178>)
 8005dbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d105      	bne.n	8005dd4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f043 0210 	orr.w	r2, r3, #16
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <USB_HostInit+0x17c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dec:	b004      	add	sp, #16
 8005dee:	4770      	bx	lr
 8005df0:	01000200 	.word	0x01000200
 8005df4:	00e00300 	.word	0x00e00300
 8005df8:	00600080 	.word	0x00600080
 8005dfc:	004000e0 	.word	0x004000e0
 8005e00:	a3200008 	.word	0xa3200008

08005e04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e52:	6053      	str	r3, [r2, #4]
 8005e54:	e009      	b.n	8005e6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d106      	bne.n	8005e6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e62:	461a      	mov	r2, r3
 8005e64:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ea8:	2064      	movs	r0, #100	; 0x64
 8005eaa:	f7fb f87d 	bl	8000fa8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ebc:	200a      	movs	r0, #10
 8005ebe:	f7fb f873 	bl	8000fa8 <HAL_Delay>

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ef0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <USB_DriveVbus+0x44>
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d106      	bne.n	8005f10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d109      	bne.n	8005f30 <USB_DriveVbus+0x64>
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	0c5b      	lsrs	r3, r3, #17
 8005f5c:	f003 0303 	and.w	r3, r3, #3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	b29b      	uxth	r3, r3
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	4608      	mov	r0, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	70fb      	strb	r3, [r7, #3]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	70bb      	strb	r3, [r7, #2]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005fc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d87e      	bhi.n	80060cc <USB_HC_Init+0x13c>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <USB_HC_Init+0x44>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	0800608f 	.word	0x0800608f
 8005fdc:	08005fe5 	.word	0x08005fe5
 8005fe0:	08006051 	.word	0x08006051
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ff6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ff8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da10      	bge.n	8006022 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	440a      	add	r2, r1
 8006016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006020:	e057      	b.n	80060d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d051      	beq.n	80060d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006048:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800604c:	60d3      	str	r3, [r2, #12]
      break;
 800604e:	e040      	b.n	80060d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	461a      	mov	r2, r3
 800605e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006062:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006064:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006068:	2b00      	cmp	r3, #0
 800606a:	da34      	bge.n	80060d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800608c:	e023      	b.n	80060d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	461a      	mov	r2, r3
 800609c:	f240 2325 	movw	r3, #549	; 0x225
 80060a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da17      	bge.n	80060da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060ca:	e006      	b.n	80060da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	77fb      	strb	r3, [r7, #31]
      break;
 80060d0:	e004      	b.n	80060dc <USB_HC_Init+0x14c>
      break;
 80060d2:	bf00      	nop
 80060d4:	e002      	b.n	80060dc <USB_HC_Init+0x14c>
      break;
 80060d6:	bf00      	nop
 80060d8:	e000      	b.n	80060dc <USB_HC_Init+0x14c>
      break;
 80060da:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f6:	f043 0302 	orr.w	r3, r3, #2
 80060fa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	2101      	movs	r1, #1
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	6939      	ldr	r1, [r7, #16]
 8006112:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006116:	4313      	orrs	r3, r2
 8006118:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006126:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800612a:	2b00      	cmp	r3, #0
 800612c:	da03      	bge.n	8006136 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800612e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	e001      	b.n	800613a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff feff 	bl	8005f3e <USB_GetHostSpeed>
 8006140:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006142:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006146:	2b02      	cmp	r3, #2
 8006148:	d106      	bne.n	8006158 <USB_HC_Init+0x1c8>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d003      	beq.n	8006158 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e001      	b.n	800615c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800615c:	787b      	ldrb	r3, [r7, #1]
 800615e:	059b      	lsls	r3, r3, #22
 8006160:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006164:	78bb      	ldrb	r3, [r7, #2]
 8006166:	02db      	lsls	r3, r3, #11
 8006168:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800616c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800616e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006172:	049b      	lsls	r3, r3, #18
 8006174:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006178:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800617a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800617c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006180:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	0159      	lsls	r1, r3, #5
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	440b      	add	r3, r1
 800618e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006192:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006198:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800619a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d003      	beq.n	80061aa <USB_HC_Init+0x21a>
 80061a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d10f      	bne.n	80061ca <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d02d      	beq.n	800625a <USB_HC_StartXfer+0x86>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	791b      	ldrb	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d129      	bne.n	800625a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d117      	bne.n	800623c <USB_HC_StartXfer+0x68>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	79db      	ldrb	r3, [r3, #7]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <USB_HC_StartXfer+0x48>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	79db      	ldrb	r3, [r3, #7]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d10f      	bne.n	800623c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	6a3a      	ldr	r2, [r7, #32]
 8006230:	440a      	add	r2, r1
 8006232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <USB_HC_StartXfer+0x86>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	795b      	ldrb	r3, [r3, #5]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d107      	bne.n	800625a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	4619      	mov	r1, r3
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fa0f 	bl	8006674 <USB_DoPing>
      return HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e0f8      	b.n	800644c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	8912      	ldrh	r2, [r2, #8]
 800626a:	4413      	add	r3, r2
 800626c:	3b01      	subs	r3, #1
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	8912      	ldrh	r2, [r2, #8]
 8006272:	fbb3 f3f2 	udiv	r3, r3, r2
 8006276:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006278:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800627a:	8b7b      	ldrh	r3, [r7, #26]
 800627c:	429a      	cmp	r2, r3
 800627e:	d90b      	bls.n	8006298 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006280:	8b7b      	ldrh	r3, [r7, #26]
 8006282:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006284:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	8912      	ldrh	r2, [r2, #8]
 800628a:	fb03 f202 	mul.w	r2, r3, r2
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	611a      	str	r2, [r3, #16]
 8006292:	e001      	b.n	8006298 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006294:	2301      	movs	r3, #1
 8006296:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	78db      	ldrb	r3, [r3, #3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	8912      	ldrh	r2, [r2, #8]
 80062a6:	fb03 f202 	mul.w	r2, r3, r2
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	611a      	str	r2, [r3, #16]
 80062ae:	e003      	b.n	80062b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695a      	ldr	r2, [r3, #20]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062c2:	04d9      	lsls	r1, r3, #19
 80062c4:	4b63      	ldr	r3, [pc, #396]	; (8006454 <USB_HC_StartXfer+0x280>)
 80062c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	7a9b      	ldrb	r3, [r3, #10]
 80062ce:	075b      	lsls	r3, r3, #29
 80062d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	0148      	lsls	r0, r1, #5
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	4401      	add	r1, r0
 80062dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68d9      	ldr	r1, [r3, #12]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	460a      	mov	r2, r1
 80062fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf0c      	ite	eq
 800630e:	2301      	moveq	r3, #1
 8006310:	2300      	movne	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	440a      	add	r2, r1
 800632c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006330:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006334:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	7e7b      	ldrb	r3, [r7, #25]
 8006346:	075b      	lsls	r3, r3, #29
 8006348:	69f9      	ldr	r1, [r7, #28]
 800634a:	0148      	lsls	r0, r1, #5
 800634c:	6a39      	ldr	r1, [r7, #32]
 800634e:	4401      	add	r1, r0
 8006350:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800636e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	78db      	ldrb	r3, [r3, #3]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	e003      	b.n	800638a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006388:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006390:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639e:	461a      	mov	r2, r3
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e04e      	b.n	800644c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	78db      	ldrb	r3, [r3, #3]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d149      	bne.n	800644a <USB_HC_StartXfer+0x276>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d045      	beq.n	800644a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	79db      	ldrb	r3, [r3, #7]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d830      	bhi.n	8006428 <USB_HC_StartXfer+0x254>
 80063c6:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <USB_HC_StartXfer+0x1f8>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	080063dd 	.word	0x080063dd
 80063d0:	08006401 	.word	0x08006401
 80063d4:	080063dd 	.word	0x080063dd
 80063d8:	08006401 	.word	0x08006401
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	3303      	adds	r3, #3
 80063e2:	089b      	lsrs	r3, r3, #2
 80063e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063e6:	8afa      	ldrh	r2, [r7, #22]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d91c      	bls.n	800642c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80063fe:	e015      	b.n	800642c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	3303      	adds	r3, #3
 8006406:	089b      	lsrs	r3, r3, #2
 8006408:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800640a:	8afa      	ldrh	r2, [r7, #22]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	b29b      	uxth	r3, r3
 8006416:	429a      	cmp	r2, r3
 8006418:	d90a      	bls.n	8006430 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	619a      	str	r2, [r3, #24]
        }
        break;
 8006426:	e003      	b.n	8006430 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006428:	bf00      	nop
 800642a:	e002      	b.n	8006432 <USB_HC_StartXfer+0x25e>
        break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <USB_HC_StartXfer+0x25e>
        break;
 8006430:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	68d9      	ldr	r1, [r3, #12]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	785a      	ldrb	r2, [r3, #1]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	b29b      	uxth	r3, r3
 8006440:	2000      	movs	r0, #0
 8006442:	9000      	str	r0, [sp, #0]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7ff fb31 	bl	8005aac <USB_WritePacket>
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3728      	adds	r7, #40	; 0x28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	1ff80000 	.word	0x1ff80000

08006458 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	b29b      	uxth	r3, r3
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800647a:	b480      	push	{r7}
 800647c:	b089      	sub	sp, #36	; 0x24
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	0c9b      	lsrs	r3, r3, #18
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	0fdb      	lsrs	r3, r3, #31
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d104      	bne.n	80064d4 <USB_HC_Halt+0x5a>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e0c8      	b.n	8006666 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <USB_HC_Halt+0x66>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d163      	bne.n	80065a8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 80ab 	bne.w	8006664 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d133      	bne.n	8006582 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	440a      	add	r2, r1
 8006530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006538:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006558:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006566:	d81d      	bhi.n	80065a4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800657e:	d0ec      	beq.n	800655a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006580:	e070      	b.n	8006664 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065a2:	e05f      	b.n	8006664 <USB_HC_Halt+0x1ea>
            break;
 80065a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065a6:	e05d      	b.n	8006664 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d133      	bne.n	8006640 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	440a      	add	r2, r1
 800660e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006616:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006624:	d81d      	bhi.n	8006662 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663c:	d0ec      	beq.n	8006618 <USB_HC_Halt+0x19e>
 800663e:	e011      	b.n	8006664 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e000      	b.n	8006664 <USB_HC_Halt+0x1ea>
          break;
 8006662:	bf00      	nop
    }
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3724      	adds	r7, #36	; 0x24
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006688:	2301      	movs	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	04da      	lsls	r2, r3, #19
 8006690:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <USB_DoPing+0x74>)
 8006692:	4013      	ands	r3, r2
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	440a      	add	r2, r1
 800669c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	461a      	mov	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	1ff80000 	.word	0x1ff80000

080066ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff f911 	bl	8005928 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006706:	2110      	movs	r1, #16
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff f96b 	bl	80059e4 <USB_FlushTxFifo>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff f997 	bl	8005a4c <USB_FlushRxFifo>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e01f      	b.n	800676e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006744:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800674c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006754:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006762:	461a      	mov	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	3301      	adds	r3, #1
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b0f      	cmp	r3, #15
 8006772:	d9dc      	bls.n	800672e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006774:	2300      	movs	r3, #0
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	e034      	b.n	80067e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006790:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006798:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ae:	461a      	mov	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c0:	d80c      	bhi.n	80067dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d8:	d0ec      	beq.n	80067b4 <USB_StopHost+0xc8>
 80067da:	e000      	b.n	80067de <USB_StopHost+0xf2>
        break;
 80067dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	3301      	adds	r3, #1
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b0f      	cmp	r3, #15
 80067e8:	d9c7      	bls.n	800677a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f0:	461a      	mov	r2, r3
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff f880 	bl	8005906 <USB_EnableGlobalInt>

  return ret;
 8006806:	7ffb      	ldrb	r3, [r7, #31]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b089      	sub	sp, #36	; 0x24
 8006814:	af04      	add	r7, sp, #16
 8006816:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006818:	2301      	movs	r3, #1
 800681a:	2202      	movs	r2, #2
 800681c:	2102      	movs	r1, #2
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fc66 	bl	80070f0 <USBH_FindInterface>
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2bff      	cmp	r3, #255	; 0xff
 800682c:	d002      	beq.n	8006834 <USBH_CDC_InterfaceInit+0x24>
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d901      	bls.n	8006838 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006834:	2302      	movs	r3, #2
 8006836:	e13d      	b.n	8006ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fc3b 	bl	80070b8 <USBH_SelectInterface>
 8006842:	4603      	mov	r3, r0
 8006844:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800684c:	2302      	movs	r3, #2
 800684e:	e131      	b.n	8006ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006856:	2050      	movs	r0, #80	; 0x50
 8006858:	f002 fafa 	bl	8008e50 <malloc>
 800685c:	4603      	mov	r3, r0
 800685e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006870:	2302      	movs	r3, #2
 8006872:	e11f      	b.n	8006ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006874:	2250      	movs	r2, #80	; 0x50
 8006876:	2100      	movs	r1, #0
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f002 faf9 	bl	8008e70 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	211a      	movs	r1, #26
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b25b      	sxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	da15      	bge.n	80068c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	211a      	movs	r1, #26
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068a6:	781a      	ldrb	r2, [r3, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	211a      	movs	r1, #26
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068bc:	881a      	ldrh	r2, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 ff2c 	bl	8008726 <USBH_AllocPipe>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	7819      	ldrb	r1, [r3, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	7858      	ldrb	r0, [r3, #1]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	8952      	ldrh	r2, [r2, #10]
 80068ee:	9202      	str	r2, [sp, #8]
 80068f0:	2203      	movs	r2, #3
 80068f2:	9201      	str	r2, [sp, #4]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	4623      	mov	r3, r4
 80068f8:	4602      	mov	r2, r0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fee4 	bl	80086c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2200      	movs	r2, #0
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f002 f9f3 	bl	8008cf4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800690e:	2300      	movs	r3, #0
 8006910:	2200      	movs	r2, #0
 8006912:	210a      	movs	r1, #10
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fbeb 	bl	80070f0 <USBH_FindInterface>
 800691a:	4603      	mov	r3, r0
 800691c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2bff      	cmp	r3, #255	; 0xff
 8006922:	d002      	beq.n	800692a <USBH_CDC_InterfaceInit+0x11a>
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d901      	bls.n	800692e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800692a:	2302      	movs	r3, #2
 800692c:	e0c2      	b.n	8006ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	211a      	movs	r1, #26
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b25b      	sxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	da16      	bge.n	8006974 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	211a      	movs	r1, #26
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	4413      	add	r3, r2
 8006952:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	211a      	movs	r1, #26
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800696c:	881a      	ldrh	r2, [r3, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	835a      	strh	r2, [r3, #26]
 8006972:	e015      	b.n	80069a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	211a      	movs	r1, #26
 800697a:	fb01 f303 	mul.w	r3, r1, r3
 800697e:	4413      	add	r3, r2
 8006980:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	211a      	movs	r1, #26
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	4413      	add	r3, r2
 8006996:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	211a      	movs	r1, #26
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da16      	bge.n	80069e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	211a      	movs	r1, #26
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	211a      	movs	r1, #26
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	4413      	add	r3, r2
 80069da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069de:	881a      	ldrh	r2, [r3, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	835a      	strh	r2, [r3, #26]
 80069e4:	e015      	b.n	8006a12 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	211a      	movs	r1, #26
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	211a      	movs	r1, #26
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	7b9b      	ldrb	r3, [r3, #14]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fe84 	bl	8008726 <USBH_AllocPipe>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	461a      	mov	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	7bdb      	ldrb	r3, [r3, #15]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fe7a 	bl	8008726 <USBH_AllocPipe>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	7b59      	ldrb	r1, [r3, #13]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	7b98      	ldrb	r0, [r3, #14]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	8b12      	ldrh	r2, [r2, #24]
 8006a52:	9202      	str	r2, [sp, #8]
 8006a54:	2202      	movs	r2, #2
 8006a56:	9201      	str	r2, [sp, #4]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 fe32 	bl	80086c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	7b19      	ldrb	r1, [r3, #12]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	7bd8      	ldrb	r0, [r3, #15]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	8b52      	ldrh	r2, [r2, #26]
 8006a7c:	9202      	str	r2, [sp, #8]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	9201      	str	r2, [sp, #4]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	4623      	mov	r3, r4
 8006a86:	4602      	mov	r2, r0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fe1d 	bl	80086c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	7b5b      	ldrb	r3, [r3, #13]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f002 f928 	bl	8008cf4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	7b1b      	ldrb	r3, [r3, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f002 f921 	bl	8008cf4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd90      	pop	{r4, r7, pc}

08006abc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00e      	beq.n	8006af4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fe12 	bl	8008706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fe3d 	bl	8008768 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	7b1b      	ldrb	r3, [r3, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00e      	beq.n	8006b1a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	7b1b      	ldrb	r3, [r3, #12]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fdff 	bl	8008706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	7b1b      	ldrb	r3, [r3, #12]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fe2a 	bl	8008768 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	7b5b      	ldrb	r3, [r3, #13]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00e      	beq.n	8006b40 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	7b5b      	ldrb	r3, [r3, #13]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 fdec 	bl	8008706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7b5b      	ldrb	r3, [r3, #13]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fe17 	bl	8008768 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f002 f983 	bl	8008e60 <free>
    phost->pActiveClass->pData = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b60:	2200      	movs	r2, #0
 8006b62:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3340      	adds	r3, #64	; 0x40
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8b1 	bl	8006cee <GetLineCoding>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b90:	7afb      	ldrb	r3, [r7, #11]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b9c:	2102      	movs	r1, #2
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d877      	bhi.n	8006cc0 <USBH_CDC_Process+0x114>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <USBH_CDC_Process+0x2c>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006bed 	.word	0x08006bed
 8006bdc:	08006bf3 	.word	0x08006bf3
 8006be0:	08006c23 	.word	0x08006c23
 8006be4:	08006c97 	.word	0x08006c97
 8006be8:	08006ca5 	.word	0x08006ca5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf0:	e06d      	b.n	8006cce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f897 	bl	8006d2c <SetLineCoding>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c10:	e058      	b.n	8006cc4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d055      	beq.n	8006cc4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c20:	e050      	b.n	8006cc4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3340      	adds	r3, #64	; 0x40
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f860 	bl	8006cee <GetLineCoding>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d126      	bne.n	8006c86 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4a:	791b      	ldrb	r3, [r3, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d13b      	bne.n	8006cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d133      	bne.n	8006cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d12b      	bne.n	8006cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c78:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d124      	bne.n	8006cc8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f958 	bl	8006f34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c84:	e020      	b.n	8006cc8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d01d      	beq.n	8006cc8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2204      	movs	r2, #4
 8006c90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c94:	e018      	b.n	8006cc8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f867 	bl	8006d6a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f8da 	bl	8006e56 <CDC_ProcessReception>
      break;
 8006ca2:	e014      	b.n	8006cce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 ffef 	bl	8007c8a <USBH_ClrFeature>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cbe:	e005      	b.n	8006ccc <USBH_CDC_Process+0x120>

    default:
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e004      	b.n	8006cce <USBH_CDC_Process+0x122>
      break;
 8006cc4:	bf00      	nop
 8006cc6:	e002      	b.n	8006cce <USBH_CDC_Process+0x122>
      break;
 8006cc8:	bf00      	nop
 8006cca:	e000      	b.n	8006cce <USBH_CDC_Process+0x122>
      break;
 8006ccc:	bf00      	nop

  }

  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22a1      	movs	r2, #161	; 0xa1
 8006cfc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2221      	movs	r2, #33	; 0x21
 8006d02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2207      	movs	r2, #7
 8006d14:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2207      	movs	r2, #7
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fa81 	bl	8008224 <USBH_CtlReq>
 8006d22:	4603      	mov	r3, r0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2221      	movs	r2, #33	; 0x21
 8006d3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2207      	movs	r2, #7
 8006d52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2207      	movs	r2, #7
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fa62 	bl	8008224 <USBH_CtlReq>
 8006d60:	4603      	mov	r3, r0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af02      	add	r7, sp, #8
 8006d70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d002      	beq.n	8006d90 <CDC_ProcessTransmission+0x26>
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d023      	beq.n	8006dd6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d8e:	e05e      	b.n	8006e4e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	8b12      	ldrh	r2, [r2, #24]
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d90b      	bls.n	8006db4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	69d9      	ldr	r1, [r3, #28]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8b1a      	ldrh	r2, [r3, #24]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	7b5b      	ldrb	r3, [r3, #13]
 8006da8:	2001      	movs	r0, #1
 8006daa:	9000      	str	r0, [sp, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fc48 	bl	8008642 <USBH_BulkSendData>
 8006db2:	e00b      	b.n	8006dcc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	7b5b      	ldrb	r3, [r3, #13]
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	9000      	str	r0, [sp, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fc3b 	bl	8008642 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006dd4:	e03b      	b.n	8006e4e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	7b5b      	ldrb	r3, [r3, #13]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 ff5f 	bl	8008ca0 <USBH_LL_GetURBState>
 8006de2:	4603      	mov	r3, r0
 8006de4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006de6:	7afb      	ldrb	r3, [r7, #11]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d128      	bne.n	8006e3e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	8b12      	ldrh	r2, [r2, #24]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d90e      	bls.n	8006e16 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	8b12      	ldrh	r2, [r2, #24]
 8006e00:	1a9a      	subs	r2, r3, r2
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	8b12      	ldrh	r2, [r2, #24]
 8006e0e:	441a      	add	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	61da      	str	r2, [r3, #28]
 8006e14:	e002      	b.n	8006e1c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e2c:	e00e      	b.n	8006e4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f868 	bl	8006f0c <USBH_CDC_TransmitCallback>
      break;
 8006e3c:	e006      	b.n	8006e4c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d103      	bne.n	8006e4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e4c:	bf00      	nop
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d002      	beq.n	8006e7c <CDC_ProcessReception+0x26>
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d00e      	beq.n	8006e98 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e7a:	e043      	b.n	8006f04 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6a19      	ldr	r1, [r3, #32]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	8b5a      	ldrh	r2, [r3, #26]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	7b1b      	ldrb	r3, [r3, #12]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fbff 	bl	800868c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2204      	movs	r2, #4
 8006e92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e96:	e035      	b.n	8006f04 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	7b1b      	ldrb	r3, [r3, #12]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fefe 	bl	8008ca0 <USBH_LL_GetURBState>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ea8:	7cfb      	ldrb	r3, [r7, #19]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d129      	bne.n	8006f02 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	7b1b      	ldrb	r3, [r3, #12]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fe61 	bl	8008b7c <USBH_LL_GetLastXferSize>
 8006eba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d016      	beq.n	8006ef4 <CDC_ProcessReception+0x9e>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	8b5b      	ldrh	r3, [r3, #26]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d910      	bls.n	8006ef4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	1ad2      	subs	r2, r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	6a1a      	ldr	r2, [r3, #32]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	441a      	add	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2203      	movs	r2, #3
 8006eee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ef2:	e006      	b.n	8006f02 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f80f 	bl	8006f20 <USBH_CDC_ReceiveCallback>
      break;
 8006f02:	bf00      	nop
  }
}
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e029      	b.n	8006fb4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	79fa      	ldrb	r2, [r7, #7]
 8006f64:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 f81f 	bl	8006fbc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f001 fd31 	bl	8008a14 <USBH_LL_Init>

  return USBH_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e009      	b.n	8006fe2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	33e0      	adds	r3, #224	; 0xe0
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	2200      	movs	r2, #0
 8006fda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b0f      	cmp	r3, #15
 8006fe6:	d9f2      	bls.n	8006fce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e009      	b.n	8007002 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007008:	d3f1      	bcc.n	8006fee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2240      	movs	r2, #64	; 0x40
 800702e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d016      	beq.n	80070a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10e      	bne.n	80070a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007088:	1c59      	adds	r1, r3, #1
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	33de      	adds	r3, #222	; 0xde
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
 800709e:	e004      	b.n	80070aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070a0:	2302      	movs	r3, #2
 80070a2:	73fb      	strb	r3, [r7, #15]
 80070a4:	e001      	b.n	80070aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070a6:	2302      	movs	r3, #2
 80070a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d204      	bcs.n	80070de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	78fa      	ldrb	r2, [r7, #3]
 80070d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070dc:	e001      	b.n	80070e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070de:	2302      	movs	r3, #2
 80070e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	461a      	mov	r2, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	70fb      	strb	r3, [r7, #3]
 8007102:	460b      	mov	r3, r1
 8007104:	70bb      	strb	r3, [r7, #2]
 8007106:	4613      	mov	r3, r2
 8007108:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007118:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800711a:	e025      	b.n	8007168 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	221a      	movs	r2, #26
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	3308      	adds	r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	3302      	adds	r3, #2
 800712c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	795b      	ldrb	r3, [r3, #5]
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	429a      	cmp	r2, r3
 8007136:	d002      	beq.n	800713e <USBH_FindInterface+0x4e>
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	2bff      	cmp	r3, #255	; 0xff
 800713c:	d111      	bne.n	8007162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007142:	78ba      	ldrb	r2, [r7, #2]
 8007144:	429a      	cmp	r2, r3
 8007146:	d002      	beq.n	800714e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007148:	78bb      	ldrb	r3, [r7, #2]
 800714a:	2bff      	cmp	r3, #255	; 0xff
 800714c:	d109      	bne.n	8007162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007152:	787a      	ldrb	r2, [r7, #1]
 8007154:	429a      	cmp	r2, r3
 8007156:	d002      	beq.n	800715e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007158:	787b      	ldrb	r3, [r7, #1]
 800715a:	2bff      	cmp	r3, #255	; 0xff
 800715c:	d101      	bne.n	8007162 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	e006      	b.n	8007170 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	3301      	adds	r3, #1
 8007166:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007168:	7dfb      	ldrb	r3, [r7, #23]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d9d6      	bls.n	800711c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800716e:	23ff      	movs	r3, #255	; 0xff
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 fc81 	bl	8008a8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 fd9a 	bl	8008cc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af04      	add	r7, sp, #16
 80071a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071a4:	2302      	movs	r3, #2
 80071a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d102      	bne.n	80071be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2203      	movs	r2, #3
 80071bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b0b      	cmp	r3, #11
 80071c6:	f200 81be 	bhi.w	8007546 <USBH_Process+0x3aa>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <USBH_Process+0x34>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	08007201 	.word	0x08007201
 80071d4:	08007233 	.word	0x08007233
 80071d8:	0800729b 	.word	0x0800729b
 80071dc:	080074e1 	.word	0x080074e1
 80071e0:	08007547 	.word	0x08007547
 80071e4:	0800733f 	.word	0x0800733f
 80071e8:	08007487 	.word	0x08007487
 80071ec:	08007375 	.word	0x08007375
 80071f0:	08007395 	.word	0x08007395
 80071f4:	080073b5 	.word	0x080073b5
 80071f8:	080073f9 	.word	0x080073f9
 80071fc:	080074c9 	.word	0x080074c9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 819e 	beq.w	800754a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007214:	20c8      	movs	r0, #200	; 0xc8
 8007216:	f001 fd9d 	bl	8008d54 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fc93 	bl	8008b46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007230:	e18b      	b.n	800754a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007238:	2b01      	cmp	r3, #1
 800723a:	d107      	bne.n	800724c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800724a:	e18d      	b.n	8007568 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007256:	d914      	bls.n	8007282 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800725e:	3301      	adds	r3, #1
 8007260:	b2da      	uxtb	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800726e:	2b03      	cmp	r3, #3
 8007270:	d903      	bls.n	800727a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	220d      	movs	r2, #13
 8007276:	701a      	strb	r2, [r3, #0]
      break;
 8007278:	e176      	b.n	8007568 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
      break;
 8007280:	e172      	b.n	8007568 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007288:	f103 020a 	add.w	r2, r3, #10
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007292:	200a      	movs	r0, #10
 8007294:	f001 fd5e 	bl	8008d54 <USBH_Delay>
      break;
 8007298:	e166      	b.n	8007568 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072aa:	2104      	movs	r1, #4
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072b0:	2064      	movs	r0, #100	; 0x64
 80072b2:	f001 fd4f 	bl	8008d54 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fc1e 	bl	8008af8 <USBH_LL_GetSpeed>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2205      	movs	r2, #5
 80072ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fa29 	bl	8008726 <USBH_AllocPipe>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072dc:	2180      	movs	r1, #128	; 0x80
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fa21 	bl	8008726 <USBH_AllocPipe>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7919      	ldrb	r1, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007300:	b292      	uxth	r2, r2
 8007302:	9202      	str	r2, [sp, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	9201      	str	r2, [sp, #4]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4603      	mov	r3, r0
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f9da 	bl	80086c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7959      	ldrb	r1, [r3, #5]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007328:	b292      	uxth	r2, r2
 800732a:	9202      	str	r2, [sp, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	9201      	str	r2, [sp, #4]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4603      	mov	r3, r0
 8007334:	2200      	movs	r2, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 f9c6 	bl	80086c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800733c:	e114      	b.n	8007568 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f918 	bl	8007574 <USBH_HandleEnum>
 8007344:	4603      	mov	r3, r0
 8007346:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	f040 80fe 	bne.w	800754e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007360:	2b01      	cmp	r3, #1
 8007362:	d103      	bne.n	800736c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2208      	movs	r2, #8
 8007368:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800736a:	e0f0      	b.n	800754e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2207      	movs	r2, #7
 8007370:	701a      	strb	r2, [r3, #0]
      break;
 8007372:	e0ec      	b.n	800754e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80e9 	beq.w	8007552 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007386:	2101      	movs	r1, #1
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2208      	movs	r2, #8
 8007390:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007392:	e0de      	b.n	8007552 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800739a:	b29b      	uxth	r3, r3
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fc2c 	bl	8007bfc <USBH_SetCfg>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 80d5 	bne.w	8007556 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2209      	movs	r2, #9
 80073b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073b2:	e0d0      	b.n	8007556 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d016      	beq.n	80073f0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80073c2:	2101      	movs	r1, #1
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc3c 	bl	8007c42 <USBH_SetFeature>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	220a      	movs	r2, #10
 80073da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073dc:	e0bd      	b.n	800755a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	f040 80b9 	bne.w	800755a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	220a      	movs	r2, #10
 80073ec:	701a      	strb	r2, [r3, #0]
      break;
 80073ee:	e0b4      	b.n	800755a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	220a      	movs	r2, #10
 80073f4:	701a      	strb	r2, [r3, #0]
      break;
 80073f6:	e0b0      	b.n	800755a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80ad 	beq.w	800755e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]
 8007410:	e016      	b.n	8007440 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007412:	7bfa      	ldrb	r2, [r7, #15]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	32de      	adds	r2, #222	; 0xde
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	791a      	ldrb	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007424:	429a      	cmp	r2, r3
 8007426:	d108      	bne.n	800743a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007428:	7bfa      	ldrb	r2, [r7, #15]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	32de      	adds	r2, #222	; 0xde
 800742e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007438:	e005      	b.n	8007446 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	3301      	adds	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0e5      	beq.n	8007412 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d016      	beq.n	800747e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d109      	bne.n	8007476 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2206      	movs	r2, #6
 8007466:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800746e:	2103      	movs	r1, #3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007474:	e073      	b.n	800755e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	220d      	movs	r2, #13
 800747a:	701a      	strb	r2, [r3, #0]
      break;
 800747c:	e06f      	b.n	800755e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	220d      	movs	r2, #13
 8007482:	701a      	strb	r2, [r3, #0]
      break;
 8007484:	e06b      	b.n	800755e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d017      	beq.n	80074c0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
 800749c:	4603      	mov	r3, r0
 800749e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	220b      	movs	r2, #11
 80074ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074ae:	e058      	b.n	8007562 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d154      	bne.n	8007562 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	220d      	movs	r2, #13
 80074bc:	701a      	strb	r2, [r3, #0]
      break;
 80074be:	e050      	b.n	8007562 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	220d      	movs	r2, #13
 80074c4:	701a      	strb	r2, [r3, #0]
      break;
 80074c6:	e04c      	b.n	8007562 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d049      	beq.n	8007566 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
      }
      break;
 80074de:	e042      	b.n	8007566 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff fd67 	bl	8006fbc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d009      	beq.n	800750c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800751c:	2105      	movs	r1, #5
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d107      	bne.n	800753e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff fe20 	bl	800717c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800753c:	e014      	b.n	8007568 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 faa4 	bl	8008a8c <USBH_LL_Start>
      break;
 8007544:	e010      	b.n	8007568 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007546:	bf00      	nop
 8007548:	e00e      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 800754a:	bf00      	nop
 800754c:	e00c      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 800754e:	bf00      	nop
 8007550:	e00a      	b.n	8007568 <USBH_Process+0x3cc>
    break;
 8007552:	bf00      	nop
 8007554:	e008      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 8007556:	bf00      	nop
 8007558:	e006      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 800755a:	bf00      	nop
 800755c:	e004      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 8007566:	bf00      	nop
  }
  return USBH_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop

08007574 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b088      	sub	sp, #32
 8007578:	af04      	add	r7, sp, #16
 800757a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800757c:	2301      	movs	r3, #1
 800757e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007580:	2301      	movs	r3, #1
 8007582:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b07      	cmp	r3, #7
 800758a:	f200 81c1 	bhi.w	8007910 <USBH_HandleEnum+0x39c>
 800758e:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <USBH_HandleEnum+0x20>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075b5 	.word	0x080075b5
 8007598:	08007673 	.word	0x08007673
 800759c:	080076dd 	.word	0x080076dd
 80075a0:	0800776b 	.word	0x0800776b
 80075a4:	080077d5 	.word	0x080077d5
 80075a8:	08007845 	.word	0x08007845
 80075ac:	0800788b 	.word	0x0800788b
 80075b0:	080078d1 	.word	0x080078d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075b4:	2108      	movs	r1, #8
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa50 	bl	8007a5c <USBH_Get_DevDesc>
 80075bc:	4603      	mov	r3, r0
 80075be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d130      	bne.n	8007628 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7919      	ldrb	r1, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075ea:	b292      	uxth	r2, r2
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	9201      	str	r2, [sp, #4]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	4603      	mov	r3, r0
 80075f6:	2280      	movs	r2, #128	; 0x80
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f865 	bl	80086c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	7959      	ldrb	r1, [r3, #5]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007612:	b292      	uxth	r2, r2
 8007614:	9202      	str	r2, [sp, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	9201      	str	r2, [sp, #4]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	4603      	mov	r3, r0
 800761e:	2200      	movs	r2, #0
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 f851 	bl	80086c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007626:	e175      	b.n	8007914 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b03      	cmp	r3, #3
 800762c:	f040 8172 	bne.w	8007914 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007636:	3301      	adds	r3, #1
 8007638:	b2da      	uxtb	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007646:	2b03      	cmp	r3, #3
 8007648:	d903      	bls.n	8007652 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	220d      	movs	r2, #13
 800764e:	701a      	strb	r2, [r3, #0]
      break;
 8007650:	e160      	b.n	8007914 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	795b      	ldrb	r3, [r3, #5]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f885 	bl	8008768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	791b      	ldrb	r3, [r3, #4]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f87f 	bl	8008768 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
      break;
 8007670:	e150      	b.n	8007914 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007672:	2112      	movs	r1, #18
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f9f1 	bl	8007a5c <USBH_Get_DevDesc>
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d103      	bne.n	800768c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800768a:	e145      	b.n	8007918 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b03      	cmp	r3, #3
 8007690:	f040 8142 	bne.w	8007918 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800769a:	3301      	adds	r3, #1
 800769c:	b2da      	uxtb	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d903      	bls.n	80076b6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	220d      	movs	r2, #13
 80076b2:	701a      	strb	r2, [r3, #0]
      break;
 80076b4:	e130      	b.n	8007918 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	795b      	ldrb	r3, [r3, #5]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f853 	bl	8008768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	791b      	ldrb	r3, [r3, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f84d 	bl	8008768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
      break;
 80076da:	e11d      	b.n	8007918 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076dc:	2101      	movs	r1, #1
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa68 	bl	8007bb4 <USBH_SetAddress>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d132      	bne.n	8007754 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80076ee:	2002      	movs	r0, #2
 80076f0:	f001 fb30 	bl	8008d54 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2203      	movs	r2, #3
 8007700:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	7919      	ldrb	r1, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007716:	b292      	uxth	r2, r2
 8007718:	9202      	str	r2, [sp, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	9201      	str	r2, [sp, #4]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	4603      	mov	r3, r0
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 ffcf 	bl	80086c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7959      	ldrb	r1, [r3, #5]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800773e:	b292      	uxth	r2, r2
 8007740:	9202      	str	r2, [sp, #8]
 8007742:	2200      	movs	r2, #0
 8007744:	9201      	str	r2, [sp, #4]
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	4603      	mov	r3, r0
 800774a:	2200      	movs	r2, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 ffbb 	bl	80086c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007752:	e0e3      	b.n	800791c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b03      	cmp	r3, #3
 8007758:	f040 80e0 	bne.w	800791c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	220d      	movs	r2, #13
 8007760:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	705a      	strb	r2, [r3, #1]
      break;
 8007768:	e0d8      	b.n	800791c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800776a:	2109      	movs	r1, #9
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f99d 	bl	8007aac <USBH_Get_CfgDesc>
 8007772:	4603      	mov	r3, r0
 8007774:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d103      	bne.n	8007784 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2204      	movs	r2, #4
 8007780:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007782:	e0cd      	b.n	8007920 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b03      	cmp	r3, #3
 8007788:	f040 80ca 	bne.w	8007920 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007792:	3301      	adds	r3, #1
 8007794:	b2da      	uxtb	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d903      	bls.n	80077ae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	220d      	movs	r2, #13
 80077aa:	701a      	strb	r2, [r3, #0]
      break;
 80077ac:	e0b8      	b.n	8007920 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	795b      	ldrb	r3, [r3, #5]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 ffd7 	bl	8008768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	791b      	ldrb	r3, [r3, #4]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 ffd1 	bl	8008768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e0a5      	b.n	8007920 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f965 	bl	8007aac <USBH_Get_CfgDesc>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2205      	movs	r2, #5
 80077f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077f2:	e097      	b.n	8007924 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	f040 8094 	bne.w	8007924 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007802:	3301      	adds	r3, #1
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007812:	2b03      	cmp	r3, #3
 8007814:	d903      	bls.n	800781e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	220d      	movs	r2, #13
 800781a:	701a      	strb	r2, [r3, #0]
      break;
 800781c:	e082      	b.n	8007924 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	795b      	ldrb	r3, [r3, #5]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ff9f 	bl	8008768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	791b      	ldrb	r3, [r3, #4]
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 ff99 	bl	8008768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
      break;
 8007842:	e06f      	b.n	8007924 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800784a:	2b00      	cmp	r3, #0
 800784c:	d019      	beq.n	8007882 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800785a:	23ff      	movs	r3, #255	; 0xff
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f949 	bl	8007af4 <USBH_Get_StringDesc>
 8007862:	4603      	mov	r3, r0
 8007864:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2206      	movs	r2, #6
 8007870:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007872:	e059      	b.n	8007928 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b03      	cmp	r3, #3
 8007878:	d156      	bne.n	8007928 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2206      	movs	r2, #6
 800787e:	705a      	strb	r2, [r3, #1]
      break;
 8007880:	e052      	b.n	8007928 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2206      	movs	r2, #6
 8007886:	705a      	strb	r2, [r3, #1]
      break;
 8007888:	e04e      	b.n	8007928 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007890:	2b00      	cmp	r3, #0
 8007892:	d019      	beq.n	80078c8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078a0:	23ff      	movs	r3, #255	; 0xff
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f926 	bl	8007af4 <USBH_Get_StringDesc>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2207      	movs	r2, #7
 80078b6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078b8:	e038      	b.n	800792c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d135      	bne.n	800792c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2207      	movs	r2, #7
 80078c4:	705a      	strb	r2, [r3, #1]
      break;
 80078c6:	e031      	b.n	800792c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2207      	movs	r2, #7
 80078cc:	705a      	strb	r2, [r3, #1]
      break;
 80078ce:	e02d      	b.n	800792c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078e6:	23ff      	movs	r3, #255	; 0xff
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f903 	bl	8007af4 <USBH_Get_StringDesc>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078fc:	e018      	b.n	8007930 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d115      	bne.n	8007930 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	73fb      	strb	r3, [r7, #15]
      break;
 8007908:	e012      	b.n	8007930 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
      break;
 800790e:	e00f      	b.n	8007930 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007910:	bf00      	nop
 8007912:	e00e      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007914:	bf00      	nop
 8007916:	e00c      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007918:	bf00      	nop
 800791a:	e00a      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 800791c:	bf00      	nop
 800791e:	e008      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007920:	bf00      	nop
 8007922:	e006      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007924:	bf00      	nop
 8007926:	e004      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007928:	bf00      	nop
 800792a:	e002      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 800792c:	bf00      	nop
 800792e:	e000      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007930:	bf00      	nop
  }
  return Status;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f804 	bl	800797e <USBH_HandleSof>
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b0b      	cmp	r3, #11
 800798e:	d10a      	bne.n	80079a6 <USBH_HandleSof+0x28>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
  }
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079be:	bf00      	nop
}
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079da:	bf00      	nop
}
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f844 	bl	8008ac2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fe91 	bl	8008768 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	795b      	ldrb	r3, [r3, #5]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fe8b 	bl	8008768 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f864 	bl	8007b4a <USBH_GetDescriptor>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a98:	78fa      	ldrb	r2, [r7, #3]
 8007a9a:	b292      	uxth	r2, r2
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f000 f918 	bl	8007cd2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	331c      	adds	r3, #28
 8007abc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007abe:	887b      	ldrh	r3, [r7, #2]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ac8:	2100      	movs	r1, #0
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f83d 	bl	8007b4a <USBH_GetDescriptor>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d107      	bne.n	8007aea <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ada:	887b      	ldrh	r3, [r7, #2]
 8007adc:	461a      	mov	r2, r3
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f987 	bl	8007df4 <USBH_ParseCfgDesc>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	461a      	mov	r2, r3
 8007b00:	460b      	mov	r3, r1
 8007b02:	72fb      	strb	r3, [r7, #11]
 8007b04:	4613      	mov	r3, r2
 8007b06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b10:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b18:	893b      	ldrh	r3, [r7, #8]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	2100      	movs	r1, #0
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f812 	bl	8007b4a <USBH_GetDescriptor>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d107      	bne.n	8007b40 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b36:	893a      	ldrh	r2, [r7, #8]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fb24 	bl	8008188 <USBH_ParseStringDesc>
  }

  return status;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	607b      	str	r3, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	72fb      	strb	r3, [r7, #11]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	789b      	ldrb	r3, [r3, #2]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d11c      	bne.n	8007b9e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2206      	movs	r2, #6
 8007b74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	893a      	ldrh	r2, [r7, #8]
 8007b7a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b7c:	893b      	ldrh	r3, [r7, #8]
 8007b7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b86:	d104      	bne.n	8007b92 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f240 4209 	movw	r2, #1033	; 0x409
 8007b8e:	829a      	strh	r2, [r3, #20]
 8007b90:	e002      	b.n	8007b98 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8b3a      	ldrh	r2, [r7, #24]
 8007b9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b9e:	8b3b      	ldrh	r3, [r7, #24]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fb3d 	bl	8008224 <USBH_CtlReq>
 8007baa:	4603      	mov	r3, r0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	789b      	ldrb	r3, [r3, #2]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d10f      	bne.n	8007be8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2205      	movs	r2, #5
 8007bd2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007be8:	2200      	movs	r2, #0
 8007bea:	2100      	movs	r1, #0
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb19 	bl	8008224 <USBH_CtlReq>
 8007bf2:	4603      	mov	r3, r0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	789b      	ldrb	r3, [r3, #2]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d10e      	bne.n	8007c2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2209      	movs	r2, #9
 8007c1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	887a      	ldrh	r2, [r7, #2]
 8007c20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2100      	movs	r1, #0
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 faf6 	bl	8008224 <USBH_CtlReq>
 8007c38:	4603      	mov	r3, r0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	789b      	ldrb	r3, [r3, #2]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d10f      	bne.n	8007c76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fad2 	bl	8008224 <USBH_CtlReq>
 8007c80:	4603      	mov	r3, r0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	789b      	ldrb	r3, [r3, #2]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d10f      	bne.n	8007cbe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 faae 	bl	8008224 <USBH_CtlReq>
 8007cc8:	4603      	mov	r3, r0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	781a      	ldrb	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	785a      	ldrb	r2, [r3, #1]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3302      	adds	r3, #2
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3303      	adds	r3, #3
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	4313      	orrs	r3, r2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	791a      	ldrb	r2, [r3, #4]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	795a      	ldrb	r2, [r3, #5]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	799a      	ldrb	r2, [r3, #6]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	79da      	ldrb	r2, [r3, #7]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	79db      	ldrb	r3, [r3, #7]
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	dc11      	bgt.n	8007d58 <USBH_ParseDevDesc+0x86>
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	db16      	blt.n	8007d66 <USBH_ParseDevDesc+0x94>
 8007d38:	3b08      	subs	r3, #8
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bf14      	ite	ne
 8007d4c:	2301      	movne	r3, #1
 8007d4e:	2300      	moveq	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <USBH_ParseDevDesc+0x8a>
 8007d56:	e006      	b.n	8007d66 <USBH_ParseDevDesc+0x94>
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d104      	bne.n	8007d66 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	79da      	ldrb	r2, [r3, #7]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	71da      	strb	r2, [r3, #7]
      break;
 8007d64:	e003      	b.n	8007d6e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2240      	movs	r2, #64	; 0x40
 8007d6a:	71da      	strb	r2, [r3, #7]
      break;
 8007d6c:	bf00      	nop
  }

  if (length > 8U)
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d939      	bls.n	8007de8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3308      	adds	r3, #8
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	3309      	adds	r3, #9
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	330a      	adds	r3, #10
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	330b      	adds	r3, #11
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	330c      	adds	r3, #12
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	330d      	adds	r3, #13
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	021b      	lsls	r3, r3, #8
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	7b9a      	ldrb	r2, [r3, #14]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	7bda      	ldrb	r2, [r3, #15]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	7c1a      	ldrb	r2, [r3, #16]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	7c5a      	ldrb	r2, [r3, #17]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	745a      	strb	r2, [r3, #17]
  }
}
 8007de8:	bf00      	nop
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	; 0x30
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e08:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	785a      	ldrb	r2, [r3, #1]
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	3302      	adds	r3, #2
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	3303      	adds	r3, #3
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	021b      	lsls	r3, r3, #8
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e50:	bf28      	it	cs
 8007e52:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	791a      	ldrb	r2, [r3, #4]
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	795a      	ldrb	r2, [r3, #5]
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	799a      	ldrb	r2, [r3, #6]
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	79da      	ldrb	r2, [r3, #7]
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	7a1a      	ldrb	r2, [r3, #8]
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b09      	cmp	r3, #9
 8007e8a:	d002      	beq.n	8007e92 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	2209      	movs	r2, #9
 8007e90:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	2b09      	cmp	r3, #9
 8007e96:	f240 809d 	bls.w	8007fd4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e9a:	2309      	movs	r3, #9
 8007e9c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ea2:	e081      	b.n	8007fa8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ea4:	f107 0316 	add.w	r3, r7, #22
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eac:	f000 f99f 	bl	80081ee <USBH_GetNextDesc>
 8007eb0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d176      	bne.n	8007fa8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d002      	beq.n	8007ec8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	2209      	movs	r2, #9
 8007ec6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ecc:	221a      	movs	r2, #26
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	6a3a      	ldr	r2, [r7, #32]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3302      	adds	r3, #2
 8007eda:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ede:	69f8      	ldr	r0, [r7, #28]
 8007ee0:	f000 f87e 	bl	8007fe0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eee:	e043      	b.n	8007f78 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ef0:	f107 0316 	add.w	r3, r7, #22
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef8:	f000 f979 	bl	80081ee <USBH_GetNextDesc>
 8007efc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d138      	bne.n	8007f78 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	795b      	ldrb	r3, [r3, #5]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d10f      	bne.n	8007f2e <USBH_ParseCfgDesc+0x13a>
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	799b      	ldrb	r3, [r3, #6]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d10b      	bne.n	8007f2e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	79db      	ldrb	r3, [r3, #7]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10f      	bne.n	8007f3e <USBH_ParseCfgDesc+0x14a>
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	d00b      	beq.n	8007f3e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	2209      	movs	r2, #9
 8007f2a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f2c:	e007      	b.n	8007f3e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b07      	cmp	r3, #7
 8007f34:	d004      	beq.n	8007f40 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	2207      	movs	r2, #7
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e000      	b.n	8007f40 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f3e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f48:	3201      	adds	r2, #1
 8007f4a:	00d2      	lsls	r2, r2, #3
 8007f4c:	211a      	movs	r1, #26
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	3308      	adds	r3, #8
 8007f56:	6a3a      	ldr	r2, [r7, #32]
 8007f58:	4413      	add	r3, r2
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f86b 	bl	800803e <USBH_ParseEPDesc>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f72:	3301      	adds	r3, #1
 8007f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	791b      	ldrb	r3, [r3, #4]
 8007f7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d204      	bcs.n	8007f8e <USBH_ParseCfgDesc+0x19a>
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	885a      	ldrh	r2, [r3, #2]
 8007f88:	8afb      	ldrh	r3, [r7, #22]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d8b0      	bhi.n	8007ef0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	791b      	ldrb	r3, [r3, #4]
 8007f92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d201      	bcs.n	8007f9e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e01c      	b.n	8007fd8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d805      	bhi.n	8007fbc <USBH_ParseCfgDesc+0x1c8>
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	885a      	ldrh	r2, [r3, #2]
 8007fb4:	8afb      	ldrh	r3, [r7, #22]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	f63f af74 	bhi.w	8007ea4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	791b      	ldrb	r3, [r3, #4]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	bf28      	it	cs
 8007fc4:	2302      	movcs	r3, #2
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d201      	bcs.n	8007fd4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e001      	b.n	8007fd8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3730      	adds	r7, #48	; 0x30
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	785a      	ldrb	r2, [r3, #1]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	789a      	ldrb	r2, [r3, #2]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	78da      	ldrb	r2, [r3, #3]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	791a      	ldrb	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	795a      	ldrb	r2, [r3, #5]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	799a      	ldrb	r2, [r3, #6]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	79da      	ldrb	r2, [r3, #7]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	7a1a      	ldrb	r2, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	721a      	strb	r2, [r3, #8]
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800803e:	b480      	push	{r7}
 8008040:	b087      	sub	sp, #28
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	781a      	ldrb	r2, [r3, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	785a      	ldrb	r2, [r3, #1]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	789a      	ldrb	r2, [r3, #2]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	78da      	ldrb	r2, [r3, #3]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3305      	adds	r3, #5
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	b29a      	uxth	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	799a      	ldrb	r2, [r3, #6]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	889b      	ldrh	r3, [r3, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800809a:	2303      	movs	r3, #3
 800809c:	75fb      	strb	r3, [r7, #23]
 800809e:	e033      	b.n	8008108 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	889b      	ldrh	r3, [r3, #4]
 80080a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080a8:	f023 0307 	bic.w	r3, r3, #7
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	889b      	ldrh	r3, [r3, #4]
 80080b6:	b21a      	sxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3304      	adds	r3, #4
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b299      	uxth	r1, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3305      	adds	r3, #5
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	430b      	orrs	r3, r1
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d110      	bne.n	80080fa <USBH_ParseEPDesc+0xbc>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b299      	uxth	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3305      	adds	r3, #5
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	430b      	orrs	r3, r1
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b21b      	sxth	r3, r3
 80080f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080f6:	b21b      	sxth	r3, r3
 80080f8:	e001      	b.n	80080fe <USBH_ParseEPDesc+0xc0>
 80080fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080fe:	4313      	orrs	r3, r2
 8008100:	b21b      	sxth	r3, r3
 8008102:	b29a      	uxth	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800810e:	2b00      	cmp	r3, #0
 8008110:	d116      	bne.n	8008140 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	78db      	ldrb	r3, [r3, #3]
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	2b01      	cmp	r3, #1
 800811c:	d005      	beq.n	800812a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	78db      	ldrb	r3, [r3, #3]
 8008122:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008126:	2b03      	cmp	r3, #3
 8008128:	d127      	bne.n	800817a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	799b      	ldrb	r3, [r3, #6]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <USBH_ParseEPDesc+0xfc>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	799b      	ldrb	r3, [r3, #6]
 8008136:	2b10      	cmp	r3, #16
 8008138:	d91f      	bls.n	800817a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800813a:	2303      	movs	r3, #3
 800813c:	75fb      	strb	r3, [r7, #23]
 800813e:	e01c      	b.n	800817a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	78db      	ldrb	r3, [r3, #3]
 8008144:	f003 0303 	and.w	r3, r3, #3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d10a      	bne.n	8008162 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	799b      	ldrb	r3, [r3, #6]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <USBH_ParseEPDesc+0x11e>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	799b      	ldrb	r3, [r3, #6]
 8008158:	2b10      	cmp	r3, #16
 800815a:	d90e      	bls.n	800817a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800815c:	2303      	movs	r3, #3
 800815e:	75fb      	strb	r3, [r7, #23]
 8008160:	e00b      	b.n	800817a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	78db      	ldrb	r3, [r3, #3]
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b03      	cmp	r3, #3
 800816c:	d105      	bne.n	800817a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	799b      	ldrb	r3, [r3, #6]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008176:	2303      	movs	r3, #3
 8008178:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
}
 800817c:	4618      	mov	r0, r3
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3301      	adds	r3, #1
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d120      	bne.n	80081e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	1e9a      	subs	r2, r3, #2
 80081a6:	88fb      	ldrh	r3, [r7, #6]
 80081a8:	4293      	cmp	r3, r2
 80081aa:	bf28      	it	cs
 80081ac:	4613      	movcs	r3, r2
 80081ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3302      	adds	r3, #2
 80081b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80081b6:	2300      	movs	r3, #0
 80081b8:	82fb      	strh	r3, [r7, #22]
 80081ba:	e00b      	b.n	80081d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081bc:	8afb      	ldrh	r3, [r7, #22]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081ce:	8afb      	ldrh	r3, [r7, #22]
 80081d0:	3302      	adds	r3, #2
 80081d2:	82fb      	strh	r3, [r7, #22]
 80081d4:	8afa      	ldrh	r2, [r7, #22]
 80081d6:	8abb      	ldrh	r3, [r7, #20]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d3ef      	bcc.n	80081bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]
  }
}
 80081e2:	bf00      	nop
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	881a      	ldrh	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	4413      	add	r3, r2
 8008204:	b29a      	uxth	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4413      	add	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008216:	68fb      	ldr	r3, [r7, #12]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	4613      	mov	r3, r2
 8008230:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008232:	2301      	movs	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	789b      	ldrb	r3, [r3, #2]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d002      	beq.n	8008244 <USBH_CtlReq+0x20>
 800823e:	2b02      	cmp	r3, #2
 8008240:	d00f      	beq.n	8008262 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008242:	e027      	b.n	8008294 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	88fa      	ldrh	r2, [r7, #6]
 800824e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2202      	movs	r2, #2
 800825a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800825c:	2301      	movs	r3, #1
 800825e:	75fb      	strb	r3, [r7, #23]
      break;
 8008260:	e018      	b.n	8008294 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 f81c 	bl	80082a0 <USBH_HandleControl>
 8008268:	4603      	mov	r3, r0
 800826a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <USBH_CtlReq+0x54>
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d106      	bne.n	8008286 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2201      	movs	r2, #1
 800827c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	761a      	strb	r2, [r3, #24]
      break;
 8008284:	e005      	b.n	8008292 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d102      	bne.n	8008292 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2201      	movs	r2, #1
 8008290:	709a      	strb	r2, [r3, #2]
      break;
 8008292:	bf00      	nop
  }
  return status;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082a8:	2301      	movs	r3, #1
 80082aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	7e1b      	ldrb	r3, [r3, #24]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	2b0a      	cmp	r3, #10
 80082b8:	f200 8156 	bhi.w	8008568 <USBH_HandleControl+0x2c8>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBH_HandleControl+0x24>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	0800830b 	.word	0x0800830b
 80082cc:	08008375 	.word	0x08008375
 80082d0:	0800839b 	.word	0x0800839b
 80082d4:	080083d3 	.word	0x080083d3
 80082d8:	080083fd 	.word	0x080083fd
 80082dc:	0800844f 	.word	0x0800844f
 80082e0:	08008471 	.word	0x08008471
 80082e4:	080084ad 	.word	0x080084ad
 80082e8:	080084d3 	.word	0x080084d3
 80082ec:	08008511 	.word	0x08008511
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f103 0110 	add.w	r1, r3, #16
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	795b      	ldrb	r3, [r3, #5]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f943 	bl	8008588 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	761a      	strb	r2, [r3, #24]
      break;
 8008308:	e139      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	795b      	ldrb	r3, [r3, #5]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fcc5 	bl	8008ca0 <USBH_LL_GetURBState>
 8008316:	4603      	mov	r3, r0
 8008318:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d11e      	bne.n	800835e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7c1b      	ldrb	r3, [r3, #16]
 8008324:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008328:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8adb      	ldrh	r3, [r3, #22]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008332:	7b7b      	ldrb	r3, [r7, #13]
 8008334:	2b80      	cmp	r3, #128	; 0x80
 8008336:	d103      	bne.n	8008340 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2203      	movs	r2, #3
 800833c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800833e:	e115      	b.n	800856c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2205      	movs	r2, #5
 8008344:	761a      	strb	r2, [r3, #24]
      break;
 8008346:	e111      	b.n	800856c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008348:	7b7b      	ldrb	r3, [r7, #13]
 800834a:	2b80      	cmp	r3, #128	; 0x80
 800834c:	d103      	bne.n	8008356 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2209      	movs	r2, #9
 8008352:	761a      	strb	r2, [r3, #24]
      break;
 8008354:	e10a      	b.n	800856c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2207      	movs	r2, #7
 800835a:	761a      	strb	r2, [r3, #24]
      break;
 800835c:	e106      	b.n	800856c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b04      	cmp	r3, #4
 8008362:	d003      	beq.n	800836c <USBH_HandleControl+0xcc>
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b02      	cmp	r3, #2
 8008368:	f040 8100 	bne.w	800856c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	220b      	movs	r2, #11
 8008370:	761a      	strb	r2, [r3, #24]
      break;
 8008372:	e0fb      	b.n	800856c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6899      	ldr	r1, [r3, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	899a      	ldrh	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	791b      	ldrb	r3, [r3, #4]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f93a 	bl	8008606 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2204      	movs	r2, #4
 8008396:	761a      	strb	r2, [r3, #24]
      break;
 8008398:	e0f1      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	791b      	ldrb	r3, [r3, #4]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fc7d 	bl	8008ca0 <USBH_LL_GetURBState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d102      	bne.n	80083b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2209      	movs	r2, #9
 80083b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b05      	cmp	r3, #5
 80083ba:	d102      	bne.n	80083c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083bc:	2303      	movs	r3, #3
 80083be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083c0:	e0d6      	b.n	8008570 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	f040 80d3 	bne.w	8008570 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	220b      	movs	r2, #11
 80083ce:	761a      	strb	r2, [r3, #24]
      break;
 80083d0:	e0ce      	b.n	8008570 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6899      	ldr	r1, [r3, #8]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	899a      	ldrh	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	795b      	ldrb	r3, [r3, #5]
 80083de:	2001      	movs	r0, #1
 80083e0:	9000      	str	r0, [sp, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f8ea 	bl	80085bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2206      	movs	r2, #6
 80083f8:	761a      	strb	r2, [r3, #24]
      break;
 80083fa:	e0c0      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	795b      	ldrb	r3, [r3, #5]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fc4c 	bl	8008ca0 <USBH_LL_GetURBState>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d103      	bne.n	800841a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2207      	movs	r2, #7
 8008416:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008418:	e0ac      	b.n	8008574 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b05      	cmp	r3, #5
 800841e:	d105      	bne.n	800842c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	220c      	movs	r2, #12
 8008424:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008426:	2303      	movs	r3, #3
 8008428:	73fb      	strb	r3, [r7, #15]
      break;
 800842a:	e0a3      	b.n	8008574 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d103      	bne.n	800843a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2205      	movs	r2, #5
 8008436:	761a      	strb	r2, [r3, #24]
      break;
 8008438:	e09c      	b.n	8008574 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b04      	cmp	r3, #4
 800843e:	f040 8099 	bne.w	8008574 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220b      	movs	r2, #11
 8008446:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008448:	2302      	movs	r3, #2
 800844a:	73fb      	strb	r3, [r7, #15]
      break;
 800844c:	e092      	b.n	8008574 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	791b      	ldrb	r3, [r3, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8d5 	bl	8008606 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2208      	movs	r2, #8
 800846c:	761a      	strb	r2, [r3, #24]

      break;
 800846e:	e086      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	791b      	ldrb	r3, [r3, #4]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fc12 	bl	8008ca0 <USBH_LL_GetURBState>
 800847c:	4603      	mov	r3, r0
 800847e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d105      	bne.n	8008492 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	220d      	movs	r2, #13
 800848a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008490:	e072      	b.n	8008578 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	2b04      	cmp	r3, #4
 8008496:	d103      	bne.n	80084a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	220b      	movs	r2, #11
 800849c:	761a      	strb	r2, [r3, #24]
      break;
 800849e:	e06b      	b.n	8008578 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	d168      	bne.n	8008578 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084a6:	2303      	movs	r3, #3
 80084a8:	73fb      	strb	r3, [r7, #15]
      break;
 80084aa:	e065      	b.n	8008578 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	795b      	ldrb	r3, [r3, #5]
 80084b0:	2201      	movs	r2, #1
 80084b2:	9200      	str	r2, [sp, #0]
 80084b4:	2200      	movs	r2, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f87f 	bl	80085bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	220a      	movs	r2, #10
 80084ce:	761a      	strb	r2, [r3, #24]
      break;
 80084d0:	e055      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	795b      	ldrb	r3, [r3, #5]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fbe1 	bl	8008ca0 <USBH_LL_GetURBState>
 80084de:	4603      	mov	r3, r0
 80084e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d105      	bne.n	80084f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	220d      	movs	r2, #13
 80084f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084f2:	e043      	b.n	800857c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d103      	bne.n	8008502 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2209      	movs	r2, #9
 80084fe:	761a      	strb	r2, [r3, #24]
      break;
 8008500:	e03c      	b.n	800857c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b04      	cmp	r3, #4
 8008506:	d139      	bne.n	800857c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	220b      	movs	r2, #11
 800850c:	761a      	strb	r2, [r3, #24]
      break;
 800850e:	e035      	b.n	800857c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	7e5b      	ldrb	r3, [r3, #25]
 8008514:	3301      	adds	r3, #1
 8008516:	b2da      	uxtb	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	765a      	strb	r2, [r3, #25]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	7e5b      	ldrb	r3, [r3, #25]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d806      	bhi.n	8008532 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008530:	e025      	b.n	800857e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008538:	2106      	movs	r1, #6
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	795b      	ldrb	r3, [r3, #5]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f90c 	bl	8008768 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	791b      	ldrb	r3, [r3, #4]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f906 	bl	8008768 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008562:	2302      	movs	r3, #2
 8008564:	73fb      	strb	r3, [r7, #15]
      break;
 8008566:	e00a      	b.n	800857e <USBH_HandleControl+0x2de>

    default:
      break;
 8008568:	bf00      	nop
 800856a:	e008      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 800856c:	bf00      	nop
 800856e:	e006      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 8008570:	bf00      	nop
 8008572:	e004      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 8008574:	bf00      	nop
 8008576:	e002      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 8008578:	bf00      	nop
 800857a:	e000      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 800857c:	bf00      	nop
  }

  return status;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af04      	add	r7, sp, #16
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008596:	79f9      	ldrb	r1, [r7, #7]
 8008598:	2300      	movs	r3, #0
 800859a:	9303      	str	r3, [sp, #12]
 800859c:	2308      	movs	r3, #8
 800859e:	9302      	str	r3, [sp, #8]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	2300      	movs	r3, #0
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	2300      	movs	r3, #0
 80085aa:	2200      	movs	r2, #0
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 fb46 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af04      	add	r7, sp, #16
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4611      	mov	r1, r2
 80085c8:	461a      	mov	r2, r3
 80085ca:	460b      	mov	r3, r1
 80085cc:	80fb      	strh	r3, [r7, #6]
 80085ce:	4613      	mov	r3, r2
 80085d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085e0:	7979      	ldrb	r1, [r7, #5]
 80085e2:	7e3b      	ldrb	r3, [r7, #24]
 80085e4:	9303      	str	r3, [sp, #12]
 80085e6:	88fb      	ldrh	r3, [r7, #6]
 80085e8:	9302      	str	r3, [sp, #8]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	2301      	movs	r3, #1
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	2200      	movs	r2, #0
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 fb21 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b088      	sub	sp, #32
 800860a:	af04      	add	r7, sp, #16
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	4611      	mov	r1, r2
 8008612:	461a      	mov	r2, r3
 8008614:	460b      	mov	r3, r1
 8008616:	80fb      	strh	r3, [r7, #6]
 8008618:	4613      	mov	r3, r2
 800861a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800861c:	7979      	ldrb	r1, [r7, #5]
 800861e:	2300      	movs	r3, #0
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	2301      	movs	r3, #1
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	2300      	movs	r3, #0
 8008630:	2201      	movs	r2, #1
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 fb03 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008638:	2300      	movs	r3, #0

}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b088      	sub	sp, #32
 8008646:	af04      	add	r7, sp, #16
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	4611      	mov	r1, r2
 800864e:	461a      	mov	r2, r3
 8008650:	460b      	mov	r3, r1
 8008652:	80fb      	strh	r3, [r7, #6]
 8008654:	4613      	mov	r3, r2
 8008656:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008666:	7979      	ldrb	r1, [r7, #5]
 8008668:	7e3b      	ldrb	r3, [r7, #24]
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	88fb      	ldrh	r3, [r7, #6]
 800866e:	9302      	str	r3, [sp, #8]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	2301      	movs	r3, #1
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2302      	movs	r3, #2
 800867a:	2200      	movs	r2, #0
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fade 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af04      	add	r7, sp, #16
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4611      	mov	r1, r2
 8008698:	461a      	mov	r2, r3
 800869a:	460b      	mov	r3, r1
 800869c:	80fb      	strh	r3, [r7, #6]
 800869e:	4613      	mov	r3, r2
 80086a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086a2:	7979      	ldrb	r1, [r7, #5]
 80086a4:	2300      	movs	r3, #0
 80086a6:	9303      	str	r3, [sp, #12]
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	9302      	str	r3, [sp, #8]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	2301      	movs	r3, #1
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	2302      	movs	r3, #2
 80086b6:	2201      	movs	r2, #1
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fac0 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af04      	add	r7, sp, #16
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	4608      	mov	r0, r1
 80086d2:	4611      	mov	r1, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	70fb      	strb	r3, [r7, #3]
 80086da:	460b      	mov	r3, r1
 80086dc:	70bb      	strb	r3, [r7, #2]
 80086de:	4613      	mov	r3, r2
 80086e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80086e2:	7878      	ldrb	r0, [r7, #1]
 80086e4:	78ba      	ldrb	r2, [r7, #2]
 80086e6:	78f9      	ldrb	r1, [r7, #3]
 80086e8:	8b3b      	ldrh	r3, [r7, #24]
 80086ea:	9302      	str	r3, [sp, #8]
 80086ec:	7d3b      	ldrb	r3, [r7, #20]
 80086ee:	9301      	str	r3, [sp, #4]
 80086f0:	7c3b      	ldrb	r3, [r7, #16]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	4603      	mov	r3, r0
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa53 	bl	8008ba2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa72 	bl	8008c00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f836 	bl	80087a4 <USBH_GetFreePipe>
 8008738:	4603      	mov	r3, r0
 800873a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800873c:	89fb      	ldrh	r3, [r7, #14]
 800873e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008742:	4293      	cmp	r3, r2
 8008744:	d00a      	beq.n	800875c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	89fb      	ldrh	r3, [r7, #14]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	33e0      	adds	r3, #224	; 0xe0
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800875c:	89fb      	ldrh	r3, [r7, #14]
 800875e:	b2db      	uxtb	r3, r3
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	2b0f      	cmp	r3, #15
 8008778:	d80d      	bhi.n	8008796 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	33e0      	adds	r3, #224	; 0xe0
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	33e0      	adds	r3, #224	; 0xe0
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087b0:	2300      	movs	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
 80087b4:	e00f      	b.n	80087d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	33e0      	adds	r3, #224	; 0xe0
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d102      	bne.n	80087d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	e007      	b.n	80087e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	3301      	adds	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b0f      	cmp	r3, #15
 80087da:	d9ec      	bls.n	80087b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087f0:	2201      	movs	r2, #1
 80087f2:	490e      	ldr	r1, [pc, #56]	; (800882c <MX_USB_HOST_Init+0x40>)
 80087f4:	480e      	ldr	r0, [pc, #56]	; (8008830 <MX_USB_HOST_Init+0x44>)
 80087f6:	f7fe fba7 	bl	8006f48 <USBH_Init>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008800:	f7f8 f922 	bl	8000a48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008804:	490b      	ldr	r1, [pc, #44]	; (8008834 <MX_USB_HOST_Init+0x48>)
 8008806:	480a      	ldr	r0, [pc, #40]	; (8008830 <MX_USB_HOST_Init+0x44>)
 8008808:	f7fe fc2c 	bl	8007064 <USBH_RegisterClass>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008812:	f7f8 f919 	bl	8000a48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008816:	4806      	ldr	r0, [pc, #24]	; (8008830 <MX_USB_HOST_Init+0x44>)
 8008818:	f7fe fcb0 	bl	800717c <USBH_Start>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008822:	f7f8 f911 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008826:	bf00      	nop
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	0800884d 	.word	0x0800884d
 8008830:	20000228 	.word	0x20000228
 8008834:	2000000c 	.word	0x2000000c

08008838 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800883c:	4802      	ldr	r0, [pc, #8]	; (8008848 <MX_USB_HOST_Process+0x10>)
 800883e:	f7fe fcad 	bl	800719c <USBH_Process>
}
 8008842:	bf00      	nop
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000228 	.word	0x20000228

0800884c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008858:	78fb      	ldrb	r3, [r7, #3]
 800885a:	3b01      	subs	r3, #1
 800885c:	2b04      	cmp	r3, #4
 800885e:	d819      	bhi.n	8008894 <USBH_UserProcess+0x48>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <USBH_UserProcess+0x1c>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	08008895 	.word	0x08008895
 800886c:	08008885 	.word	0x08008885
 8008870:	08008895 	.word	0x08008895
 8008874:	0800888d 	.word	0x0800888d
 8008878:	0800887d 	.word	0x0800887d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <USBH_UserProcess+0x58>)
 800887e:	2203      	movs	r2, #3
 8008880:	701a      	strb	r2, [r3, #0]
  break;
 8008882:	e008      	b.n	8008896 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008884:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <USBH_UserProcess+0x58>)
 8008886:	2202      	movs	r2, #2
 8008888:	701a      	strb	r2, [r3, #0]
  break;
 800888a:	e004      	b.n	8008896 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800888c:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <USBH_UserProcess+0x58>)
 800888e:	2201      	movs	r2, #1
 8008890:	701a      	strb	r2, [r3, #0]
  break;
 8008892:	e000      	b.n	8008896 <USBH_UserProcess+0x4a>

  default:
  break;
 8008894:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000600 	.word	0x20000600

080088a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	609a      	str	r2, [r3, #8]
 80088bc:	60da      	str	r2, [r3, #12]
 80088be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088c8:	d147      	bne.n	800895a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	4b25      	ldr	r3, [pc, #148]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	4a24      	ldr	r2, [pc, #144]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 80088d4:	f043 0301 	orr.w	r3, r3, #1
 80088d8:	6313      	str	r3, [r2, #48]	; 0x30
 80088da:	4b22      	ldr	r3, [pc, #136]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088f4:	f107 0314 	add.w	r3, r7, #20
 80088f8:	4619      	mov	r1, r3
 80088fa:	481b      	ldr	r0, [pc, #108]	; (8008968 <HAL_HCD_MspInit+0xc0>)
 80088fc:	f7f8 fd1c 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008900:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008906:	2302      	movs	r3, #2
 8008908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890a:	2300      	movs	r3, #0
 800890c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800890e:	2300      	movs	r3, #0
 8008910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008912:	230a      	movs	r3, #10
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008916:	f107 0314 	add.w	r3, r7, #20
 800891a:	4619      	mov	r1, r3
 800891c:	4812      	ldr	r0, [pc, #72]	; (8008968 <HAL_HCD_MspInit+0xc0>)
 800891e:	f7f8 fd0b 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008922:	4b10      	ldr	r3, [pc, #64]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008926:	4a0f      	ldr	r2, [pc, #60]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892c:	6353      	str	r3, [r2, #52]	; 0x34
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008936:	4a0b      	ldr	r2, [pc, #44]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800893c:	6453      	str	r3, [r2, #68]	; 0x44
 800893e:	4b09      	ldr	r3, [pc, #36]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	2043      	movs	r0, #67	; 0x43
 8008950:	f7f8 fc29 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008954:	2043      	movs	r0, #67	; 0x43
 8008956:	f7f8 fc42 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800895a:	bf00      	nop
 800895c:	3728      	adds	r7, #40	; 0x28
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	40023800 	.word	0x40023800
 8008968:	40020000 	.word	0x40020000

0800896c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe ffed 	bl	800795a <USBH_LL_IncTimer>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff f825 	bl	80079e6 <USBH_LL_Connect>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff f82e 	bl	8007a14 <USBH_LL_Disconnect>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
 80089cc:	4613      	mov	r3, r2
 80089ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe ffdf 	bl	80079ae <USBH_LL_PortEnabled>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe ffdf 	bl	80079ca <USBH_LL_PortDisabled>
}
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d12a      	bne.n	8008a7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a26:	4a18      	ldr	r2, [pc, #96]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a15      	ldr	r2, [pc, #84]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a32:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a3e:	4b12      	ldr	r3, [pc, #72]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a40:	2208      	movs	r2, #8
 8008a42:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a46:	2201      	movs	r2, #1
 8008a48:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a4a:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a50:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a52:	2202      	movs	r2, #2
 8008a54:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a5c:	480a      	ldr	r0, [pc, #40]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a5e:	f7f8 fe20 	bl	80016a2 <HAL_HCD_Init>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a68:	f7f7 ffee 	bl	8000a48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a6c:	4806      	ldr	r0, [pc, #24]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a6e:	f7f9 fa04 	bl	8001e7a <HAL_HCD_GetCurrentFrame>
 8008a72:	4603      	mov	r3, r0
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fe ff60 	bl	800793c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000604 	.word	0x20000604

08008a8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f9 f973 	bl	8001d8e <HAL_HCD_Start>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 f95c 	bl	8008d6c <USBH_Get_USB_Status>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7f9 f97b 	bl	8001dd4 <HAL_HCD_Stop>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 f941 	bl	8008d6c <USBH_Get_USB_Status>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7f9 f9c3 	bl	8001e96 <HAL_HCD_GetCurrentSpeed>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d00c      	beq.n	8008b30 <USBH_LL_GetSpeed+0x38>
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d80d      	bhi.n	8008b36 <USBH_LL_GetSpeed+0x3e>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <USBH_LL_GetSpeed+0x2c>
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d003      	beq.n	8008b2a <USBH_LL_GetSpeed+0x32>
 8008b22:	e008      	b.n	8008b36 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e008      	b.n	8008b3c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2e:	e005      	b.n	8008b3c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b30:	2302      	movs	r3, #2
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	e002      	b.n	8008b3c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3a:	bf00      	nop
  }
  return  speed;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7f9 f956 	bl	8001e0e <HAL_HCD_ResetPort>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 f8ff 	bl	8008d6c <USBH_Get_USB_Status>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f9 f95d 	bl	8001e52 <HAL_HCD_HC_GetXferCount>
 8008b98:	4603      	mov	r3, r0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ba2:	b590      	push	{r4, r7, lr}
 8008ba4:	b089      	sub	sp, #36	; 0x24
 8008ba6:	af04      	add	r7, sp, #16
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	70fb      	strb	r3, [r7, #3]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70bb      	strb	r3, [r7, #2]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bca:	787c      	ldrb	r4, [r7, #1]
 8008bcc:	78ba      	ldrb	r2, [r7, #2]
 8008bce:	78f9      	ldrb	r1, [r7, #3]
 8008bd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	4623      	mov	r3, r4
 8008be2:	f7f8 fdc0 	bl	8001766 <HAL_HCD_HC_Init>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f8bd 	bl	8008d6c <USBH_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd90      	pop	{r4, r7, pc}

08008c00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7f8 fe30 	bl	8001884 <HAL_HCD_HC_Halt>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f89e 	bl	8008d6c <USBH_Get_USB_Status>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c3e:	b590      	push	{r4, r7, lr}
 8008c40:	b089      	sub	sp, #36	; 0x24
 8008c42:	af04      	add	r7, sp, #16
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	4608      	mov	r0, r1
 8008c48:	4611      	mov	r1, r2
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	70fb      	strb	r3, [r7, #3]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70bb      	strb	r3, [r7, #2]
 8008c54:	4613      	mov	r3, r2
 8008c56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c66:	787c      	ldrb	r4, [r7, #1]
 8008c68:	78ba      	ldrb	r2, [r7, #2]
 8008c6a:	78f9      	ldrb	r1, [r7, #3]
 8008c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	4623      	mov	r3, r4
 8008c82:	f7f8 fe23 	bl	80018cc <HAL_HCD_HC_SubmitRequest>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 f86d 	bl	8008d6c <USBH_Get_USB_Status>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd90      	pop	{r4, r7, pc}

08008ca0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cb2:	78fa      	ldrb	r2, [r7, #3]
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7f9 f8b7 	bl	8001e2a <HAL_HCD_HC_GetURBState>
 8008cbc:	4603      	mov	r3, r0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d103      	bne.n	8008ce4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f870 	bl	8008dc4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008ce4:	20c8      	movs	r0, #200	; 0xc8
 8008ce6:	f7f8 f95f 	bl	8000fa8 <HAL_Delay>
  return USBH_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
 8008d00:	4613      	mov	r3, r2
 8008d02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	212c      	movs	r1, #44	; 0x2c
 8008d12:	fb01 f303 	mul.w	r3, r1, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	333b      	adds	r3, #59	; 0x3b
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	212c      	movs	r1, #44	; 0x2c
 8008d26:	fb01 f303 	mul.w	r3, r1, r3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3354      	adds	r3, #84	; 0x54
 8008d2e:	78ba      	ldrb	r2, [r7, #2]
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e008      	b.n	8008d46 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	212c      	movs	r1, #44	; 0x2c
 8008d3a:	fb01 f303 	mul.w	r3, r1, r3
 8008d3e:	4413      	add	r3, r2
 8008d40:	3355      	adds	r3, #85	; 0x55
 8008d42:	78ba      	ldrb	r2, [r7, #2]
 8008d44:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7f8 f923 	bl	8000fa8 <HAL_Delay>
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d817      	bhi.n	8008db0 <USBH_Get_USB_Status+0x44>
 8008d80:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <USBH_Get_USB_Status+0x1c>)
 8008d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d86:	bf00      	nop
 8008d88:	08008d99 	.word	0x08008d99
 8008d8c:	08008d9f 	.word	0x08008d9f
 8008d90:	08008da5 	.word	0x08008da5
 8008d94:	08008dab 	.word	0x08008dab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9c:	e00b      	b.n	8008db6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	73fb      	strb	r3, [r7, #15]
    break;
 8008da2:	e008      	b.n	8008db6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008da4:	2301      	movs	r3, #1
 8008da6:	73fb      	strb	r3, [r7, #15]
    break;
 8008da8:	e005      	b.n	8008db6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008daa:	2302      	movs	r3, #2
 8008dac:	73fb      	strb	r3, [r7, #15]
    break;
 8008dae:	e002      	b.n	8008db6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008db0:	2302      	movs	r3, #2
 8008db2:	73fb      	strb	r3, [r7, #15]
    break;
 8008db4:	bf00      	nop
  }
  return usb_status;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e001      	b.n	8008de2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008dde:	2301      	movs	r3, #1
 8008de0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	461a      	mov	r2, r3
 8008de6:	2101      	movs	r1, #1
 8008de8:	4803      	ldr	r0, [pc, #12]	; (8008df8 <MX_DriverVbusFS+0x34>)
 8008dea:	f7f8 fc41 	bl	8001670 <HAL_GPIO_WritePin>
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40020800 	.word	0x40020800

08008dfc <__errno>:
 8008dfc:	4b01      	ldr	r3, [pc, #4]	; (8008e04 <__errno+0x8>)
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	2000002c 	.word	0x2000002c

08008e08 <__libc_init_array>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4d0d      	ldr	r5, [pc, #52]	; (8008e40 <__libc_init_array+0x38>)
 8008e0c:	4c0d      	ldr	r4, [pc, #52]	; (8008e44 <__libc_init_array+0x3c>)
 8008e0e:	1b64      	subs	r4, r4, r5
 8008e10:	10a4      	asrs	r4, r4, #2
 8008e12:	2600      	movs	r6, #0
 8008e14:	42a6      	cmp	r6, r4
 8008e16:	d109      	bne.n	8008e2c <__libc_init_array+0x24>
 8008e18:	4d0b      	ldr	r5, [pc, #44]	; (8008e48 <__libc_init_array+0x40>)
 8008e1a:	4c0c      	ldr	r4, [pc, #48]	; (8008e4c <__libc_init_array+0x44>)
 8008e1c:	f000 fc9e 	bl	800975c <_init>
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	2600      	movs	r6, #0
 8008e26:	42a6      	cmp	r6, r4
 8008e28:	d105      	bne.n	8008e36 <__libc_init_array+0x2e>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e30:	4798      	blx	r3
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7ee      	b.n	8008e14 <__libc_init_array+0xc>
 8008e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3a:	4798      	blx	r3
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7f2      	b.n	8008e26 <__libc_init_array+0x1e>
 8008e40:	080097d8 	.word	0x080097d8
 8008e44:	080097d8 	.word	0x080097d8
 8008e48:	080097d8 	.word	0x080097d8
 8008e4c:	080097dc 	.word	0x080097dc

08008e50 <malloc>:
 8008e50:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <malloc+0xc>)
 8008e52:	4601      	mov	r1, r0
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f000 b87f 	b.w	8008f58 <_malloc_r>
 8008e5a:	bf00      	nop
 8008e5c:	2000002c 	.word	0x2000002c

08008e60 <free>:
 8008e60:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <free+0xc>)
 8008e62:	4601      	mov	r1, r0
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	f000 b80b 	b.w	8008e80 <_free_r>
 8008e6a:	bf00      	nop
 8008e6c:	2000002c 	.word	0x2000002c

08008e70 <memset>:
 8008e70:	4402      	add	r2, r0
 8008e72:	4603      	mov	r3, r0
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d100      	bne.n	8008e7a <memset+0xa>
 8008e78:	4770      	bx	lr
 8008e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7e:	e7f9      	b.n	8008e74 <memset+0x4>

08008e80 <_free_r>:
 8008e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d044      	beq.n	8008f10 <_free_r+0x90>
 8008e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e8a:	9001      	str	r0, [sp, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e92:	bfb8      	it	lt
 8008e94:	18e4      	addlt	r4, r4, r3
 8008e96:	f000 f903 	bl	80090a0 <__malloc_lock>
 8008e9a:	4a1e      	ldr	r2, [pc, #120]	; (8008f14 <_free_r+0x94>)
 8008e9c:	9801      	ldr	r0, [sp, #4]
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	b933      	cbnz	r3, 8008eb0 <_free_r+0x30>
 8008ea2:	6063      	str	r3, [r4, #4]
 8008ea4:	6014      	str	r4, [r2, #0]
 8008ea6:	b003      	add	sp, #12
 8008ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eac:	f000 b8fe 	b.w	80090ac <__malloc_unlock>
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d908      	bls.n	8008ec6 <_free_r+0x46>
 8008eb4:	6825      	ldr	r5, [r4, #0]
 8008eb6:	1961      	adds	r1, r4, r5
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	bf01      	itttt	eq
 8008ebc:	6819      	ldreq	r1, [r3, #0]
 8008ebe:	685b      	ldreq	r3, [r3, #4]
 8008ec0:	1949      	addeq	r1, r1, r5
 8008ec2:	6021      	streq	r1, [r4, #0]
 8008ec4:	e7ed      	b.n	8008ea2 <_free_r+0x22>
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	b10b      	cbz	r3, 8008ed0 <_free_r+0x50>
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d9fa      	bls.n	8008ec6 <_free_r+0x46>
 8008ed0:	6811      	ldr	r1, [r2, #0]
 8008ed2:	1855      	adds	r5, r2, r1
 8008ed4:	42a5      	cmp	r5, r4
 8008ed6:	d10b      	bne.n	8008ef0 <_free_r+0x70>
 8008ed8:	6824      	ldr	r4, [r4, #0]
 8008eda:	4421      	add	r1, r4
 8008edc:	1854      	adds	r4, r2, r1
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	d1e0      	bne.n	8008ea6 <_free_r+0x26>
 8008ee4:	681c      	ldr	r4, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	6053      	str	r3, [r2, #4]
 8008eea:	4421      	add	r1, r4
 8008eec:	6011      	str	r1, [r2, #0]
 8008eee:	e7da      	b.n	8008ea6 <_free_r+0x26>
 8008ef0:	d902      	bls.n	8008ef8 <_free_r+0x78>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	e7d6      	b.n	8008ea6 <_free_r+0x26>
 8008ef8:	6825      	ldr	r5, [r4, #0]
 8008efa:	1961      	adds	r1, r4, r5
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf04      	itt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	bf04      	itt	eq
 8008f08:	1949      	addeq	r1, r1, r5
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	6054      	str	r4, [r2, #4]
 8008f0e:	e7ca      	b.n	8008ea6 <_free_r+0x26>
 8008f10:	b003      	add	sp, #12
 8008f12:	bd30      	pop	{r4, r5, pc}
 8008f14:	20000908 	.word	0x20000908

08008f18 <sbrk_aligned>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4e0e      	ldr	r6, [pc, #56]	; (8008f54 <sbrk_aligned+0x3c>)
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	6831      	ldr	r1, [r6, #0]
 8008f20:	4605      	mov	r5, r0
 8008f22:	b911      	cbnz	r1, 8008f2a <sbrk_aligned+0x12>
 8008f24:	f000 f88c 	bl	8009040 <_sbrk_r>
 8008f28:	6030      	str	r0, [r6, #0]
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 f887 	bl	8009040 <_sbrk_r>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d00a      	beq.n	8008f4c <sbrk_aligned+0x34>
 8008f36:	1cc4      	adds	r4, r0, #3
 8008f38:	f024 0403 	bic.w	r4, r4, #3
 8008f3c:	42a0      	cmp	r0, r4
 8008f3e:	d007      	beq.n	8008f50 <sbrk_aligned+0x38>
 8008f40:	1a21      	subs	r1, r4, r0
 8008f42:	4628      	mov	r0, r5
 8008f44:	f000 f87c 	bl	8009040 <_sbrk_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d101      	bne.n	8008f50 <sbrk_aligned+0x38>
 8008f4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f50:	4620      	mov	r0, r4
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	2000090c 	.word	0x2000090c

08008f58 <_malloc_r>:
 8008f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5c:	1ccd      	adds	r5, r1, #3
 8008f5e:	f025 0503 	bic.w	r5, r5, #3
 8008f62:	3508      	adds	r5, #8
 8008f64:	2d0c      	cmp	r5, #12
 8008f66:	bf38      	it	cc
 8008f68:	250c      	movcc	r5, #12
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	db01      	blt.n	8008f74 <_malloc_r+0x1c>
 8008f70:	42a9      	cmp	r1, r5
 8008f72:	d905      	bls.n	8008f80 <_malloc_r+0x28>
 8008f74:	230c      	movs	r3, #12
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	2600      	movs	r6, #0
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f80:	4e2e      	ldr	r6, [pc, #184]	; (800903c <_malloc_r+0xe4>)
 8008f82:	f000 f88d 	bl	80090a0 <__malloc_lock>
 8008f86:	6833      	ldr	r3, [r6, #0]
 8008f88:	461c      	mov	r4, r3
 8008f8a:	bb34      	cbnz	r4, 8008fda <_malloc_r+0x82>
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f7ff ffc2 	bl	8008f18 <sbrk_aligned>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	4604      	mov	r4, r0
 8008f98:	d14d      	bne.n	8009036 <_malloc_r+0xde>
 8008f9a:	6834      	ldr	r4, [r6, #0]
 8008f9c:	4626      	mov	r6, r4
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	d140      	bne.n	8009024 <_malloc_r+0xcc>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	eb04 0803 	add.w	r8, r4, r3
 8008fac:	f000 f848 	bl	8009040 <_sbrk_r>
 8008fb0:	4580      	cmp	r8, r0
 8008fb2:	d13a      	bne.n	800902a <_malloc_r+0xd2>
 8008fb4:	6821      	ldr	r1, [r4, #0]
 8008fb6:	3503      	adds	r5, #3
 8008fb8:	1a6d      	subs	r5, r5, r1
 8008fba:	f025 0503 	bic.w	r5, r5, #3
 8008fbe:	3508      	adds	r5, #8
 8008fc0:	2d0c      	cmp	r5, #12
 8008fc2:	bf38      	it	cc
 8008fc4:	250c      	movcc	r5, #12
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff ffa5 	bl	8008f18 <sbrk_aligned>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d02b      	beq.n	800902a <_malloc_r+0xd2>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	442b      	add	r3, r5
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	e00e      	b.n	8008ff8 <_malloc_r+0xa0>
 8008fda:	6822      	ldr	r2, [r4, #0]
 8008fdc:	1b52      	subs	r2, r2, r5
 8008fde:	d41e      	bmi.n	800901e <_malloc_r+0xc6>
 8008fe0:	2a0b      	cmp	r2, #11
 8008fe2:	d916      	bls.n	8009012 <_malloc_r+0xba>
 8008fe4:	1961      	adds	r1, r4, r5
 8008fe6:	42a3      	cmp	r3, r4
 8008fe8:	6025      	str	r5, [r4, #0]
 8008fea:	bf18      	it	ne
 8008fec:	6059      	strne	r1, [r3, #4]
 8008fee:	6863      	ldr	r3, [r4, #4]
 8008ff0:	bf08      	it	eq
 8008ff2:	6031      	streq	r1, [r6, #0]
 8008ff4:	5162      	str	r2, [r4, r5]
 8008ff6:	604b      	str	r3, [r1, #4]
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f104 060b 	add.w	r6, r4, #11
 8008ffe:	f000 f855 	bl	80090ac <__malloc_unlock>
 8009002:	f026 0607 	bic.w	r6, r6, #7
 8009006:	1d23      	adds	r3, r4, #4
 8009008:	1af2      	subs	r2, r6, r3
 800900a:	d0b6      	beq.n	8008f7a <_malloc_r+0x22>
 800900c:	1b9b      	subs	r3, r3, r6
 800900e:	50a3      	str	r3, [r4, r2]
 8009010:	e7b3      	b.n	8008f7a <_malloc_r+0x22>
 8009012:	6862      	ldr	r2, [r4, #4]
 8009014:	42a3      	cmp	r3, r4
 8009016:	bf0c      	ite	eq
 8009018:	6032      	streq	r2, [r6, #0]
 800901a:	605a      	strne	r2, [r3, #4]
 800901c:	e7ec      	b.n	8008ff8 <_malloc_r+0xa0>
 800901e:	4623      	mov	r3, r4
 8009020:	6864      	ldr	r4, [r4, #4]
 8009022:	e7b2      	b.n	8008f8a <_malloc_r+0x32>
 8009024:	4634      	mov	r4, r6
 8009026:	6876      	ldr	r6, [r6, #4]
 8009028:	e7b9      	b.n	8008f9e <_malloc_r+0x46>
 800902a:	230c      	movs	r3, #12
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	4638      	mov	r0, r7
 8009030:	f000 f83c 	bl	80090ac <__malloc_unlock>
 8009034:	e7a1      	b.n	8008f7a <_malloc_r+0x22>
 8009036:	6025      	str	r5, [r4, #0]
 8009038:	e7de      	b.n	8008ff8 <_malloc_r+0xa0>
 800903a:	bf00      	nop
 800903c:	20000908 	.word	0x20000908

08009040 <_sbrk_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d06      	ldr	r5, [pc, #24]	; (800905c <_sbrk_r+0x1c>)
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	f7f7 fec8 	bl	8000de0 <_sbrk>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_sbrk_r+0x1a>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_sbrk_r+0x1a>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20000910 	.word	0x20000910

08009060 <siprintf>:
 8009060:	b40e      	push	{r1, r2, r3}
 8009062:	b500      	push	{lr}
 8009064:	b09c      	sub	sp, #112	; 0x70
 8009066:	ab1d      	add	r3, sp, #116	; 0x74
 8009068:	9002      	str	r0, [sp, #8]
 800906a:	9006      	str	r0, [sp, #24]
 800906c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009070:	4809      	ldr	r0, [pc, #36]	; (8009098 <siprintf+0x38>)
 8009072:	9107      	str	r1, [sp, #28]
 8009074:	9104      	str	r1, [sp, #16]
 8009076:	4909      	ldr	r1, [pc, #36]	; (800909c <siprintf+0x3c>)
 8009078:	f853 2b04 	ldr.w	r2, [r3], #4
 800907c:	9105      	str	r1, [sp, #20]
 800907e:	6800      	ldr	r0, [r0, #0]
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	a902      	add	r1, sp, #8
 8009084:	f000 f874 	bl	8009170 <_svfiprintf_r>
 8009088:	9b02      	ldr	r3, [sp, #8]
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	b01c      	add	sp, #112	; 0x70
 8009090:	f85d eb04 	ldr.w	lr, [sp], #4
 8009094:	b003      	add	sp, #12
 8009096:	4770      	bx	lr
 8009098:	2000002c 	.word	0x2000002c
 800909c:	ffff0208 	.word	0xffff0208

080090a0 <__malloc_lock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__malloc_lock+0x8>)
 80090a2:	f000 baf9 	b.w	8009698 <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000914 	.word	0x20000914

080090ac <__malloc_unlock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__malloc_unlock+0x8>)
 80090ae:	f000 baf4 	b.w	800969a <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	20000914 	.word	0x20000914

080090b8 <__ssputs_r>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	688e      	ldr	r6, [r1, #8]
 80090be:	429e      	cmp	r6, r3
 80090c0:	4682      	mov	sl, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	4690      	mov	r8, r2
 80090c6:	461f      	mov	r7, r3
 80090c8:	d838      	bhi.n	800913c <__ssputs_r+0x84>
 80090ca:	898a      	ldrh	r2, [r1, #12]
 80090cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090d0:	d032      	beq.n	8009138 <__ssputs_r+0x80>
 80090d2:	6825      	ldr	r5, [r4, #0]
 80090d4:	6909      	ldr	r1, [r1, #16]
 80090d6:	eba5 0901 	sub.w	r9, r5, r1
 80090da:	6965      	ldr	r5, [r4, #20]
 80090dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090e4:	3301      	adds	r3, #1
 80090e6:	444b      	add	r3, r9
 80090e8:	106d      	asrs	r5, r5, #1
 80090ea:	429d      	cmp	r5, r3
 80090ec:	bf38      	it	cc
 80090ee:	461d      	movcc	r5, r3
 80090f0:	0553      	lsls	r3, r2, #21
 80090f2:	d531      	bpl.n	8009158 <__ssputs_r+0xa0>
 80090f4:	4629      	mov	r1, r5
 80090f6:	f7ff ff2f 	bl	8008f58 <_malloc_r>
 80090fa:	4606      	mov	r6, r0
 80090fc:	b950      	cbnz	r0, 8009114 <__ssputs_r+0x5c>
 80090fe:	230c      	movs	r3, #12
 8009100:	f8ca 3000 	str.w	r3, [sl]
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009114:	6921      	ldr	r1, [r4, #16]
 8009116:	464a      	mov	r2, r9
 8009118:	f000 fac0 	bl	800969c <memcpy>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	6126      	str	r6, [r4, #16]
 800912a:	6165      	str	r5, [r4, #20]
 800912c:	444e      	add	r6, r9
 800912e:	eba5 0509 	sub.w	r5, r5, r9
 8009132:	6026      	str	r6, [r4, #0]
 8009134:	60a5      	str	r5, [r4, #8]
 8009136:	463e      	mov	r6, r7
 8009138:	42be      	cmp	r6, r7
 800913a:	d900      	bls.n	800913e <__ssputs_r+0x86>
 800913c:	463e      	mov	r6, r7
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	4632      	mov	r2, r6
 8009142:	4641      	mov	r1, r8
 8009144:	f000 fab8 	bl	80096b8 <memmove>
 8009148:	68a3      	ldr	r3, [r4, #8]
 800914a:	1b9b      	subs	r3, r3, r6
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	4433      	add	r3, r6
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	e7db      	b.n	8009110 <__ssputs_r+0x58>
 8009158:	462a      	mov	r2, r5
 800915a:	f000 fac7 	bl	80096ec <_realloc_r>
 800915e:	4606      	mov	r6, r0
 8009160:	2800      	cmp	r0, #0
 8009162:	d1e1      	bne.n	8009128 <__ssputs_r+0x70>
 8009164:	6921      	ldr	r1, [r4, #16]
 8009166:	4650      	mov	r0, sl
 8009168:	f7ff fe8a 	bl	8008e80 <_free_r>
 800916c:	e7c7      	b.n	80090fe <__ssputs_r+0x46>
	...

08009170 <_svfiprintf_r>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	4698      	mov	r8, r3
 8009176:	898b      	ldrh	r3, [r1, #12]
 8009178:	061b      	lsls	r3, r3, #24
 800917a:	b09d      	sub	sp, #116	; 0x74
 800917c:	4607      	mov	r7, r0
 800917e:	460d      	mov	r5, r1
 8009180:	4614      	mov	r4, r2
 8009182:	d50e      	bpl.n	80091a2 <_svfiprintf_r+0x32>
 8009184:	690b      	ldr	r3, [r1, #16]
 8009186:	b963      	cbnz	r3, 80091a2 <_svfiprintf_r+0x32>
 8009188:	2140      	movs	r1, #64	; 0x40
 800918a:	f7ff fee5 	bl	8008f58 <_malloc_r>
 800918e:	6028      	str	r0, [r5, #0]
 8009190:	6128      	str	r0, [r5, #16]
 8009192:	b920      	cbnz	r0, 800919e <_svfiprintf_r+0x2e>
 8009194:	230c      	movs	r3, #12
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800919c:	e0d1      	b.n	8009342 <_svfiprintf_r+0x1d2>
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	616b      	str	r3, [r5, #20]
 80091a2:	2300      	movs	r3, #0
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	2320      	movs	r3, #32
 80091a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80091b0:	2330      	movs	r3, #48	; 0x30
 80091b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800935c <_svfiprintf_r+0x1ec>
 80091b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091ba:	f04f 0901 	mov.w	r9, #1
 80091be:	4623      	mov	r3, r4
 80091c0:	469a      	mov	sl, r3
 80091c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c6:	b10a      	cbz	r2, 80091cc <_svfiprintf_r+0x5c>
 80091c8:	2a25      	cmp	r2, #37	; 0x25
 80091ca:	d1f9      	bne.n	80091c0 <_svfiprintf_r+0x50>
 80091cc:	ebba 0b04 	subs.w	fp, sl, r4
 80091d0:	d00b      	beq.n	80091ea <_svfiprintf_r+0x7a>
 80091d2:	465b      	mov	r3, fp
 80091d4:	4622      	mov	r2, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	4638      	mov	r0, r7
 80091da:	f7ff ff6d 	bl	80090b8 <__ssputs_r>
 80091de:	3001      	adds	r0, #1
 80091e0:	f000 80aa 	beq.w	8009338 <_svfiprintf_r+0x1c8>
 80091e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e6:	445a      	add	r2, fp
 80091e8:	9209      	str	r2, [sp, #36]	; 0x24
 80091ea:	f89a 3000 	ldrb.w	r3, [sl]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 80a2 	beq.w	8009338 <_svfiprintf_r+0x1c8>
 80091f4:	2300      	movs	r3, #0
 80091f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091fe:	f10a 0a01 	add.w	sl, sl, #1
 8009202:	9304      	str	r3, [sp, #16]
 8009204:	9307      	str	r3, [sp, #28]
 8009206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800920a:	931a      	str	r3, [sp, #104]	; 0x68
 800920c:	4654      	mov	r4, sl
 800920e:	2205      	movs	r2, #5
 8009210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009214:	4851      	ldr	r0, [pc, #324]	; (800935c <_svfiprintf_r+0x1ec>)
 8009216:	f7f6 ffe3 	bl	80001e0 <memchr>
 800921a:	9a04      	ldr	r2, [sp, #16]
 800921c:	b9d8      	cbnz	r0, 8009256 <_svfiprintf_r+0xe6>
 800921e:	06d0      	lsls	r0, r2, #27
 8009220:	bf44      	itt	mi
 8009222:	2320      	movmi	r3, #32
 8009224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009228:	0711      	lsls	r1, r2, #28
 800922a:	bf44      	itt	mi
 800922c:	232b      	movmi	r3, #43	; 0x2b
 800922e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009232:	f89a 3000 	ldrb.w	r3, [sl]
 8009236:	2b2a      	cmp	r3, #42	; 0x2a
 8009238:	d015      	beq.n	8009266 <_svfiprintf_r+0xf6>
 800923a:	9a07      	ldr	r2, [sp, #28]
 800923c:	4654      	mov	r4, sl
 800923e:	2000      	movs	r0, #0
 8009240:	f04f 0c0a 	mov.w	ip, #10
 8009244:	4621      	mov	r1, r4
 8009246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800924a:	3b30      	subs	r3, #48	; 0x30
 800924c:	2b09      	cmp	r3, #9
 800924e:	d94e      	bls.n	80092ee <_svfiprintf_r+0x17e>
 8009250:	b1b0      	cbz	r0, 8009280 <_svfiprintf_r+0x110>
 8009252:	9207      	str	r2, [sp, #28]
 8009254:	e014      	b.n	8009280 <_svfiprintf_r+0x110>
 8009256:	eba0 0308 	sub.w	r3, r0, r8
 800925a:	fa09 f303 	lsl.w	r3, r9, r3
 800925e:	4313      	orrs	r3, r2
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	46a2      	mov	sl, r4
 8009264:	e7d2      	b.n	800920c <_svfiprintf_r+0x9c>
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	1d19      	adds	r1, r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	9103      	str	r1, [sp, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfbb      	ittet	lt
 8009272:	425b      	neglt	r3, r3
 8009274:	f042 0202 	orrlt.w	r2, r2, #2
 8009278:	9307      	strge	r3, [sp, #28]
 800927a:	9307      	strlt	r3, [sp, #28]
 800927c:	bfb8      	it	lt
 800927e:	9204      	strlt	r2, [sp, #16]
 8009280:	7823      	ldrb	r3, [r4, #0]
 8009282:	2b2e      	cmp	r3, #46	; 0x2e
 8009284:	d10c      	bne.n	80092a0 <_svfiprintf_r+0x130>
 8009286:	7863      	ldrb	r3, [r4, #1]
 8009288:	2b2a      	cmp	r3, #42	; 0x2a
 800928a:	d135      	bne.n	80092f8 <_svfiprintf_r+0x188>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	1d1a      	adds	r2, r3, #4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	9203      	str	r2, [sp, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	bfb8      	it	lt
 8009298:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800929c:	3402      	adds	r4, #2
 800929e:	9305      	str	r3, [sp, #20]
 80092a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800936c <_svfiprintf_r+0x1fc>
 80092a4:	7821      	ldrb	r1, [r4, #0]
 80092a6:	2203      	movs	r2, #3
 80092a8:	4650      	mov	r0, sl
 80092aa:	f7f6 ff99 	bl	80001e0 <memchr>
 80092ae:	b140      	cbz	r0, 80092c2 <_svfiprintf_r+0x152>
 80092b0:	2340      	movs	r3, #64	; 0x40
 80092b2:	eba0 000a 	sub.w	r0, r0, sl
 80092b6:	fa03 f000 	lsl.w	r0, r3, r0
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	4303      	orrs	r3, r0
 80092be:	3401      	adds	r4, #1
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c6:	4826      	ldr	r0, [pc, #152]	; (8009360 <_svfiprintf_r+0x1f0>)
 80092c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092cc:	2206      	movs	r2, #6
 80092ce:	f7f6 ff87 	bl	80001e0 <memchr>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d038      	beq.n	8009348 <_svfiprintf_r+0x1d8>
 80092d6:	4b23      	ldr	r3, [pc, #140]	; (8009364 <_svfiprintf_r+0x1f4>)
 80092d8:	bb1b      	cbnz	r3, 8009322 <_svfiprintf_r+0x1b2>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	3307      	adds	r3, #7
 80092de:	f023 0307 	bic.w	r3, r3, #7
 80092e2:	3308      	adds	r3, #8
 80092e4:	9303      	str	r3, [sp, #12]
 80092e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e8:	4433      	add	r3, r6
 80092ea:	9309      	str	r3, [sp, #36]	; 0x24
 80092ec:	e767      	b.n	80091be <_svfiprintf_r+0x4e>
 80092ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80092f2:	460c      	mov	r4, r1
 80092f4:	2001      	movs	r0, #1
 80092f6:	e7a5      	b.n	8009244 <_svfiprintf_r+0xd4>
 80092f8:	2300      	movs	r3, #0
 80092fa:	3401      	adds	r4, #1
 80092fc:	9305      	str	r3, [sp, #20]
 80092fe:	4619      	mov	r1, r3
 8009300:	f04f 0c0a 	mov.w	ip, #10
 8009304:	4620      	mov	r0, r4
 8009306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800930a:	3a30      	subs	r2, #48	; 0x30
 800930c:	2a09      	cmp	r2, #9
 800930e:	d903      	bls.n	8009318 <_svfiprintf_r+0x1a8>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0c5      	beq.n	80092a0 <_svfiprintf_r+0x130>
 8009314:	9105      	str	r1, [sp, #20]
 8009316:	e7c3      	b.n	80092a0 <_svfiprintf_r+0x130>
 8009318:	fb0c 2101 	mla	r1, ip, r1, r2
 800931c:	4604      	mov	r4, r0
 800931e:	2301      	movs	r3, #1
 8009320:	e7f0      	b.n	8009304 <_svfiprintf_r+0x194>
 8009322:	ab03      	add	r3, sp, #12
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	462a      	mov	r2, r5
 8009328:	4b0f      	ldr	r3, [pc, #60]	; (8009368 <_svfiprintf_r+0x1f8>)
 800932a:	a904      	add	r1, sp, #16
 800932c:	4638      	mov	r0, r7
 800932e:	f3af 8000 	nop.w
 8009332:	1c42      	adds	r2, r0, #1
 8009334:	4606      	mov	r6, r0
 8009336:	d1d6      	bne.n	80092e6 <_svfiprintf_r+0x176>
 8009338:	89ab      	ldrh	r3, [r5, #12]
 800933a:	065b      	lsls	r3, r3, #25
 800933c:	f53f af2c 	bmi.w	8009198 <_svfiprintf_r+0x28>
 8009340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009342:	b01d      	add	sp, #116	; 0x74
 8009344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009348:	ab03      	add	r3, sp, #12
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	462a      	mov	r2, r5
 800934e:	4b06      	ldr	r3, [pc, #24]	; (8009368 <_svfiprintf_r+0x1f8>)
 8009350:	a904      	add	r1, sp, #16
 8009352:	4638      	mov	r0, r7
 8009354:	f000 f87a 	bl	800944c <_printf_i>
 8009358:	e7eb      	b.n	8009332 <_svfiprintf_r+0x1c2>
 800935a:	bf00      	nop
 800935c:	0800979c 	.word	0x0800979c
 8009360:	080097a6 	.word	0x080097a6
 8009364:	00000000 	.word	0x00000000
 8009368:	080090b9 	.word	0x080090b9
 800936c:	080097a2 	.word	0x080097a2

08009370 <_printf_common>:
 8009370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009374:	4616      	mov	r6, r2
 8009376:	4699      	mov	r9, r3
 8009378:	688a      	ldr	r2, [r1, #8]
 800937a:	690b      	ldr	r3, [r1, #16]
 800937c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009380:	4293      	cmp	r3, r2
 8009382:	bfb8      	it	lt
 8009384:	4613      	movlt	r3, r2
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800938c:	4607      	mov	r7, r0
 800938e:	460c      	mov	r4, r1
 8009390:	b10a      	cbz	r2, 8009396 <_printf_common+0x26>
 8009392:	3301      	adds	r3, #1
 8009394:	6033      	str	r3, [r6, #0]
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	0699      	lsls	r1, r3, #26
 800939a:	bf42      	ittt	mi
 800939c:	6833      	ldrmi	r3, [r6, #0]
 800939e:	3302      	addmi	r3, #2
 80093a0:	6033      	strmi	r3, [r6, #0]
 80093a2:	6825      	ldr	r5, [r4, #0]
 80093a4:	f015 0506 	ands.w	r5, r5, #6
 80093a8:	d106      	bne.n	80093b8 <_printf_common+0x48>
 80093aa:	f104 0a19 	add.w	sl, r4, #25
 80093ae:	68e3      	ldr	r3, [r4, #12]
 80093b0:	6832      	ldr	r2, [r6, #0]
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	42ab      	cmp	r3, r5
 80093b6:	dc26      	bgt.n	8009406 <_printf_common+0x96>
 80093b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093bc:	1e13      	subs	r3, r2, #0
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	bf18      	it	ne
 80093c2:	2301      	movne	r3, #1
 80093c4:	0692      	lsls	r2, r2, #26
 80093c6:	d42b      	bmi.n	8009420 <_printf_common+0xb0>
 80093c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093cc:	4649      	mov	r1, r9
 80093ce:	4638      	mov	r0, r7
 80093d0:	47c0      	blx	r8
 80093d2:	3001      	adds	r0, #1
 80093d4:	d01e      	beq.n	8009414 <_printf_common+0xa4>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	68e5      	ldr	r5, [r4, #12]
 80093da:	6832      	ldr	r2, [r6, #0]
 80093dc:	f003 0306 	and.w	r3, r3, #6
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	bf08      	it	eq
 80093e4:	1aad      	subeq	r5, r5, r2
 80093e6:	68a3      	ldr	r3, [r4, #8]
 80093e8:	6922      	ldr	r2, [r4, #16]
 80093ea:	bf0c      	ite	eq
 80093ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093f0:	2500      	movne	r5, #0
 80093f2:	4293      	cmp	r3, r2
 80093f4:	bfc4      	itt	gt
 80093f6:	1a9b      	subgt	r3, r3, r2
 80093f8:	18ed      	addgt	r5, r5, r3
 80093fa:	2600      	movs	r6, #0
 80093fc:	341a      	adds	r4, #26
 80093fe:	42b5      	cmp	r5, r6
 8009400:	d11a      	bne.n	8009438 <_printf_common+0xc8>
 8009402:	2000      	movs	r0, #0
 8009404:	e008      	b.n	8009418 <_printf_common+0xa8>
 8009406:	2301      	movs	r3, #1
 8009408:	4652      	mov	r2, sl
 800940a:	4649      	mov	r1, r9
 800940c:	4638      	mov	r0, r7
 800940e:	47c0      	blx	r8
 8009410:	3001      	adds	r0, #1
 8009412:	d103      	bne.n	800941c <_printf_common+0xac>
 8009414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941c:	3501      	adds	r5, #1
 800941e:	e7c6      	b.n	80093ae <_printf_common+0x3e>
 8009420:	18e1      	adds	r1, r4, r3
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	2030      	movs	r0, #48	; 0x30
 8009426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800942a:	4422      	add	r2, r4
 800942c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009434:	3302      	adds	r3, #2
 8009436:	e7c7      	b.n	80093c8 <_printf_common+0x58>
 8009438:	2301      	movs	r3, #1
 800943a:	4622      	mov	r2, r4
 800943c:	4649      	mov	r1, r9
 800943e:	4638      	mov	r0, r7
 8009440:	47c0      	blx	r8
 8009442:	3001      	adds	r0, #1
 8009444:	d0e6      	beq.n	8009414 <_printf_common+0xa4>
 8009446:	3601      	adds	r6, #1
 8009448:	e7d9      	b.n	80093fe <_printf_common+0x8e>
	...

0800944c <_printf_i>:
 800944c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009450:	7e0f      	ldrb	r7, [r1, #24]
 8009452:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009454:	2f78      	cmp	r7, #120	; 0x78
 8009456:	4691      	mov	r9, r2
 8009458:	4680      	mov	r8, r0
 800945a:	460c      	mov	r4, r1
 800945c:	469a      	mov	sl, r3
 800945e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009462:	d807      	bhi.n	8009474 <_printf_i+0x28>
 8009464:	2f62      	cmp	r7, #98	; 0x62
 8009466:	d80a      	bhi.n	800947e <_printf_i+0x32>
 8009468:	2f00      	cmp	r7, #0
 800946a:	f000 80d8 	beq.w	800961e <_printf_i+0x1d2>
 800946e:	2f58      	cmp	r7, #88	; 0x58
 8009470:	f000 80a3 	beq.w	80095ba <_printf_i+0x16e>
 8009474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800947c:	e03a      	b.n	80094f4 <_printf_i+0xa8>
 800947e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009482:	2b15      	cmp	r3, #21
 8009484:	d8f6      	bhi.n	8009474 <_printf_i+0x28>
 8009486:	a101      	add	r1, pc, #4	; (adr r1, 800948c <_printf_i+0x40>)
 8009488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800948c:	080094e5 	.word	0x080094e5
 8009490:	080094f9 	.word	0x080094f9
 8009494:	08009475 	.word	0x08009475
 8009498:	08009475 	.word	0x08009475
 800949c:	08009475 	.word	0x08009475
 80094a0:	08009475 	.word	0x08009475
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	08009475 	.word	0x08009475
 80094ac:	08009475 	.word	0x08009475
 80094b0:	08009475 	.word	0x08009475
 80094b4:	08009475 	.word	0x08009475
 80094b8:	08009605 	.word	0x08009605
 80094bc:	08009529 	.word	0x08009529
 80094c0:	080095e7 	.word	0x080095e7
 80094c4:	08009475 	.word	0x08009475
 80094c8:	08009475 	.word	0x08009475
 80094cc:	08009627 	.word	0x08009627
 80094d0:	08009475 	.word	0x08009475
 80094d4:	08009529 	.word	0x08009529
 80094d8:	08009475 	.word	0x08009475
 80094dc:	08009475 	.word	0x08009475
 80094e0:	080095ef 	.word	0x080095ef
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	1d1a      	adds	r2, r3, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	602a      	str	r2, [r5, #0]
 80094ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094f4:	2301      	movs	r3, #1
 80094f6:	e0a3      	b.n	8009640 <_printf_i+0x1f4>
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	6829      	ldr	r1, [r5, #0]
 80094fc:	0606      	lsls	r6, r0, #24
 80094fe:	f101 0304 	add.w	r3, r1, #4
 8009502:	d50a      	bpl.n	800951a <_printf_i+0xce>
 8009504:	680e      	ldr	r6, [r1, #0]
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	2e00      	cmp	r6, #0
 800950a:	da03      	bge.n	8009514 <_printf_i+0xc8>
 800950c:	232d      	movs	r3, #45	; 0x2d
 800950e:	4276      	negs	r6, r6
 8009510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009514:	485e      	ldr	r0, [pc, #376]	; (8009690 <_printf_i+0x244>)
 8009516:	230a      	movs	r3, #10
 8009518:	e019      	b.n	800954e <_printf_i+0x102>
 800951a:	680e      	ldr	r6, [r1, #0]
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009522:	bf18      	it	ne
 8009524:	b236      	sxthne	r6, r6
 8009526:	e7ef      	b.n	8009508 <_printf_i+0xbc>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	6820      	ldr	r0, [r4, #0]
 800952c:	1d19      	adds	r1, r3, #4
 800952e:	6029      	str	r1, [r5, #0]
 8009530:	0601      	lsls	r1, r0, #24
 8009532:	d501      	bpl.n	8009538 <_printf_i+0xec>
 8009534:	681e      	ldr	r6, [r3, #0]
 8009536:	e002      	b.n	800953e <_printf_i+0xf2>
 8009538:	0646      	lsls	r6, r0, #25
 800953a:	d5fb      	bpl.n	8009534 <_printf_i+0xe8>
 800953c:	881e      	ldrh	r6, [r3, #0]
 800953e:	4854      	ldr	r0, [pc, #336]	; (8009690 <_printf_i+0x244>)
 8009540:	2f6f      	cmp	r7, #111	; 0x6f
 8009542:	bf0c      	ite	eq
 8009544:	2308      	moveq	r3, #8
 8009546:	230a      	movne	r3, #10
 8009548:	2100      	movs	r1, #0
 800954a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800954e:	6865      	ldr	r5, [r4, #4]
 8009550:	60a5      	str	r5, [r4, #8]
 8009552:	2d00      	cmp	r5, #0
 8009554:	bfa2      	ittt	ge
 8009556:	6821      	ldrge	r1, [r4, #0]
 8009558:	f021 0104 	bicge.w	r1, r1, #4
 800955c:	6021      	strge	r1, [r4, #0]
 800955e:	b90e      	cbnz	r6, 8009564 <_printf_i+0x118>
 8009560:	2d00      	cmp	r5, #0
 8009562:	d04d      	beq.n	8009600 <_printf_i+0x1b4>
 8009564:	4615      	mov	r5, r2
 8009566:	fbb6 f1f3 	udiv	r1, r6, r3
 800956a:	fb03 6711 	mls	r7, r3, r1, r6
 800956e:	5dc7      	ldrb	r7, [r0, r7]
 8009570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009574:	4637      	mov	r7, r6
 8009576:	42bb      	cmp	r3, r7
 8009578:	460e      	mov	r6, r1
 800957a:	d9f4      	bls.n	8009566 <_printf_i+0x11a>
 800957c:	2b08      	cmp	r3, #8
 800957e:	d10b      	bne.n	8009598 <_printf_i+0x14c>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	07de      	lsls	r6, r3, #31
 8009584:	d508      	bpl.n	8009598 <_printf_i+0x14c>
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	6861      	ldr	r1, [r4, #4]
 800958a:	4299      	cmp	r1, r3
 800958c:	bfde      	ittt	le
 800958e:	2330      	movle	r3, #48	; 0x30
 8009590:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009594:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009598:	1b52      	subs	r2, r2, r5
 800959a:	6122      	str	r2, [r4, #16]
 800959c:	f8cd a000 	str.w	sl, [sp]
 80095a0:	464b      	mov	r3, r9
 80095a2:	aa03      	add	r2, sp, #12
 80095a4:	4621      	mov	r1, r4
 80095a6:	4640      	mov	r0, r8
 80095a8:	f7ff fee2 	bl	8009370 <_printf_common>
 80095ac:	3001      	adds	r0, #1
 80095ae:	d14c      	bne.n	800964a <_printf_i+0x1fe>
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095b4:	b004      	add	sp, #16
 80095b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ba:	4835      	ldr	r0, [pc, #212]	; (8009690 <_printf_i+0x244>)
 80095bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095c0:	6829      	ldr	r1, [r5, #0]
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80095c8:	6029      	str	r1, [r5, #0]
 80095ca:	061d      	lsls	r5, r3, #24
 80095cc:	d514      	bpl.n	80095f8 <_printf_i+0x1ac>
 80095ce:	07df      	lsls	r7, r3, #31
 80095d0:	bf44      	itt	mi
 80095d2:	f043 0320 	orrmi.w	r3, r3, #32
 80095d6:	6023      	strmi	r3, [r4, #0]
 80095d8:	b91e      	cbnz	r6, 80095e2 <_printf_i+0x196>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	f023 0320 	bic.w	r3, r3, #32
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	2310      	movs	r3, #16
 80095e4:	e7b0      	b.n	8009548 <_printf_i+0xfc>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	f043 0320 	orr.w	r3, r3, #32
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	2378      	movs	r3, #120	; 0x78
 80095f0:	4828      	ldr	r0, [pc, #160]	; (8009694 <_printf_i+0x248>)
 80095f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095f6:	e7e3      	b.n	80095c0 <_printf_i+0x174>
 80095f8:	0659      	lsls	r1, r3, #25
 80095fa:	bf48      	it	mi
 80095fc:	b2b6      	uxthmi	r6, r6
 80095fe:	e7e6      	b.n	80095ce <_printf_i+0x182>
 8009600:	4615      	mov	r5, r2
 8009602:	e7bb      	b.n	800957c <_printf_i+0x130>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	6826      	ldr	r6, [r4, #0]
 8009608:	6961      	ldr	r1, [r4, #20]
 800960a:	1d18      	adds	r0, r3, #4
 800960c:	6028      	str	r0, [r5, #0]
 800960e:	0635      	lsls	r5, r6, #24
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	d501      	bpl.n	8009618 <_printf_i+0x1cc>
 8009614:	6019      	str	r1, [r3, #0]
 8009616:	e002      	b.n	800961e <_printf_i+0x1d2>
 8009618:	0670      	lsls	r0, r6, #25
 800961a:	d5fb      	bpl.n	8009614 <_printf_i+0x1c8>
 800961c:	8019      	strh	r1, [r3, #0]
 800961e:	2300      	movs	r3, #0
 8009620:	6123      	str	r3, [r4, #16]
 8009622:	4615      	mov	r5, r2
 8009624:	e7ba      	b.n	800959c <_printf_i+0x150>
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	1d1a      	adds	r2, r3, #4
 800962a:	602a      	str	r2, [r5, #0]
 800962c:	681d      	ldr	r5, [r3, #0]
 800962e:	6862      	ldr	r2, [r4, #4]
 8009630:	2100      	movs	r1, #0
 8009632:	4628      	mov	r0, r5
 8009634:	f7f6 fdd4 	bl	80001e0 <memchr>
 8009638:	b108      	cbz	r0, 800963e <_printf_i+0x1f2>
 800963a:	1b40      	subs	r0, r0, r5
 800963c:	6060      	str	r0, [r4, #4]
 800963e:	6863      	ldr	r3, [r4, #4]
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	2300      	movs	r3, #0
 8009644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009648:	e7a8      	b.n	800959c <_printf_i+0x150>
 800964a:	6923      	ldr	r3, [r4, #16]
 800964c:	462a      	mov	r2, r5
 800964e:	4649      	mov	r1, r9
 8009650:	4640      	mov	r0, r8
 8009652:	47d0      	blx	sl
 8009654:	3001      	adds	r0, #1
 8009656:	d0ab      	beq.n	80095b0 <_printf_i+0x164>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	079b      	lsls	r3, r3, #30
 800965c:	d413      	bmi.n	8009686 <_printf_i+0x23a>
 800965e:	68e0      	ldr	r0, [r4, #12]
 8009660:	9b03      	ldr	r3, [sp, #12]
 8009662:	4298      	cmp	r0, r3
 8009664:	bfb8      	it	lt
 8009666:	4618      	movlt	r0, r3
 8009668:	e7a4      	b.n	80095b4 <_printf_i+0x168>
 800966a:	2301      	movs	r3, #1
 800966c:	4632      	mov	r2, r6
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	47d0      	blx	sl
 8009674:	3001      	adds	r0, #1
 8009676:	d09b      	beq.n	80095b0 <_printf_i+0x164>
 8009678:	3501      	adds	r5, #1
 800967a:	68e3      	ldr	r3, [r4, #12]
 800967c:	9903      	ldr	r1, [sp, #12]
 800967e:	1a5b      	subs	r3, r3, r1
 8009680:	42ab      	cmp	r3, r5
 8009682:	dcf2      	bgt.n	800966a <_printf_i+0x21e>
 8009684:	e7eb      	b.n	800965e <_printf_i+0x212>
 8009686:	2500      	movs	r5, #0
 8009688:	f104 0619 	add.w	r6, r4, #25
 800968c:	e7f5      	b.n	800967a <_printf_i+0x22e>
 800968e:	bf00      	nop
 8009690:	080097ad 	.word	0x080097ad
 8009694:	080097be 	.word	0x080097be

08009698 <__retarget_lock_acquire_recursive>:
 8009698:	4770      	bx	lr

0800969a <__retarget_lock_release_recursive>:
 800969a:	4770      	bx	lr

0800969c <memcpy>:
 800969c:	440a      	add	r2, r1
 800969e:	4291      	cmp	r1, r2
 80096a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096a4:	d100      	bne.n	80096a8 <memcpy+0xc>
 80096a6:	4770      	bx	lr
 80096a8:	b510      	push	{r4, lr}
 80096aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096b2:	4291      	cmp	r1, r2
 80096b4:	d1f9      	bne.n	80096aa <memcpy+0xe>
 80096b6:	bd10      	pop	{r4, pc}

080096b8 <memmove>:
 80096b8:	4288      	cmp	r0, r1
 80096ba:	b510      	push	{r4, lr}
 80096bc:	eb01 0402 	add.w	r4, r1, r2
 80096c0:	d902      	bls.n	80096c8 <memmove+0x10>
 80096c2:	4284      	cmp	r4, r0
 80096c4:	4623      	mov	r3, r4
 80096c6:	d807      	bhi.n	80096d8 <memmove+0x20>
 80096c8:	1e43      	subs	r3, r0, #1
 80096ca:	42a1      	cmp	r1, r4
 80096cc:	d008      	beq.n	80096e0 <memmove+0x28>
 80096ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096d6:	e7f8      	b.n	80096ca <memmove+0x12>
 80096d8:	4402      	add	r2, r0
 80096da:	4601      	mov	r1, r0
 80096dc:	428a      	cmp	r2, r1
 80096de:	d100      	bne.n	80096e2 <memmove+0x2a>
 80096e0:	bd10      	pop	{r4, pc}
 80096e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ea:	e7f7      	b.n	80096dc <memmove+0x24>

080096ec <_realloc_r>:
 80096ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f0:	4680      	mov	r8, r0
 80096f2:	4614      	mov	r4, r2
 80096f4:	460e      	mov	r6, r1
 80096f6:	b921      	cbnz	r1, 8009702 <_realloc_r+0x16>
 80096f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096fc:	4611      	mov	r1, r2
 80096fe:	f7ff bc2b 	b.w	8008f58 <_malloc_r>
 8009702:	b92a      	cbnz	r2, 8009710 <_realloc_r+0x24>
 8009704:	f7ff fbbc 	bl	8008e80 <_free_r>
 8009708:	4625      	mov	r5, r4
 800970a:	4628      	mov	r0, r5
 800970c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009710:	f000 f81b 	bl	800974a <_malloc_usable_size_r>
 8009714:	4284      	cmp	r4, r0
 8009716:	4607      	mov	r7, r0
 8009718:	d802      	bhi.n	8009720 <_realloc_r+0x34>
 800971a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800971e:	d812      	bhi.n	8009746 <_realloc_r+0x5a>
 8009720:	4621      	mov	r1, r4
 8009722:	4640      	mov	r0, r8
 8009724:	f7ff fc18 	bl	8008f58 <_malloc_r>
 8009728:	4605      	mov	r5, r0
 800972a:	2800      	cmp	r0, #0
 800972c:	d0ed      	beq.n	800970a <_realloc_r+0x1e>
 800972e:	42bc      	cmp	r4, r7
 8009730:	4622      	mov	r2, r4
 8009732:	4631      	mov	r1, r6
 8009734:	bf28      	it	cs
 8009736:	463a      	movcs	r2, r7
 8009738:	f7ff ffb0 	bl	800969c <memcpy>
 800973c:	4631      	mov	r1, r6
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff fb9e 	bl	8008e80 <_free_r>
 8009744:	e7e1      	b.n	800970a <_realloc_r+0x1e>
 8009746:	4635      	mov	r5, r6
 8009748:	e7df      	b.n	800970a <_realloc_r+0x1e>

0800974a <_malloc_usable_size_r>:
 800974a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800974e:	1f18      	subs	r0, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfbc      	itt	lt
 8009754:	580b      	ldrlt	r3, [r1, r0]
 8009756:	18c0      	addlt	r0, r0, r3
 8009758:	4770      	bx	lr
	...

0800975c <_init>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	bf00      	nop
 8009760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009762:	bc08      	pop	{r3}
 8009764:	469e      	mov	lr, r3
 8009766:	4770      	bx	lr

08009768 <_fini>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	bf00      	nop
 800976c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976e:	bc08      	pop	{r3}
 8009770:	469e      	mov	lr, r3
 8009772:	4770      	bx	lr
