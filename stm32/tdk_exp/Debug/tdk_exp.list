
tdk_exp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e44  08009e44  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e4c  08009e4c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008dc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000096c  2000096c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa1e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004338  00000000  00000000  0003fade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  00043e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017d8  00000000  00000000  00045780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fee  00000000  00000000  00046f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002097e  00000000  00000000  0006bf46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6568  00000000  00000000  0008c8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00162e2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e5c  00000000  00000000  00162e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e10 	.word	0x08009e10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009e10 	.word	0x08009e10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fe30 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f814 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa08 	bl	80008ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87a 	bl	80005d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8a6 	bl	8000630 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d4 	bl	8000690 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f009 f84a 	bl	8009580 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004ec:	f000 f906 	bl	80006fc <MX_TIM2_Init>
  MX_TIM4_Init();
 80004f0:	f000 f984 	bl	80007fc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80004f4:	f000 f9d0 	bl	8000898 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f009 f868 	bl	80095cc <MX_USB_HOST_Process>
 80004fc:	e7fc      	b.n	80004f8 <main+0x2c>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f009 fb78 	bl	8009c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fbca 	bl	8003d20 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 fad9 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fe2b 	bl	8004210 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 fac2 	bl	8000b48 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2C1_Init+0x50>)
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <MX_I2C1_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_I2C1_Init+0x58>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_I2C1_Init+0x50>)
 80005f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_I2C1_Init+0x50>)
 8000612:	f002 fda1 	bl	8003158 <HAL_I2C_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 fa94 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000ac 	.word	0x200000ac
 8000628:	40005400 	.word	0x40005400
 800062c:	000186a0 	.word	0x000186a0

08000630 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_I2S3_Init+0x54>)
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <MX_I2S3_Init+0x58>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2S3_Init+0x54>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_I2S3_Init+0x54>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_I2S3_Init+0x54>)
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <MX_I2S3_Init+0x5c>)
 800065a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2S3_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_I2S3_Init+0x54>)
 8000670:	f002 feb6 	bl	80033e0 <HAL_I2S_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800067a:	f000 fa65 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000100 	.word	0x20000100
 8000688:	40003c00 	.word	0x40003c00
 800068c:	00017700 	.word	0x00017700

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f004 f8f5 	bl	80048d0 <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 fa2c 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000148 	.word	0x20000148
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072c:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <MX_TIM2_Init+0xfc>)
 800072e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 8000734:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <MX_TIM2_Init+0xfc>)
 8000736:	2253      	movs	r2, #83	; 0x53
 8000738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_TIM2_Init+0xfc>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <MX_TIM2_Init+0xfc>)
 8000742:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <MX_TIM2_Init+0xfc>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_TIM2_Init+0xfc>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000754:	4828      	ldr	r0, [pc, #160]	; (80007f8 <MX_TIM2_Init+0xfc>)
 8000756:	f004 f944 	bl	80049e2 <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000760:	f000 f9f2 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076e:	4619      	mov	r1, r3
 8000770:	4821      	ldr	r0, [pc, #132]	; (80007f8 <MX_TIM2_Init+0xfc>)
 8000772:	f004 fba9 	bl	8004ec8 <HAL_TIM_ConfigClockSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800077c:	f000 f9e4 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000780:	481d      	ldr	r0, [pc, #116]	; (80007f8 <MX_TIM2_Init+0xfc>)
 8000782:	f004 f97d 	bl	8004a80 <HAL_TIM_PWM_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800078c:	f000 f9dc 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4619      	mov	r1, r3
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <MX_TIM2_Init+0xfc>)
 80007a0:	f004 ff76 	bl	8005690 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007aa:	f000 f9cd 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ae:	2360      	movs	r3, #96	; 0x60
 80007b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_TIM2_Init+0xfc>)
 80007c6:	f004 fabd 	bl	8004d44 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007d0:	f000 f9ba 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2204      	movs	r2, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM2_Init+0xfc>)
 80007dc:	f004 fab2 	bl	8004d44 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80007e6:	f000 f9af 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM2_Init+0xfc>)
 80007ec:	f000 fb26 	bl	8000e3c <HAL_TIM_MspPostInit>

}
 80007f0:	bf00      	nop
 80007f2:	3738      	adds	r7, #56	; 0x38
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200001a0 	.word	0x200001a0

080007fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_TIM4_Init+0x94>)
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <MX_TIM4_Init+0x98>)
 800081c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (84*100) - 1;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_TIM4_Init+0x94>)
 8000820:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000824:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_TIM4_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_TIM4_Init+0x94>)
 800082e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000832:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_TIM4_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_TIM4_Init+0x94>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000840:	4813      	ldr	r0, [pc, #76]	; (8000890 <MX_TIM4_Init+0x94>)
 8000842:	f004 f8ce 	bl	80049e2 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800084c:	f000 f97c 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_TIM4_Init+0x94>)
 800085e:	f004 fb33 	bl	8004ec8 <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 f96e 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_TIM4_Init+0x94>)
 800087a:	f004 ff09 	bl	8005690 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000884:	f000 f960 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200001e8 	.word	0x200001e8
 8000894:	40000800 	.word	0x40000800

08000898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART3_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008d0:	f004 ff6e 	bl	80057b0 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f935 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000230 	.word	0x20000230
 80008e8:	40004800 	.word	0x40004800

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	4b8a      	ldr	r3, [pc, #552]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a89      	ldr	r2, [pc, #548]	; (8000b30 <MX_GPIO_Init+0x244>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b87      	ldr	r3, [pc, #540]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	4b83      	ldr	r3, [pc, #524]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a82      	ldr	r2, [pc, #520]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b80      	ldr	r3, [pc, #512]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b7c      	ldr	r3, [pc, #496]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a7b      	ldr	r2, [pc, #492]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b79      	ldr	r3, [pc, #484]	; (8000b30 <MX_GPIO_Init+0x244>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b75      	ldr	r3, [pc, #468]	; (8000b30 <MX_GPIO_Init+0x244>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a74      	ldr	r2, [pc, #464]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b72      	ldr	r3, [pc, #456]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a6d      	ldr	r2, [pc, #436]	; (8000b30 <MX_GPIO_Init+0x244>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b6b      	ldr	r3, [pc, #428]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a66      	ldr	r2, [pc, #408]	; (8000b30 <MX_GPIO_Init+0x244>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <MX_GPIO_Init+0x244>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009aa:	2200      	movs	r2, #0
 80009ac:	21f8      	movs	r1, #248	; 0xf8
 80009ae:	4861      	ldr	r0, [pc, #388]	; (8000b34 <MX_GPIO_Init+0x248>)
 80009b0:	f000 ff96 	bl	80018e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2101      	movs	r1, #1
 80009b8:	485f      	ldr	r0, [pc, #380]	; (8000b38 <MX_GPIO_Init+0x24c>)
 80009ba:	f000 ff91 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009be:	2200      	movs	r2, #0
 80009c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009c4:	485d      	ldr	r0, [pc, #372]	; (8000b3c <MX_GPIO_Init+0x250>)
 80009c6:	f000 ff8b 	bl	80018e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ca:	2308      	movs	r3, #8
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4854      	ldr	r0, [pc, #336]	; (8000b34 <MX_GPIO_Init+0x248>)
 80009e2:	f000 fde1 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009e6:	23f0      	movs	r3, #240	; 0xf0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	2302      	movs	r3, #2
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	484d      	ldr	r0, [pc, #308]	; (8000b34 <MX_GPIO_Init+0x248>)
 80009fe:	f000 fdd3 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4847      	ldr	r0, [pc, #284]	; (8000b38 <MX_GPIO_Init+0x24c>)
 8000a1a:	f000 fdc5 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	483f      	ldr	r0, [pc, #252]	; (8000b38 <MX_GPIO_Init+0x24c>)
 8000a3a:	f000 fdb5 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	483b      	ldr	r0, [pc, #236]	; (8000b40 <MX_GPIO_Init+0x254>)
 8000a54:	f000 fda8 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4836      	ldr	r0, [pc, #216]	; (8000b44 <MX_GPIO_Init+0x258>)
 8000a6c:	f000 fd9c 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a82:	2305      	movs	r3, #5
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	482d      	ldr	r0, [pc, #180]	; (8000b44 <MX_GPIO_Init+0x258>)
 8000a8e:	f000 fd8b 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000a92:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a98:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4826      	ldr	r0, [pc, #152]	; (8000b44 <MX_GPIO_Init+0x258>)
 8000aaa:	f000 fd7d 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000aae:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4820      	ldr	r0, [pc, #128]	; (8000b44 <MX_GPIO_Init+0x258>)
 8000ac4:	f000 fd70 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ac8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000acc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4816      	ldr	r0, [pc, #88]	; (8000b3c <MX_GPIO_Init+0x250>)
 8000ae2:	f000 fd61 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4810      	ldr	r0, [pc, #64]	; (8000b3c <MX_GPIO_Init+0x250>)
 8000afa:	f000 fd55 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b02:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4808      	ldr	r0, [pc, #32]	; (8000b34 <MX_GPIO_Init+0x248>)
 8000b14:	f000 fd48 	bl	80015a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2028      	movs	r0, #40	; 0x28
 8000b1e:	f000 fc7a 	bl	8001416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b22:	2028      	movs	r0, #40	; 0x28
 8000b24:	f000 fc93 	bl	800144e <HAL_NVIC_EnableIRQ>

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_I2C_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12c      	bne.n	8000c20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000be2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be8:	2312      	movs	r3, #18
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <HAL_I2C_MspInit+0x8c>)
 8000c00:	f000 fcd2 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_I2C_MspInit+0x88>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020400 	.word	0x40020400

08000c34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a31      	ldr	r2, [pc, #196]	; (8000d24 <HAL_I2S_MspInit+0xf0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d15a      	bne.n	8000d1a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c64:	2301      	movs	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c68:	23c0      	movs	r3, #192	; 0xc0
 8000c6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fceb 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c80:	f7ff ff62 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_I2S_MspInit+0xf4>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce8:	2306      	movs	r3, #6
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <HAL_I2S_MspInit+0xf8>)
 8000cf4:	f000 fc58 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cf8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_I2S_MspInit+0xfc>)
 8000d16:	f000 fc47 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	; 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40003c00 	.word	0x40003c00
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020800 	.word	0x40020800

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000daa:	f000 fbfd 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd4:	d10e      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_TIM_Base_MspInit+0x70>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <HAL_TIM_Base_MspInit+0x70>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_TIM_Base_MspInit+0x70>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000df2:	e01a      	b.n	8000e2a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_TIM_Base_MspInit+0x74>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d115      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_TIM_Base_MspInit+0x70>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_TIM_Base_MspInit+0x70>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_TIM_Base_MspInit+0x70>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	201e      	movs	r0, #30
 8000e20:	f000 faf9 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e24:	201e      	movs	r0, #30
 8000e26:	f000 fb12 	bl	800144e <HAL_NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40000800 	.word	0x40000800

08000e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5c:	d11e      	bne.n	8000e9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_TIM_MspPostInit+0x68>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_TIM_MspPostInit+0x68>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_TIM_MspPostInit+0x68>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000e7a:	f248 0302 	movw	r3, #32770	; 0x8002
 8000e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <HAL_TIM_MspPostInit+0x6c>)
 8000e98:	f000 fb86 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <HAL_UART_MspInit+0xd4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d153      	bne.n	8000f76 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_UART_MspInit+0xd8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <HAL_UART_MspInit+0xdc>)
 8000f40:	f000 fb32 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f56:	2307      	movs	r3, #7
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <HAL_UART_MspInit+0xe0>)
 8000f62:	f000 fb21 	bl	80015a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2027      	movs	r0, #39	; 0x27
 8000f6c:	f000 fa53 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f70:	2027      	movs	r0, #39	; 0x27
 8000f72:	f000 fa6c 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40004800 	.word	0x40004800
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020c00 	.word	0x40020c00

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8fc 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM4_IRQHandler+0x10>)
 8000fea:	f003 fda2 	bl	8004b32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001e8 	.word	0x200001e8

08000ff8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <USART3_IRQHandler+0x10>)
 8000ffe:	f004 fc25 	bl	800584c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000230 	.word	0x20000230

0800100c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001010:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001014:	f000 fc7e 	bl	8001914 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001018:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800101c:	f000 fc7a 	bl	8001914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <OTG_FS_IRQHandler+0x10>)
 800102a:	f000 fef5 	bl	8001e18 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000658 	.word	0x20000658

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f008 fd92 	bl	8009b90 <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20020000 	.word	0x20020000
 8001098:	00000400 	.word	0x00000400
 800109c:	20000274 	.word	0x20000274
 80010a0:	20000970 	.word	0x20000970

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <HAL_GPIO_EXTI_Callback>:
	//setting htim4 struct pointer
	pid_htim4 = htim;
	return;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]





	return;
 80010d2:	bf00      	nop
}
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010fc:	4c0b      	ldr	r4, [pc, #44]	; (800112c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800110a:	f7ff ffcb 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f008 fd45 	bl	8009b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001112:	f7ff f9db 	bl	80004cc <main>
  bx  lr    
 8001116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001124:	08009e54 	.word	0x08009e54
  ldr r2, =_sbss
 8001128:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800112c:	2000096c 	.word	0x2000096c

08001130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_Init+0x40>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_Init+0x40>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x40>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f94f 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fcf4 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f967 	bl	800146a <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b4:	f000 f92f 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000278 	.word	0x20000278

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000278 	.word	0x20000278

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e0:	f7ff ff8e 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff29 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff3e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff8e 	bl	8001354 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff31 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff feb6 	bl	8001200 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d008      	beq.n	80014b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e052      	b.n	800155a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0216 	bic.w	r2, r2, #22
 80014c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d103      	bne.n	80014e4 <HAL_DMA_Abort+0x62>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0208 	bic.w	r2, r2, #8
 80014f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001504:	e013      	b.n	800152e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001506:	f7ff fe7b 	bl	8001200 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b05      	cmp	r3, #5
 8001512:	d90c      	bls.n	800152e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2220      	movs	r2, #32
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e015      	b.n	800155a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e4      	bne.n	8001506 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	223f      	movs	r2, #63	; 0x3f
 8001542:	409a      	lsls	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d004      	beq.n	8001580 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e00c      	b.n	800159a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2205      	movs	r2, #5
 8001584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e16b      	b.n	800189c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 815a 	bne.w	8001896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80b4 	beq.w	8001896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a5f      	ldr	r2, [pc, #380]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a5b      	ldr	r2, [pc, #364]	; (80018b8 <HAL_GPIO_Init+0x310>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x314>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d02b      	beq.n	80017ce <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x318>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d025      	beq.n	80017ca <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <HAL_GPIO_Init+0x31c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d01f      	beq.n	80017c6 <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x320>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d019      	beq.n	80017c2 <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_GPIO_Init+0x328>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x32c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_GPIO_Init+0x330>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x20a>
 80017ae:	2307      	movs	r3, #7
 80017b0:	e00e      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017b2:	2308      	movs	r3, #8
 80017b4:	e00c      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e00a      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017be:	2304      	movs	r3, #4
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ce:	2300      	movs	r3, #0
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e0:	4935      	ldr	r1, [pc, #212]	; (80018b8 <HAL_GPIO_Init+0x310>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_GPIO_Init+0x334>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_GPIO_Init+0x334>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_GPIO_Init+0x334>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_GPIO_Init+0x334>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	f67f ae90 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40021400 	.word	0x40021400
 80018d4:	40021800 	.word	0x40021800
 80018d8:	40021c00 	.word	0x40021c00
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018fc:	e003      	b.n	8001906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	041a      	lsls	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	619a      	str	r2, [r3, #24]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fbc8 	bl	80010c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40013c00 	.word	0x40013c00

08001944 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b08f      	sub	sp, #60	; 0x3c
 8001948:	af0a      	add	r7, sp, #40	; 0x28
 800194a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e054      	b.n	8001a00 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f007 fe63 	bl	800963c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2203      	movs	r2, #3
 800197a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f004 fe91 	bl	80066bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	687e      	ldr	r6, [r7, #4]
 80019a2:	466d      	mov	r5, sp
 80019a4:	f106 0410 	add.w	r4, r6, #16
 80019a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019b8:	1d33      	adds	r3, r6, #4
 80019ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f004 fe0b 	bl	80065d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 fe88 	bl	80066de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	687e      	ldr	r6, [r7, #4]
 80019d6:	466d      	mov	r5, sp
 80019d8:	f106 0410 	add.w	r4, r6, #16
 80019dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ec:	1d33      	adds	r3, r6, #4
 80019ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f0:	6838      	ldr	r0, [r7, #0]
 80019f2:	f005 f811 	bl	8006a18 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a08 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af04      	add	r7, sp, #16
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	70fb      	strb	r3, [r7, #3]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70bb      	strb	r3, [r7, #2]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_HCD_HC_Init+0x28>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e076      	b.n	8001b1e <HAL_HCD_HC_Init+0x116>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	212c      	movs	r1, #44	; 0x2c
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	333d      	adds	r3, #61	; 0x3d
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3338      	adds	r3, #56	; 0x38
 8001a58:	787a      	ldrb	r2, [r7, #1]
 8001a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3340      	adds	r3, #64	; 0x40
 8001a6a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a6c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3339      	adds	r3, #57	; 0x39
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	333f      	adds	r3, #63	; 0x3f
 8001a8e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	78ba      	ldrb	r2, [r7, #2]
 8001a98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a9c:	b2d0      	uxtb	r0, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	212c      	movs	r1, #44	; 0x2c
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	333a      	adds	r3, #58	; 0x3a
 8001aaa:	4602      	mov	r2, r0
 8001aac:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001aae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da09      	bge.n	8001aca <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	212c      	movs	r1, #44	; 0x2c
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	333b      	adds	r3, #59	; 0x3b
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e008      	b.n	8001adc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	333b      	adds	r3, #59	; 0x3b
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	333c      	adds	r3, #60	; 0x3c
 8001aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001aee:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	787c      	ldrb	r4, [r7, #1]
 8001af6:	78ba      	ldrb	r2, [r7, #2]
 8001af8:	78f9      	ldrb	r1, [r7, #3]
 8001afa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	f005 f90a 	bl	8006d24 <USB_HC_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}

08001b26 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_HCD_HC_Halt+0x1e>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e00f      	b.n	8001b64 <HAL_HCD_HC_Halt+0x3e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f005 fb5a 	bl	800720e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	70fb      	strb	r3, [r7, #3]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	70bb      	strb	r3, [r7, #2]
 8001b82:	4613      	mov	r3, r2
 8001b84:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	333b      	adds	r3, #59	; 0x3b
 8001b94:	78ba      	ldrb	r2, [r7, #2]
 8001b96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	333f      	adds	r3, #63	; 0x3f
 8001ba6:	787a      	ldrb	r2, [r7, #1]
 8001ba8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001baa:	7c3b      	ldrb	r3, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d112      	bne.n	8001bd6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3342      	adds	r3, #66	; 0x42
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	333d      	adds	r3, #61	; 0x3d
 8001bd0:	7f3a      	ldrb	r2, [r7, #28]
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	e008      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	3342      	adds	r3, #66	; 0x42
 8001be4:	2202      	movs	r2, #2
 8001be6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	f200 80c6 	bhi.w	8001d7c <HAL_HCD_HC_SubmitRequest+0x210>
 8001bf0:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf6:	bf00      	nop
 8001bf8:	08001c09 	.word	0x08001c09
 8001bfc:	08001d69 	.word	0x08001d69
 8001c00:	08001c6d 	.word	0x08001c6d
 8001c04:	08001ceb 	.word	0x08001ceb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c08:	7c3b      	ldrb	r3, [r7, #16]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	f040 80b8 	bne.w	8001d80 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 80b4 	bne.w	8001d80 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c18:	8b3b      	ldrh	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d108      	bne.n	8001c30 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3355      	adds	r3, #85	; 0x55
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3355      	adds	r3, #85	; 0x55
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	212c      	movs	r1, #44	; 0x2c
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	3342      	adds	r3, #66	; 0x42
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c56:	e093      	b.n	8001d80 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3342      	adds	r3, #66	; 0x42
 8001c66:	2202      	movs	r2, #2
 8001c68:	701a      	strb	r2, [r3, #0]
      break;
 8001c6a:	e089      	b.n	8001d80 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c6c:	78bb      	ldrb	r3, [r7, #2]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11d      	bne.n	8001cae <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3355      	adds	r3, #85	; 0x55
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3342      	adds	r3, #66	; 0x42
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c98:	e073      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3342      	adds	r3, #66	; 0x42
 8001ca8:	2202      	movs	r2, #2
 8001caa:	701a      	strb	r2, [r3, #0]
      break;
 8001cac:	e069      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3354      	adds	r3, #84	; 0x54
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	212c      	movs	r1, #44	; 0x2c
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	3342      	adds	r3, #66	; 0x42
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
      break;
 8001cd4:	e055      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3342      	adds	r3, #66	; 0x42
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	701a      	strb	r2, [r3, #0]
      break;
 8001ce8:	e04b      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cea:	78bb      	ldrb	r3, [r7, #2]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d11d      	bne.n	8001d2c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3355      	adds	r3, #85	; 0x55
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3342      	adds	r3, #66	; 0x42
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d16:	e034      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3342      	adds	r3, #66	; 0x42
 8001d26:	2202      	movs	r2, #2
 8001d28:	701a      	strb	r2, [r3, #0]
      break;
 8001d2a:	e02a      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3354      	adds	r3, #84	; 0x54
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3342      	adds	r3, #66	; 0x42
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
      break;
 8001d52:	e016      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3342      	adds	r3, #66	; 0x42
 8001d62:	2202      	movs	r2, #2
 8001d64:	701a      	strb	r2, [r3, #0]
      break;
 8001d66:	e00c      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3342      	adds	r3, #66	; 0x42
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d7c:	bf00      	nop
 8001d7e:	e000      	b.n	8001d82 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d80:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3344      	adds	r3, #68	; 0x44
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	8b3a      	ldrh	r2, [r7, #24]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	202c      	movs	r0, #44	; 0x2c
 8001d9c:	fb00 f303 	mul.w	r3, r0, r3
 8001da0:	440b      	add	r3, r1
 8001da2:	334c      	adds	r3, #76	; 0x4c
 8001da4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	3360      	adds	r3, #96	; 0x60
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3350      	adds	r3, #80	; 0x50
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3339      	adds	r3, #57	; 0x39
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3361      	adds	r3, #97	; 0x61
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	222c      	movs	r2, #44	; 0x2c
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	3338      	adds	r3, #56	; 0x38
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	18d1      	adds	r1, r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	f005 f8ae 	bl	8006f68 <USB_HC_StartXfer>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop

08001e18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 fdaf 	bl	8006992 <USB_GetMode>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	f040 80f6 	bne.w	8002028 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 fd93 	bl	800696c <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80ec 	beq.w	8002026 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fd8a 	bl	800696c <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e62:	d104      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 fd7a 	bl	800696c <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e82:	d104      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fd6a 	bl	800696c <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ea2:	d104      	bne.n	8001eae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fd5a 	bl	800696c <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d103      	bne.n	8001eca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 fd4c 	bl	800696c <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ede:	d11c      	bne.n	8001f1a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ee8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001efa:	2110      	movs	r1, #16
 8001efc:	6938      	ldr	r0, [r7, #16]
 8001efe:	f004 fc3b 	bl	8006778 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f02:	6938      	ldr	r0, [r7, #16]
 8001f04:	f004 fc6c 	bl	80067e0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fe42 	bl	8006b98 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f007 fc0f 	bl	8009738 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 fd24 	bl	800696c <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f2e:	d102      	bne.n	8001f36 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f001 f89e 	bl	8003072 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fd16 	bl	800696c <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d106      	bne.n	8001f58 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f007 fbd8 	bl	8009700 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2208      	movs	r2, #8
 8001f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fd05 	bl	800696c <USB_ReadInterrupts>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d101      	bne.n	8001f70 <HAL_HCD_IRQHandler+0x158>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_HCD_IRQHandler+0x15a>
 8001f70:	2300      	movs	r3, #0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d012      	beq.n	8001f9c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0210 	bic.w	r2, r2, #16
 8001f84:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 ffa1 	bl	8002ece <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0210 	orr.w	r2, r2, #16
 8001f9a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 fce3 	bl	800696c <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fb0:	d13a      	bne.n	8002028 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f005 f918 	bl	80071ec <USB_HC_ReadInterrupt>
 8001fbc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e025      	b.n	8002010 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d018      	beq.n	800200a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fee:	d106      	bne.n	8001ffe <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8ab 	bl	8002152 <HCD_HC_IN_IRQHandler>
 8001ffc:	e005      	b.n	800200a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fbf9 	bl	80027fc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	429a      	cmp	r2, r3
 8002018:	d3d4      	bcc.n	8001fc4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002022:	615a      	str	r2, [r3, #20]
 8002024:	e000      	b.n	8002028 <HAL_HCD_IRQHandler+0x210>
      return;
 8002026:	bf00      	nop
    }
  }
}
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_HCD_Start+0x16>
 8002040:	2302      	movs	r3, #2
 8002042:	e013      	b.n	800206c <HAL_HCD_Start+0x3e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	4618      	mov	r0, r3
 8002054:	f004 fe04 	bl	8006c60 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 fb1c 	bl	800669a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_HCD_Stop+0x16>
 8002086:	2302      	movs	r3, #2
 8002088:	e00d      	b.n	80020a6 <HAL_HCD_Stop+0x32>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f005 f9f2 	bl	8007480 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fda6 	bl	8006c0c <USB_ResetPort>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3360      	adds	r3, #96	; 0x60
 80020e4:	781b      	ldrb	r3, [r3, #0]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3350      	adds	r3, #80	; 0x50
 800210c:	681b      	ldr	r3, [r3, #0]
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fdea 	bl	8006d00 <USB_GetCurrentFrame>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f004 fdc5 	bl	8006cd2 <USB_GetHostSpeed>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	d11a      	bne.n	80021b8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	461a      	mov	r2, r3
 8002190:	2304      	movs	r3, #4
 8002192:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3361      	adds	r3, #97	; 0x61
 80021a2:	2206      	movs	r2, #6
 80021a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f005 f82c 	bl	800720e <USB_HC_Halt>
 80021b6:	e0af      	b.n	8002318 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ce:	d11b      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3361      	adds	r3, #97	; 0x61
 80021f2:	2207      	movs	r2, #7
 80021f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f005 f804 	bl	800720e <USB_HC_Halt>
 8002206:	e087      	b.n	8002318 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b20      	cmp	r3, #32
 800221c:	d109      	bne.n	8002232 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	461a      	mov	r2, r3
 800222c:	2320      	movs	r3, #32
 800222e:	6093      	str	r3, [r2, #8]
 8002230:	e072      	b.n	8002318 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b08      	cmp	r3, #8
 8002246:	d11a      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	2308      	movs	r3, #8
 8002258:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3361      	adds	r3, #97	; 0x61
 8002268:	2205      	movs	r2, #5
 800226a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f004 ffc9 	bl	800720e <USB_HC_Halt>
 800227c:	e04c      	b.n	8002318 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d11b      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3361      	adds	r3, #97	; 0x61
 80022b8:	2208      	movs	r2, #8
 80022ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 ffa1 	bl	800720e <USB_HC_Halt>
 80022cc:	e024      	b.n	8002318 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d119      	bne.n	8002318 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3361      	adds	r3, #97	; 0x61
 8002304:	2206      	movs	r2, #6
 8002306:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f004 ff7b 	bl	800720e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800232a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232e:	d112      	bne.n	8002356 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f004 ff67 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	461a      	mov	r2, r3
 800234e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002352:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002354:	e24e      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	f040 80df 	bne.w	800252c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d019      	beq.n	80023aa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3348      	adds	r3, #72	; 0x48
 8002384:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	0159      	lsls	r1, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	440b      	add	r3, r1
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002398:	1ad2      	subs	r2, r2, r3
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	202c      	movs	r0, #44	; 0x2c
 80023a0:	fb00 f303 	mul.w	r3, r0, r3
 80023a4:	440b      	add	r3, r1
 80023a6:	3350      	adds	r3, #80	; 0x50
 80023a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3361      	adds	r3, #97	; 0x61
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	335c      	adds	r3, #92	; 0x5c
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	461a      	mov	r2, r3
 80023dc:	2301      	movs	r3, #1
 80023de:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	333f      	adds	r3, #63	; 0x3f
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	333f      	adds	r3, #63	; 0x3f
 8002402:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002404:	2b02      	cmp	r3, #2
 8002406:	d111      	bne.n	800242c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f004 fefb 	bl	800720e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2310      	movs	r3, #16
 8002428:	6093      	str	r3, [r2, #8]
 800242a:	e03a      	b.n	80024a2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	333f      	adds	r3, #63	; 0x3f
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d009      	beq.n	8002454 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	333f      	adds	r3, #63	; 0x3f
 800244e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002450:	2b01      	cmp	r3, #1
 8002452:	d126      	bne.n	80024a2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	0151      	lsls	r1, r2, #5
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	440a      	add	r2, r1
 800246a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002472:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	b2d9      	uxtb	r1, r3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	202c      	movs	r0, #44	; 0x2c
 8002490:	fb00 f303 	mul.w	r3, r0, r3
 8002494:	4413      	add	r3, r2
 8002496:	3360      	adds	r3, #96	; 0x60
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f007 f959 	bl	8009754 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d12b      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3348      	adds	r3, #72	; 0x48
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	202c      	movs	r0, #44	; 0x2c
 80024c0:	fb00 f202 	mul.w	r2, r0, r2
 80024c4:	440a      	add	r2, r1
 80024c6:	3240      	adds	r2, #64	; 0x40
 80024c8:	8812      	ldrh	r2, [r2, #0]
 80024ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 818e 	beq.w	80027f4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3354      	adds	r3, #84	; 0x54
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2d8      	uxtb	r0, r3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3354      	adds	r3, #84	; 0x54
 80024fc:	4602      	mov	r2, r0
 80024fe:	701a      	strb	r2, [r3, #0]
}
 8002500:	e178      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3354      	adds	r3, #84	; 0x54
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	f083 0301 	eor.w	r3, r3, #1
 8002516:	b2d8      	uxtb	r0, r3
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3354      	adds	r3, #84	; 0x54
 8002526:	4602      	mov	r2, r0
 8002528:	701a      	strb	r2, [r3, #0]
}
 800252a:	e163      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b02      	cmp	r3, #2
 8002540:	f040 80f6 	bne.w	8002730 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3361      	adds	r3, #97	; 0x61
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d109      	bne.n	800256c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3360      	adds	r3, #96	; 0x60
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e0c9      	b.n	8002700 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3361      	adds	r3, #97	; 0x61
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d109      	bne.n	8002594 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	2205      	movs	r2, #5
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e0b5      	b.n	8002700 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3361      	adds	r3, #97	; 0x61
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d009      	beq.n	80025bc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3361      	adds	r3, #97	; 0x61
 80025b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d150      	bne.n	800265e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	335c      	adds	r3, #92	; 0x5c
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	202c      	movs	r0, #44	; 0x2c
 80025d4:	fb00 f303 	mul.w	r3, r0, r3
 80025d8:	440b      	add	r3, r1
 80025da:	335c      	adds	r3, #92	; 0x5c
 80025dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	335c      	adds	r3, #92	; 0x5c
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d912      	bls.n	8002618 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3360      	adds	r3, #96	; 0x60
 8002612:	2204      	movs	r2, #4
 8002614:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002616:	e073      	b.n	8002700 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002640:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002648:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800265c:	e050      	b.n	8002700 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3361      	adds	r3, #97	; 0x61
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d122      	bne.n	80026b8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3360      	adds	r3, #96	; 0x60
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800269a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e023      	b.n	8002700 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b07      	cmp	r3, #7
 80026ca:	d119      	bne.n	8002700 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	335c      	adds	r3, #92	; 0x5c
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	202c      	movs	r0, #44	; 0x2c
 80026e4:	fb00 f303 	mul.w	r3, r0, r3
 80026e8:	440b      	add	r3, r1
 80026ea:	335c      	adds	r3, #92	; 0x5c
 80026ec:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	3360      	adds	r3, #96	; 0x60
 80026fc:	2204      	movs	r2, #4
 80026fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	2302      	movs	r3, #2
 8002710:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	b2d9      	uxtb	r1, r3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	202c      	movs	r0, #44	; 0x2c
 800271c:	fb00 f303 	mul.w	r3, r0, r3
 8002720:	4413      	add	r3, r2
 8002722:	3360      	adds	r3, #96	; 0x60
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f007 f813 	bl	8009754 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800272e:	e061      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b10      	cmp	r3, #16
 8002744:	d156      	bne.n	80027f4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	333f      	adds	r3, #63	; 0x3f
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d111      	bne.n	800277e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	335c      	adds	r3, #92	; 0x5c
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f004 fd49 	bl	800720e <USB_HC_Halt>
 800277c:	e031      	b.n	80027e2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	333f      	adds	r3, #63	; 0x3f
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333f      	adds	r3, #63	; 0x3f
 80027a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d11d      	bne.n	80027e2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	335c      	adds	r3, #92	; 0x5c
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d110      	bne.n	80027e2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3361      	adds	r3, #97	; 0x61
 80027ce:	2203      	movs	r2, #3
 80027d0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 fd16 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ee:	461a      	mov	r2, r3
 80027f0:	2310      	movs	r3, #16
 80027f2:	6093      	str	r3, [r2, #8]
}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b04      	cmp	r3, #4
 800282a:	d11a      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	2304      	movs	r3, #4
 800283c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3361      	adds	r3, #97	; 0x61
 800284c:	2206      	movs	r2, #6
 800284e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f004 fcd7 	bl	800720e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002860:	e331      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b20      	cmp	r3, #32
 8002876:	d12e      	bne.n	80028d6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2320      	movs	r3, #32
 8002888:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	333d      	adds	r3, #61	; 0x3d
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 8313 	bne.w	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	333d      	adds	r3, #61	; 0x3d
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3360      	adds	r3, #96	; 0x60
 80028c0:	2202      	movs	r2, #2
 80028c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fc9d 	bl	800720e <USB_HC_Halt>
}
 80028d4:	e2f7      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ec:	d112      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	461a      	mov	r2, r3
 80028fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002900:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f004 fc7e 	bl	800720e <USB_HC_Halt>
}
 8002912:	e2d8      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d140      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	335c      	adds	r3, #92	; 0x5c
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d111      	bne.n	8002976 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	333d      	adds	r3, #61	; 0x3d
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	461a      	mov	r2, r3
 8002972:	2340      	movs	r3, #64	; 0x40
 8002974:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	2301      	movs	r3, #1
 8002986:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3361      	adds	r3, #97	; 0x61
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 fc32 	bl	800720e <USB_HC_Halt>
}
 80029aa:	e28c      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d12c      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3361      	adds	r3, #97	; 0x61
 80029d0:	2204      	movs	r2, #4
 80029d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	333d      	adds	r3, #61	; 0x3d
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	335c      	adds	r3, #92	; 0x5c
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 fc03 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	461a      	mov	r2, r3
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	6093      	str	r3, [r2, #8]
}
 8002a1a:	e254      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d11a      	bne.n	8002a68 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2308      	movs	r3, #8
 8002a42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3361      	adds	r3, #97	; 0x61
 8002a52:	2205      	movs	r2, #5
 8002a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fbd4 	bl	800720e <USB_HC_Halt>
}
 8002a66:	e22e      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d140      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3361      	adds	r3, #97	; 0x61
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	333d      	adds	r3, #61	; 0x3d
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d112      	bne.n	8002adc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	333c      	adds	r3, #60	; 0x3c
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333d      	adds	r3, #61	; 0x3d
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fb91 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2310      	movs	r3, #16
 8002afc:	6093      	str	r3, [r2, #8]
}
 8002afe:	e1e2      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b80      	cmp	r3, #128	; 0x80
 8002b14:	d164      	bne.n	8002be0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d111      	bne.n	8002b42 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fb67 	bl	800720e <USB_HC_Halt>
 8002b40:	e044      	b.n	8002bcc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	335c      	adds	r3, #92	; 0x5c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	202c      	movs	r0, #44	; 0x2c
 8002b5a:	fb00 f303 	mul.w	r3, r0, r3
 8002b5e:	440b      	add	r3, r1
 8002b60:	335c      	adds	r3, #92	; 0x5c
 8002b62:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	335c      	adds	r3, #92	; 0x5c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d920      	bls.n	8002bba <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	335c      	adds	r3, #92	; 0x5c
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3360      	adds	r3, #96	; 0x60
 8002b98:	2204      	movs	r2, #4
 8002b9a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	b2d9      	uxtb	r1, r3
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	202c      	movs	r0, #44	; 0x2c
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f006 fdce 	bl	8009754 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bb8:	e008      	b.n	8002bcc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	2202      	movs	r2, #2
 8002bca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	6093      	str	r3, [r2, #8]
}
 8002bde:	e172      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf6:	d11b      	bne.n	8002c30 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3361      	adds	r3, #97	; 0x61
 8002c06:	2208      	movs	r2, #8
 8002c08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 fafa 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2c:	6093      	str	r3, [r2, #8]
}
 8002c2e:	e14a      	b.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	f040 813f 	bne.w	8002ec6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3361      	adds	r3, #97	; 0x61
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d17d      	bne.n	8002d58 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3360      	adds	r3, #96	; 0x60
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	333f      	adds	r3, #63	; 0x3f
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d00a      	beq.n	8002c98 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	333f      	adds	r3, #63	; 0x3f
 8002c90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	f040 8100 	bne.w	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d113      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3355      	adds	r3, #85	; 0x55
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	f083 0301 	eor.w	r3, r3, #1
 8002cb4:	b2d8      	uxtb	r0, r3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3355      	adds	r3, #85	; 0x55
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	f040 80e3 	bne.w	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	334c      	adds	r3, #76	; 0x4c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80d8 	beq.w	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	334c      	adds	r3, #76	; 0x4c
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	202c      	movs	r0, #44	; 0x2c
 8002cfe:	fb00 f202 	mul.w	r2, r0, r2
 8002d02:	440a      	add	r2, r1
 8002d04:	3240      	adds	r2, #64	; 0x40
 8002d06:	8812      	ldrh	r2, [r2, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	202c      	movs	r0, #44	; 0x2c
 8002d12:	fb00 f202 	mul.w	r2, r0, r2
 8002d16:	440a      	add	r2, r1
 8002d18:	3240      	adds	r2, #64	; 0x40
 8002d1a:	8812      	ldrh	r2, [r2, #0]
 8002d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80b5 	beq.w	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3355      	adds	r3, #85	; 0x55
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3355      	adds	r3, #85	; 0x55
 8002d52:	4602      	mov	r2, r0
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e09f      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3361      	adds	r3, #97	; 0x61
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d109      	bne.n	8002d80 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e08b      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3361      	adds	r3, #97	; 0x61
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d109      	bne.n	8002da8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3360      	adds	r3, #96	; 0x60
 8002da2:	2202      	movs	r2, #2
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e077      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3361      	adds	r3, #97	; 0x61
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d109      	bne.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3360      	adds	r3, #96	; 0x60
 8002dca:	2205      	movs	r2, #5
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e063      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3361      	adds	r3, #97	; 0x61
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d009      	beq.n	8002df8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3361      	adds	r3, #97	; 0x61
 8002df2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d14f      	bne.n	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	335c      	adds	r3, #92	; 0x5c
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	202c      	movs	r0, #44	; 0x2c
 8002e10:	fb00 f303 	mul.w	r3, r0, r3
 8002e14:	440b      	add	r3, r1
 8002e16:	335c      	adds	r3, #92	; 0x5c
 8002e18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	335c      	adds	r3, #92	; 0x5c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d912      	bls.n	8002e54 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	335c      	adds	r3, #92	; 0x5c
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3360      	adds	r3, #96	; 0x60
 8002e4e:	2204      	movs	r2, #4
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e021      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3360      	adds	r3, #96	; 0x60
 8002e62:	2202      	movs	r2, #2
 8002e64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e7c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e84:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	461a      	mov	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	b2d9      	uxtb	r1, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	202c      	movs	r0, #44	; 0x2c
 8002eb4:	fb00 f303 	mul.w	r3, r0, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3360      	adds	r3, #96	; 0x60
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f006 fc47 	bl	8009754 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ec6:	bf00      	nop
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b08a      	sub	sp, #40	; 0x28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	0c5b      	lsrs	r3, r3, #17
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f02:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d004      	beq.n	8002f14 <HCD_RXQLVL_IRQHandler+0x46>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	f000 80a9 	beq.w	8003064 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f12:	e0aa      	b.n	800306a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80a6 	beq.w	8003068 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3344      	adds	r3, #68	; 0x44
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 809b 	beq.w	8003068 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3350      	adds	r3, #80	; 0x50
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	441a      	add	r2, r3
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	202c      	movs	r0, #44	; 0x2c
 8002f4c:	fb00 f303 	mul.w	r3, r0, r3
 8002f50:	440b      	add	r3, r1
 8002f52:	334c      	adds	r3, #76	; 0x4c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d87a      	bhi.n	8003050 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3344      	adds	r3, #68	; 0x44
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	b292      	uxth	r2, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f003 fca2 	bl	80068bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3344      	adds	r3, #68	; 0x44
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	441a      	add	r2, r3
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	202c      	movs	r0, #44	; 0x2c
 8002f92:	fb00 f303 	mul.w	r3, r0, r3
 8002f96:	440b      	add	r3, r1
 8002f98:	3344      	adds	r3, #68	; 0x44
 8002f9a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3350      	adds	r3, #80	; 0x50
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	441a      	add	r2, r3
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	202c      	movs	r0, #44	; 0x2c
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	440b      	add	r3, r1
 8002fbc:	3350      	adds	r3, #80	; 0x50
 8002fbe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	0cdb      	lsrs	r3, r3, #19
 8002fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3340      	adds	r3, #64	; 0x40
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d13c      	bne.n	8003068 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d039      	beq.n	8003068 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800300a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003012:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3354      	adds	r3, #84	; 0x54
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	f083 0301 	eor.w	r3, r3, #1
 800303a:	b2d8      	uxtb	r0, r3
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3354      	adds	r3, #84	; 0x54
 800304a:	4602      	mov	r2, r0
 800304c:	701a      	strb	r2, [r3, #0]
      break;
 800304e:	e00b      	b.n	8003068 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3360      	adds	r3, #96	; 0x60
 800305e:	2204      	movs	r2, #4
 8003060:	701a      	strb	r2, [r3, #0]
      break;
 8003062:	e001      	b.n	8003068 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003068:	bf00      	nop
  }
}
 800306a:	bf00      	nop
 800306c:	3728      	adds	r7, #40	; 0x28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800309e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d10b      	bne.n	80030c2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f006 fb31 	bl	800971c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d132      	bne.n	8003132 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d126      	bne.n	800312c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d113      	bne.n	800310e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030f0:	d106      	bne.n	8003100 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2102      	movs	r1, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fd4d 	bl	8006b98 <USB_InitFSLSPClkSel>
 80030fe:	e011      	b.n	8003124 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fd46 	bl	8006b98 <USB_InitFSLSPClkSel>
 800310c:	e00a      	b.n	8003124 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d106      	bne.n	8003124 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800311c:	461a      	mov	r2, r3
 800311e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003122:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f006 fb23 	bl	8009770 <HAL_HCD_PortEnabled_Callback>
 800312a:	e002      	b.n	8003132 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f006 fb2d 	bl	800978c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b20      	cmp	r3, #32
 800313a:	d103      	bne.n	8003144 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f043 0320 	orr.w	r3, r3, #32
 8003142:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e12b      	b.n	80033c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fd10 	bl	8000ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031bc:	f001 fa20 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 80031c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a81      	ldr	r2, [pc, #516]	; (80033cc <HAL_I2C_Init+0x274>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d807      	bhi.n	80031dc <HAL_I2C_Init+0x84>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a80      	ldr	r2, [pc, #512]	; (80033d0 <HAL_I2C_Init+0x278>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	bf94      	ite	ls
 80031d4:	2301      	movls	r3, #1
 80031d6:	2300      	movhi	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e006      	b.n	80031ea <HAL_I2C_Init+0x92>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a7d      	ldr	r2, [pc, #500]	; (80033d4 <HAL_I2C_Init+0x27c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	bf94      	ite	ls
 80031e4:	2301      	movls	r3, #1
 80031e6:	2300      	movhi	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0e7      	b.n	80033c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4a78      	ldr	r2, [pc, #480]	; (80033d8 <HAL_I2C_Init+0x280>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	0c9b      	lsrs	r3, r3, #18
 80031fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a6a      	ldr	r2, [pc, #424]	; (80033cc <HAL_I2C_Init+0x274>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d802      	bhi.n	800322c <HAL_I2C_Init+0xd4>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3301      	adds	r3, #1
 800322a:	e009      	b.n	8003240 <HAL_I2C_Init+0xe8>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	4a69      	ldr	r2, [pc, #420]	; (80033dc <HAL_I2C_Init+0x284>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	3301      	adds	r3, #1
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	430b      	orrs	r3, r1
 8003246:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003252:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	495c      	ldr	r1, [pc, #368]	; (80033cc <HAL_I2C_Init+0x274>)
 800325c:	428b      	cmp	r3, r1
 800325e:	d819      	bhi.n	8003294 <HAL_I2C_Init+0x13c>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e59      	subs	r1, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fbb1 f3f3 	udiv	r3, r1, r3
 800326e:	1c59      	adds	r1, r3, #1
 8003270:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003274:	400b      	ands	r3, r1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_I2C_Init+0x138>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1e59      	subs	r1, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fbb1 f3f3 	udiv	r3, r1, r3
 8003288:	3301      	adds	r3, #1
 800328a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328e:	e051      	b.n	8003334 <HAL_I2C_Init+0x1dc>
 8003290:	2304      	movs	r3, #4
 8003292:	e04f      	b.n	8003334 <HAL_I2C_Init+0x1dc>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d111      	bne.n	80032c0 <HAL_I2C_Init+0x168>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e58      	subs	r0, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	440b      	add	r3, r1
 80032aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e012      	b.n	80032e6 <HAL_I2C_Init+0x18e>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1e58      	subs	r0, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	0099      	lsls	r1, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Init+0x196>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e022      	b.n	8003334 <HAL_I2C_Init+0x1dc>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10e      	bne.n	8003314 <HAL_I2C_Init+0x1bc>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1e58      	subs	r0, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	440b      	add	r3, r1
 8003304:	fbb0 f3f3 	udiv	r3, r0, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003312:	e00f      	b.n	8003334 <HAL_I2C_Init+0x1dc>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1e58      	subs	r0, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	0099      	lsls	r1, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	fbb0 f3f3 	udiv	r3, r0, r3
 800332a:	3301      	adds	r3, #1
 800332c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	6809      	ldr	r1, [r1, #0]
 8003338:	4313      	orrs	r3, r2
 800333a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6911      	ldr	r1, [r2, #16]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68d2      	ldr	r2, [r2, #12]
 800336e:	4311      	orrs	r1, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	430b      	orrs	r3, r1
 8003376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	000186a0 	.word	0x000186a0
 80033d0:	001e847f 	.word	0x001e847f
 80033d4:	003d08ff 	.word	0x003d08ff
 80033d8:	431bde83 	.word	0x431bde83
 80033dc:	10624dd3 	.word	0x10624dd3

080033e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e128      	b.n	8003644 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a90      	ldr	r2, [pc, #576]	; (800364c <HAL_I2S_Init+0x26c>)
 800340a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7fd fc11 	bl	8000c34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003428:	f023 030f 	bic.w	r3, r3, #15
 800342c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2202      	movs	r2, #2
 8003434:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d060      	beq.n	8003500 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003446:	2310      	movs	r3, #16
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e001      	b.n	8003450 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b20      	cmp	r3, #32
 8003456:	d802      	bhi.n	800345e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800345e:	2001      	movs	r0, #1
 8003460:	f001 f9d8 	bl	8004814 <HAL_RCCEx_GetPeriphCLKFreq>
 8003464:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346e:	d125      	bne.n	80034bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	3305      	adds	r3, #5
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e01f      	b.n	80034da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	461a      	mov	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	3305      	adds	r3, #5
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	e00e      	b.n	80034da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	461a      	mov	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	3305      	adds	r3, #5
 80034d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4a5c      	ldr	r2, [pc, #368]	; (8003650 <HAL_I2S_Init+0x270>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	08db      	lsrs	r3, r3, #3
 80034e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	e003      	b.n	8003508 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003500:	2302      	movs	r3, #2
 8003502:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d902      	bls.n	8003514 <HAL_I2S_Init+0x134>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2bff      	cmp	r3, #255	; 0xff
 8003512:	d907      	bls.n	8003524 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0210 	orr.w	r2, r3, #16
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e08f      	b.n	8003644 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	ea42 0103 	orr.w	r1, r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	430a      	orrs	r2, r1
 8003536:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003542:	f023 030f 	bic.w	r3, r3, #15
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6851      	ldr	r1, [r2, #4]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	4311      	orrs	r1, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68d2      	ldr	r2, [r2, #12]
 8003554:	4311      	orrs	r1, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6992      	ldr	r2, [r2, #24]
 800355a:	430a      	orrs	r2, r1
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003566:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d161      	bne.n	8003634 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a38      	ldr	r2, [pc, #224]	; (8003654 <HAL_I2S_Init+0x274>)
 8003574:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a37      	ldr	r2, [pc, #220]	; (8003658 <HAL_I2S_Init+0x278>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_I2S_Init+0x1a4>
 8003580:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_I2S_Init+0x27c>)
 8003582:	e001      	b.n	8003588 <HAL_I2S_Init+0x1a8>
 8003584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	4932      	ldr	r1, [pc, #200]	; (8003658 <HAL_I2S_Init+0x278>)
 8003590:	428a      	cmp	r2, r1
 8003592:	d101      	bne.n	8003598 <HAL_I2S_Init+0x1b8>
 8003594:	4a31      	ldr	r2, [pc, #196]	; (800365c <HAL_I2S_Init+0x27c>)
 8003596:	e001      	b.n	800359c <HAL_I2S_Init+0x1bc>
 8003598:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800359c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035a0:	f023 030f 	bic.w	r3, r3, #15
 80035a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <HAL_I2S_Init+0x278>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_I2S_Init+0x1d4>
 80035b0:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_I2S_Init+0x27c>)
 80035b2:	e001      	b.n	80035b8 <HAL_I2S_Init+0x1d8>
 80035b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b8:	2202      	movs	r2, #2
 80035ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <HAL_I2S_Init+0x278>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_I2S_Init+0x1ea>
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_I2S_Init+0x27c>)
 80035c8:	e001      	b.n	80035ce <HAL_I2S_Init+0x1ee>
 80035ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035da:	d003      	beq.n	80035e4 <HAL_I2S_Init+0x204>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80035e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	e001      	b.n	80035f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035fa:	4313      	orrs	r3, r2
 80035fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003604:	4313      	orrs	r3, r2
 8003606:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800360e:	4313      	orrs	r3, r2
 8003610:	b29a      	uxth	r2, r3
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	4313      	orrs	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800361c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <HAL_I2S_Init+0x278>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_I2S_Init+0x24c>
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_I2S_Init+0x27c>)
 800362a:	e001      	b.n	8003630 <HAL_I2S_Init+0x250>
 800362c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003630:	897a      	ldrh	r2, [r7, #10]
 8003632:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08003757 	.word	0x08003757
 8003650:	cccccccd 	.word	0xcccccccd
 8003654:	0800386d 	.word	0x0800386d
 8003658:	40003800 	.word	0x40003800
 800365c:	40003400 	.word	0x40003400

08003660 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	881a      	ldrh	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c9a      	adds	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10e      	bne.n	80036f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ffb8 	bl	8003660 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	b292      	uxth	r2, r2
 800370c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	1c9a      	adds	r2, r3, #2
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10e      	bne.n	800374e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff93 	bl	8003674 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b04      	cmp	r3, #4
 8003770:	d13a      	bne.n	80037e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d109      	bne.n	8003790 <I2S_IRQHandler+0x3a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d102      	bne.n	8003790 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffb4 	bl	80036f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d126      	bne.n	80037e8 <I2S_IRQHandler+0x92>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d11f      	bne.n	80037e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f043 0202 	orr.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ff50 	bl	8003688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d136      	bne.n	8003862 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d109      	bne.n	8003812 <I2S_IRQHandler+0xbc>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003808:	2b80      	cmp	r3, #128	; 0x80
 800380a:	d102      	bne.n	8003812 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff45 	bl	800369c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d122      	bne.n	8003862 <I2S_IRQHandler+0x10c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b20      	cmp	r3, #32
 8003828:	d11b      	bne.n	8003862 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003838:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff13 	bl	8003688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a92      	ldr	r2, [pc, #584]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003886:	4b92      	ldr	r3, [pc, #584]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003888:	e001      	b.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800388a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a8b      	ldr	r2, [pc, #556]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80038a4:	4b8a      	ldr	r3, [pc, #552]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a6:	e001      	b.n	80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b8:	d004      	beq.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f040 8099 	bne.w	80039f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d107      	bne.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f925 	bl	8003b28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d107      	bne.n	80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f9c8 	bl	8003c88 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d13a      	bne.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d035      	beq.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6e      	ldr	r2, [pc, #440]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003918:	e001      	b.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800391a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4969      	ldr	r1, [pc, #420]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003926:	428b      	cmp	r3, r1
 8003928:	d101      	bne.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800392a:	4b69      	ldr	r3, [pc, #420]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800392c:	e001      	b.n	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800392e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003936:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003946:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f043 0202 	orr.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fe88 	bl	8003688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	f040 80c3 	bne.w	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80bd 	beq.w	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800399e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a49      	ldr	r2, [pc, #292]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039aa:	4b49      	ldr	r3, [pc, #292]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ac:	e001      	b.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4944      	ldr	r1, [pc, #272]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ba:	428b      	cmp	r3, r1
 80039bc:	d101      	bne.n	80039c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039be:	4b44      	ldr	r3, [pc, #272]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039c0:	e001      	b.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff fe4a 	bl	8003688 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039f4:	e089      	b.n	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d107      	bne.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8be 	bl	8003b8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8fd 	bl	8003c24 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b40      	cmp	r3, #64	; 0x40
 8003a32:	d12f      	bne.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02a      	beq.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a5a:	e001      	b.n	8003a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4919      	ldr	r1, [pc, #100]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a6e:	e001      	b.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f043 0202 	orr.w	r2, r3, #2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fdfa 	bl	8003688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d136      	bne.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d031      	beq.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a07      	ldr	r2, [pc, #28]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ab4:	e001      	b.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4902      	ldr	r1, [pc, #8]	; (8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ac2:	428b      	cmp	r3, r1
 8003ac4:	d106      	bne.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003ac6:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ac8:	e006      	b.n	8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003aca:	bf00      	nop
 8003acc:	40003800 	.word	0x40003800
 8003ad0:	40003400 	.word	0x40003400
 8003ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003adc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f043 0204 	orr.w	r2, r3, #4
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fdc0 	bl	8003688 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b08:	e000      	b.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b0a:	bf00      	nop
}
 8003b0c:	bf00      	nop
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c99      	adds	r1, r3, #2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6251      	str	r1, [r2, #36]	; 0x24
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d113      	bne.n	8003b82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ffc9 	bl	8003b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	1c99      	adds	r1, r3, #2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b9e:	8819      	ldrh	r1, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <I2SEx_TxISR_I2SExt+0x90>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <I2SEx_TxISR_I2SExt+0x22>
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <I2SEx_TxISR_I2SExt+0x94>)
 8003bac:	e001      	b.n	8003bb2 <I2SEx_TxISR_I2SExt+0x26>
 8003bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d121      	bne.n	8003c12 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <I2SEx_TxISR_I2SExt+0x90>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <I2SEx_TxISR_I2SExt+0x50>
 8003bd8:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <I2SEx_TxISR_I2SExt+0x94>)
 8003bda:	e001      	b.n	8003be0 <I2SEx_TxISR_I2SExt+0x54>
 8003bdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	490d      	ldr	r1, [pc, #52]	; (8003c1c <I2SEx_TxISR_I2SExt+0x90>)
 8003be8:	428b      	cmp	r3, r1
 8003bea:	d101      	bne.n	8003bf0 <I2SEx_TxISR_I2SExt+0x64>
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <I2SEx_TxISR_I2SExt+0x94>)
 8003bee:	e001      	b.n	8003bf4 <I2SEx_TxISR_I2SExt+0x68>
 8003bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff81 	bl	8003b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40003800 	.word	0x40003800
 8003c20:	40003400 	.word	0x40003400

08003c24 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68d8      	ldr	r0, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	1c99      	adds	r1, r3, #2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c3c:	b282      	uxth	r2, r0
 8003c3e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d113      	bne.n	8003c80 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c66:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ff4a 	bl	8003b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <I2SEx_RxISR_I2SExt+0x90>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <I2SEx_RxISR_I2SExt+0x16>
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <I2SEx_RxISR_I2SExt+0x94>)
 8003c9c:	e001      	b.n	8003ca2 <I2SEx_RxISR_I2SExt+0x1a>
 8003c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca2:	68d8      	ldr	r0, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	1c99      	adds	r1, r3, #2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cae:	b282      	uxth	r2, r0
 8003cb0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d121      	bne.n	8003d0e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <I2SEx_RxISR_I2SExt+0x90>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <I2SEx_RxISR_I2SExt+0x50>
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <I2SEx_RxISR_I2SExt+0x94>)
 8003cd6:	e001      	b.n	8003cdc <I2SEx_RxISR_I2SExt+0x54>
 8003cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	490d      	ldr	r1, [pc, #52]	; (8003d18 <I2SEx_RxISR_I2SExt+0x90>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d101      	bne.n	8003cec <I2SEx_RxISR_I2SExt+0x64>
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <I2SEx_RxISR_I2SExt+0x94>)
 8003cea:	e001      	b.n	8003cf0 <I2SEx_RxISR_I2SExt+0x68>
 8003cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cf4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff03 	bl	8003b14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40003800 	.word	0x40003800
 8003d1c:	40003400 	.word	0x40003400

08003d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e267      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d075      	beq.n	8003e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3e:	4b88      	ldr	r3, [pc, #544]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d00c      	beq.n	8003d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4a:	4b85      	ldr	r3, [pc, #532]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d112      	bne.n	8003d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d56:	4b82      	ldr	r3, [pc, #520]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d62:	d10b      	bne.n	8003d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	4b7e      	ldr	r3, [pc, #504]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d05b      	beq.n	8003e28 <HAL_RCC_OscConfig+0x108>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d157      	bne.n	8003e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e242      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0x74>
 8003d86:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a75      	ldr	r2, [pc, #468]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e01d      	b.n	8003dd0 <HAL_RCC_OscConfig+0xb0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x98>
 8003d9e:	4b70      	ldr	r3, [pc, #448]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a6f      	ldr	r2, [pc, #444]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6c      	ldr	r2, [pc, #432]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCC_OscConfig+0xb0>
 8003db8:	4b69      	ldr	r3, [pc, #420]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a68      	ldr	r2, [pc, #416]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4b66      	ldr	r3, [pc, #408]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a65      	ldr	r2, [pc, #404]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d013      	beq.n	8003e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fd fa12 	bl	8001200 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de0:	f7fd fa0e 	bl	8001200 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	; 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e207      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b5b      	ldr	r3, [pc, #364]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0xc0>
 8003dfe:	e014      	b.n	8003e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fd f9fe 	bl	8001200 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fd f9fa 	bl	8001200 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e1f3      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1a:	4b51      	ldr	r3, [pc, #324]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0xe8>
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d063      	beq.n	8003efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e36:	4b4a      	ldr	r3, [pc, #296]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e42:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d11c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4e:	4b44      	ldr	r3, [pc, #272]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d116      	bne.n	8003e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_RCC_OscConfig+0x152>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e1c7      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4937      	ldr	r1, [pc, #220]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e86:	e03a      	b.n	8003efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e90:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <HAL_RCC_OscConfig+0x244>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fd f9b3 	bl	8001200 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9e:	f7fd f9af 	bl	8001200 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e1a8      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb0:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebc:	4b28      	ldr	r3, [pc, #160]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4925      	ldr	r1, [pc, #148]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	600b      	str	r3, [r1, #0]
 8003ed0:	e015      	b.n	8003efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCC_OscConfig+0x244>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd f992 	bl	8001200 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee0:	f7fd f98e 	bl	8001200 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e187      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef2:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d036      	beq.n	8003f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x248>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fd f972 	bl	8001200 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f20:	f7fd f96e 	bl	8001200 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e167      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_OscConfig+0x240>)
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x200>
 8003f3e:	e01b      	b.n	8003f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <HAL_RCC_OscConfig+0x248>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fd f95b 	bl	8001200 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4c:	e00e      	b.n	8003f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4e:	f7fd f957 	bl	8001200 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d907      	bls.n	8003f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e150      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
 8003f60:	40023800 	.word	0x40023800
 8003f64:	42470000 	.word	0x42470000
 8003f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b88      	ldr	r3, [pc, #544]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ea      	bne.n	8003f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8097 	beq.w	80040b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b81      	ldr	r3, [pc, #516]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	4b7d      	ldr	r3, [pc, #500]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a7c      	ldr	r2, [pc, #496]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b7a      	ldr	r3, [pc, #488]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b77      	ldr	r3, [pc, #476]	; (8004194 <HAL_RCC_OscConfig+0x474>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d118      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc2:	4b74      	ldr	r3, [pc, #464]	; (8004194 <HAL_RCC_OscConfig+0x474>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a73      	ldr	r2, [pc, #460]	; (8004194 <HAL_RCC_OscConfig+0x474>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fce:	f7fd f917 	bl	8001200 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd6:	f7fd f913 	bl	8001200 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e10c      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	4b6a      	ldr	r3, [pc, #424]	; (8004194 <HAL_RCC_OscConfig+0x474>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d106      	bne.n	800400a <HAL_RCC_OscConfig+0x2ea>
 8003ffc:	4b64      	ldr	r3, [pc, #400]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a63      	ldr	r2, [pc, #396]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
 8004008:	e01c      	b.n	8004044 <HAL_RCC_OscConfig+0x324>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b05      	cmp	r3, #5
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0x30c>
 8004012:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a5e      	ldr	r2, [pc, #376]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004018:	f043 0304 	orr.w	r3, r3, #4
 800401c:	6713      	str	r3, [r2, #112]	; 0x70
 800401e:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a5b      	ldr	r2, [pc, #364]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0x324>
 800402c:	4b58      	ldr	r3, [pc, #352]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	4a57      	ldr	r2, [pc, #348]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	; 0x70
 8004038:	4b55      	ldr	r3, [pc, #340]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a54      	ldr	r2, [pc, #336]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 800403e:	f023 0304 	bic.w	r3, r3, #4
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fd f8d8 	bl	8001200 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	e00a      	b.n	800406a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fd f8d4 	bl	8001200 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0cb      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	4b49      	ldr	r3, [pc, #292]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ee      	beq.n	8004054 <HAL_RCC_OscConfig+0x334>
 8004076:	e014      	b.n	80040a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004078:	f7fd f8c2 	bl	8001200 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407e:	e00a      	b.n	8004096 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fd f8be 	bl	8001200 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0b5      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004096:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1ee      	bne.n	8004080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4b39      	ldr	r3, [pc, #228]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	4a38      	ldr	r2, [pc, #224]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80a1 	beq.w	8004200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040be:	4b34      	ldr	r3, [pc, #208]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d05c      	beq.n	8004184 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d141      	bne.n	8004156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d2:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_RCC_OscConfig+0x478>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fd f892 	bl	8001200 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fd f88e 	bl	8001200 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e087      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	4b27      	ldr	r3, [pc, #156]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	3b01      	subs	r3, #1
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	491b      	ldr	r1, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x478>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fd f867 	bl	8001200 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004136:	f7fd f863 	bl	8001200 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e05c      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x416>
 8004154:	e054      	b.n	8004200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_RCC_OscConfig+0x478>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fd f850 	bl	8001200 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004164:	f7fd f84c 	bl	8001200 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e045      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_RCC_OscConfig+0x470>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x444>
 8004182:	e03d      	b.n	8004200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e038      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
 8004190:	40023800 	.word	0x40023800
 8004194:	40007000 	.word	0x40007000
 8004198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <HAL_RCC_OscConfig+0x4ec>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d028      	beq.n	80041fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d121      	bne.n	80041fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d11a      	bne.n	80041fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d111      	bne.n	80041fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	3b01      	subs	r3, #1
 80041e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800

08004210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0cc      	b.n	80043be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004224:	4b68      	ldr	r3, [pc, #416]	; (80043c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d90c      	bls.n	800424c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b65      	ldr	r3, [pc, #404]	; (80043c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0b8      	b.n	80043be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004264:	4b59      	ldr	r3, [pc, #356]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a58      	ldr	r2, [pc, #352]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800426e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800427c:	4b53      	ldr	r3, [pc, #332]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a52      	ldr	r2, [pc, #328]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004288:	4b50      	ldr	r3, [pc, #320]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	494d      	ldr	r1, [pc, #308]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d044      	beq.n	8004330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d107      	bne.n	80042be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	4b47      	ldr	r3, [pc, #284]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d119      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e07f      	b.n	80043be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	4b3f      	ldr	r3, [pc, #252]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e06f      	b.n	80043be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042de:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e067      	b.n	80043be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ee:	4b37      	ldr	r3, [pc, #220]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 0203 	bic.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4934      	ldr	r1, [pc, #208]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004300:	f7fc ff7e 	bl	8001200 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	e00a      	b.n	800431e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004308:	f7fc ff7a 	bl	8001200 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e04f      	b.n	80043be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 020c 	and.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	429a      	cmp	r2, r3
 800432e:	d1eb      	bne.n	8004308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d20c      	bcs.n	8004358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e032      	b.n	80043be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4916      	ldr	r1, [pc, #88]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	490e      	ldr	r1, [pc, #56]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004396:	f000 f821 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 800439a:	4602      	mov	r2, r0
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	490a      	ldr	r1, [pc, #40]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 80043a8:	5ccb      	ldrb	r3, [r1, r3]
 80043aa:	fa22 f303 	lsr.w	r3, r2, r3
 80043ae:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x1c8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc fede 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40023c00 	.word	0x40023c00
 80043cc:	40023800 	.word	0x40023800
 80043d0:	08009e2c 	.word	0x08009e2c
 80043d4:	20000000 	.word	0x20000000
 80043d8:	20000004 	.word	0x20000004

080043dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e0:	b094      	sub	sp, #80	; 0x50
 80043e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	647b      	str	r3, [r7, #68]	; 0x44
 80043e8:	2300      	movs	r3, #0
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ec:	2300      	movs	r3, #0
 80043ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f4:	4b79      	ldr	r3, [pc, #484]	; (80045dc <HAL_RCC_GetSysClockFreq+0x200>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d00d      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x40>
 8004400:	2b08      	cmp	r3, #8
 8004402:	f200 80e1 	bhi.w	80045c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x34>
 800440a:	2b04      	cmp	r3, #4
 800440c:	d003      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0x3a>
 800440e:	e0db      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b73      	ldr	r3, [pc, #460]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004412:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004414:	e0db      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004416:	4b73      	ldr	r3, [pc, #460]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800441a:	e0d8      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800441c:	4b6f      	ldr	r3, [pc, #444]	; (80045dc <HAL_RCC_GetSysClockFreq+0x200>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004424:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004426:	4b6d      	ldr	r3, [pc, #436]	; (80045dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d063      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004432:	4b6a      	ldr	r3, [pc, #424]	; (80045dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	2200      	movs	r2, #0
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
 800443c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004444:	633b      	str	r3, [r7, #48]	; 0x30
 8004446:	2300      	movs	r3, #0
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
 800444a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800444e:	4622      	mov	r2, r4
 8004450:	462b      	mov	r3, r5
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f04f 0100 	mov.w	r1, #0
 800445a:	0159      	lsls	r1, r3, #5
 800445c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004460:	0150      	lsls	r0, r2, #5
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4621      	mov	r1, r4
 8004468:	1a51      	subs	r1, r2, r1
 800446a:	6139      	str	r1, [r7, #16]
 800446c:	4629      	mov	r1, r5
 800446e:	eb63 0301 	sbc.w	r3, r3, r1
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004480:	4659      	mov	r1, fp
 8004482:	018b      	lsls	r3, r1, #6
 8004484:	4651      	mov	r1, sl
 8004486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800448a:	4651      	mov	r1, sl
 800448c:	018a      	lsls	r2, r1, #6
 800448e:	4651      	mov	r1, sl
 8004490:	ebb2 0801 	subs.w	r8, r2, r1
 8004494:	4659      	mov	r1, fp
 8004496:	eb63 0901 	sbc.w	r9, r3, r1
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ae:	4690      	mov	r8, r2
 80044b0:	4699      	mov	r9, r3
 80044b2:	4623      	mov	r3, r4
 80044b4:	eb18 0303 	adds.w	r3, r8, r3
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	462b      	mov	r3, r5
 80044bc:	eb49 0303 	adc.w	r3, r9, r3
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044ce:	4629      	mov	r1, r5
 80044d0:	024b      	lsls	r3, r1, #9
 80044d2:	4621      	mov	r1, r4
 80044d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044d8:	4621      	mov	r1, r4
 80044da:	024a      	lsls	r2, r1, #9
 80044dc:	4610      	mov	r0, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e2:	2200      	movs	r2, #0
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ec:	f7fb fe6c 	bl	80001c8 <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4613      	mov	r3, r2
 80044f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f8:	e058      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fa:	4b38      	ldr	r3, [pc, #224]	; (80045dc <HAL_RCC_GetSysClockFreq+0x200>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	2200      	movs	r2, #0
 8004502:	4618      	mov	r0, r3
 8004504:	4611      	mov	r1, r2
 8004506:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	2300      	movs	r3, #0
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
 8004510:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	f04f 0000 	mov.w	r0, #0
 800451c:	f04f 0100 	mov.w	r1, #0
 8004520:	0159      	lsls	r1, r3, #5
 8004522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004526:	0150      	lsls	r0, r2, #5
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4641      	mov	r1, r8
 800452e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004532:	4649      	mov	r1, r9
 8004534:	eb63 0b01 	sbc.w	fp, r3, r1
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004544:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004548:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800454c:	ebb2 040a 	subs.w	r4, r2, sl
 8004550:	eb63 050b 	sbc.w	r5, r3, fp
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	00eb      	lsls	r3, r5, #3
 800455e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004562:	00e2      	lsls	r2, r4, #3
 8004564:	4614      	mov	r4, r2
 8004566:	461d      	mov	r5, r3
 8004568:	4643      	mov	r3, r8
 800456a:	18e3      	adds	r3, r4, r3
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	464b      	mov	r3, r9
 8004570:	eb45 0303 	adc.w	r3, r5, r3
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004582:	4629      	mov	r1, r5
 8004584:	028b      	lsls	r3, r1, #10
 8004586:	4621      	mov	r1, r4
 8004588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800458c:	4621      	mov	r1, r4
 800458e:	028a      	lsls	r2, r1, #10
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004596:	2200      	movs	r2, #0
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	61fa      	str	r2, [r7, #28]
 800459c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a0:	f7fb fe12 	bl	80001c8 <__aeabi_uldivmod>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4613      	mov	r3, r2
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_GetSysClockFreq+0x200>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	3301      	adds	r3, #1
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045c6:	e002      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3750      	adds	r7, #80	; 0x50
 80045d4:	46bd      	mov	sp, r7
 80045d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	00f42400 	.word	0x00f42400
 80045e4:	007a1200 	.word	0x007a1200

080045e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000000 	.word	0x20000000

08004600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004604:	f7ff fff0 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0a9b      	lsrs	r3, r3, #10
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	08009e3c 	.word	0x08009e3c

08004628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800462c:	f7ff ffdc 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0b5b      	lsrs	r3, r3, #13
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	; (800464c <HAL_RCC_GetPCLK2Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	08009e3c 	.word	0x08009e3c

08004650 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d105      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004674:	2b00      	cmp	r3, #0
 8004676:	d035      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004678:	4b62      	ldr	r3, [pc, #392]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800467e:	f7fc fdbf 	bl	8001200 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004686:	f7fc fdbb 	bl	8001200 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0b0      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004698:	4b5b      	ldr	r3, [pc, #364]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	019a      	lsls	r2, r3, #6
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	071b      	lsls	r3, r3, #28
 80046b0:	4955      	ldr	r1, [pc, #340]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046b8:	4b52      	ldr	r3, [pc, #328]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046be:	f7fc fd9f 	bl	8001200 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fc fd9b 	bl	8001200 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e090      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d8:	4b4b      	ldr	r3, [pc, #300]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8083 	beq.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	4b44      	ldr	r3, [pc, #272]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4a43      	ldr	r2, [pc, #268]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
 8004702:	4b41      	ldr	r3, [pc, #260]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800470e:	4b3f      	ldr	r3, [pc, #252]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a3e      	ldr	r2, [pc, #248]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004718:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800471a:	f7fc fd71 	bl	8001200 <HAL_GetTick>
 800471e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fc fd6d 	bl	8001200 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e062      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004734:	4b35      	ldr	r3, [pc, #212]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004740:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004748:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02f      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d028      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800475e:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004774:	4a24      	ldr	r2, [pc, #144]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800477a:	4b23      	ldr	r3, [pc, #140]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b01      	cmp	r3, #1
 8004784:	d114      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004786:	f7fc fd3b 	bl	8001200 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478c:	e00a      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7fc fd37 	bl	8001200 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e02a      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	4b18      	ldr	r3, [pc, #96]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ee      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047bc:	d10d      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d2:	490d      	ldr	r1, [pc, #52]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
 80047d8:	e005      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047e4:	6093      	str	r3, [r2, #8]
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f2:	4905      	ldr	r1, [pc, #20]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	42470068 	.word	0x42470068
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000
 8004810:	42470e40 	.word	0x42470e40

08004814 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d13e      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004832:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d12f      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800484a:	617b      	str	r3, [r7, #20]
          break;
 800484c:	e02f      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800484e:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485a:	d108      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800485c:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004864:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	e007      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004876:	4a15      	ldr	r2, [pc, #84]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	fb02 f303 	mul.w	r3, r2, r3
 8004890:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004898:	0f1b      	lsrs	r3, r3, #28
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
          break;
 80048a6:	e002      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
          break;
 80048ac:	bf00      	nop
        }
      }
      break;
 80048ae:	bf00      	nop
    }
  }
  return frequency;
 80048b0:	697b      	ldr	r3, [r7, #20]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	00bb8000 	.word	0x00bb8000
 80048c8:	007a1200 	.word	0x007a1200
 80048cc:	00f42400 	.word	0x00f42400

080048d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07b      	b.n	80049da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d108      	bne.n	80048fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f2:	d009      	beq.n	8004908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	61da      	str	r2, [r3, #28]
 80048fa:	e005      	b.n	8004908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fa06 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	ea42 0103 	orr.w	r1, r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	f003 0104 	and.w	r1, r3, #4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0210 	and.w	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e041      	b.n	8004a78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fc f9db 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f000 fb4b 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e041      	b.n	8004b16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f839 	bl	8004b1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 fafc 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d122      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d11b      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f06f 0202 	mvn.w	r2, #2
 8004b5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fa82 	bl	800507e <HAL_TIM_IC_CaptureCallback>
 8004b7a:	e005      	b.n	8004b88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa74 	bl	800506a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa85 	bl	8005092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d122      	bne.n	8004be2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d11b      	bne.n	8004be2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0204 	mvn.w	r2, #4
 8004bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fa58 	bl	800507e <HAL_TIM_IC_CaptureCallback>
 8004bce:	e005      	b.n	8004bdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa4a 	bl	800506a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa5b 	bl	8005092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d122      	bne.n	8004c36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d11b      	bne.n	8004c36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f06f 0208 	mvn.w	r2, #8
 8004c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fa2e 	bl	800507e <HAL_TIM_IC_CaptureCallback>
 8004c22:	e005      	b.n	8004c30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa20 	bl	800506a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa31 	bl	8005092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d122      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d11b      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0210 	mvn.w	r2, #16
 8004c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2208      	movs	r2, #8
 8004c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa04 	bl	800507e <HAL_TIM_IC_CaptureCallback>
 8004c76:	e005      	b.n	8004c84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f9f6 	bl	800506a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa07 	bl	8005092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10e      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f06f 0201 	mvn.w	r2, #1
 8004cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f9d0 	bl	8005056 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	2b80      	cmp	r3, #128	; 0x80
 8004cc2:	d10e      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d107      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fd5d 	bl	800579c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d10e      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d107      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f9cc 	bl	80050a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d10e      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d107      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0220 	mvn.w	r2, #32
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fd27 	bl	8005788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e0ae      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b0c      	cmp	r3, #12
 8004d6e:	f200 809f 	bhi.w	8004eb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d72:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004dad 	.word	0x08004dad
 8004d7c:	08004eb1 	.word	0x08004eb1
 8004d80:	08004eb1 	.word	0x08004eb1
 8004d84:	08004eb1 	.word	0x08004eb1
 8004d88:	08004ded 	.word	0x08004ded
 8004d8c:	08004eb1 	.word	0x08004eb1
 8004d90:	08004eb1 	.word	0x08004eb1
 8004d94:	08004eb1 	.word	0x08004eb1
 8004d98:	08004e2f 	.word	0x08004e2f
 8004d9c:	08004eb1 	.word	0x08004eb1
 8004da0:	08004eb1 	.word	0x08004eb1
 8004da4:	08004eb1 	.word	0x08004eb1
 8004da8:	08004e6f 	.word	0x08004e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fa22 	bl	80051fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0208 	orr.w	r2, r2, #8
 8004dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0204 	bic.w	r2, r2, #4
 8004dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6999      	ldr	r1, [r3, #24]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	619a      	str	r2, [r3, #24]
      break;
 8004dea:	e064      	b.n	8004eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fa72 	bl	80052dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6999      	ldr	r1, [r3, #24]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	021a      	lsls	r2, r3, #8
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	619a      	str	r2, [r3, #24]
      break;
 8004e2c:	e043      	b.n	8004eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fac7 	bl	80053c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0208 	orr.w	r2, r2, #8
 8004e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0204 	bic.w	r2, r2, #4
 8004e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69d9      	ldr	r1, [r3, #28]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	61da      	str	r2, [r3, #28]
      break;
 8004e6c:	e023      	b.n	8004eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fb1b 	bl	80054b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	021a      	lsls	r2, r3, #8
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	61da      	str	r2, [r3, #28]
      break;
 8004eae:	e002      	b.n	8004eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e0b4      	b.n	800504e <HAL_TIM_ConfigClockSource+0x186>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1c:	d03e      	beq.n	8004f9c <HAL_TIM_ConfigClockSource+0xd4>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	f200 8087 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2a:	f000 8086 	beq.w	800503a <HAL_TIM_ConfigClockSource+0x172>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f32:	d87f      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b70      	cmp	r3, #112	; 0x70
 8004f36:	d01a      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0xa6>
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d87b      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b60      	cmp	r3, #96	; 0x60
 8004f3e:	d050      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x11a>
 8004f40:	2b60      	cmp	r3, #96	; 0x60
 8004f42:	d877      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b50      	cmp	r3, #80	; 0x50
 8004f46:	d03c      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0xfa>
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d873      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d058      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x13a>
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d86f      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b30      	cmp	r3, #48	; 0x30
 8004f56:	d064      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x15a>
 8004f58:	2b30      	cmp	r3, #48	; 0x30
 8004f5a:	d86b      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d060      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x15a>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d867      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d05c      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x15a>
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d05a      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	e062      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6899      	ldr	r1, [r3, #8]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f000 fb67 	bl	8005650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	609a      	str	r2, [r3, #8]
      break;
 8004f9a:	e04f      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6899      	ldr	r1, [r3, #8]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f000 fb50 	bl	8005650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fbe:	609a      	str	r2, [r3, #8]
      break;
 8004fc0:	e03c      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 fac4 	bl	800555c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2150      	movs	r1, #80	; 0x50
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fb1d 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e02c      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 fae3 	bl	80055ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2160      	movs	r1, #96	; 0x60
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fb0d 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8005000:	e01c      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	461a      	mov	r2, r3
 8005010:	f000 faa4 	bl	800555c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2140      	movs	r1, #64	; 0x40
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fafd 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8005020:	e00c      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f000 faf4 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8005032:	e003      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
      break;
 8005038:	e000      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800503a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a40      	ldr	r2, [pc, #256]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00f      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3d      	ldr	r2, [pc, #244]	; (80051d4 <TIM_Base_SetConfig+0x118>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <TIM_Base_SetConfig+0x11c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <TIM_Base_SetConfig+0x120>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d02b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d027      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <TIM_Base_SetConfig+0x118>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d023      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <TIM_Base_SetConfig+0x11c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01f      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2a      	ldr	r2, [pc, #168]	; (80051dc <TIM_Base_SetConfig+0x120>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a29      	ldr	r2, [pc, #164]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d017      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a28      	ldr	r2, [pc, #160]	; (80051e4 <TIM_Base_SetConfig+0x128>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a27      	ldr	r2, [pc, #156]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00f      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a26      	ldr	r2, [pc, #152]	; (80051ec <TIM_Base_SetConfig+0x130>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a25      	ldr	r2, [pc, #148]	; (80051f0 <TIM_Base_SetConfig+0x134>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a24      	ldr	r2, [pc, #144]	; (80051f4 <TIM_Base_SetConfig+0x138>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a23      	ldr	r2, [pc, #140]	; (80051f8 <TIM_Base_SetConfig+0x13c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d108      	bne.n	8005180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d103      	bne.n	80051bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	615a      	str	r2, [r3, #20]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800
 80051f0:	40001800 	.word	0x40001800
 80051f4:	40001c00 	.word	0x40001c00
 80051f8:	40002000 	.word	0x40002000

080051fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0201 	bic.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0302 	bic.w	r3, r3, #2
 8005244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <TIM_OC1_SetConfig+0xd8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_OC1_SetConfig+0x64>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <TIM_OC1_SetConfig+0xdc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10c      	bne.n	800527a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0308 	bic.w	r3, r3, #8
 8005266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f023 0304 	bic.w	r3, r3, #4
 8005278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a15      	ldr	r2, [pc, #84]	; (80052d4 <TIM_OC1_SetConfig+0xd8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_OC1_SetConfig+0x8e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <TIM_OC1_SetConfig+0xdc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40010400 	.word	0x40010400

080052dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f023 0210 	bic.w	r2, r3, #16
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0320 	bic.w	r3, r3, #32
 8005326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a22      	ldr	r2, [pc, #136]	; (80053c0 <TIM_OC2_SetConfig+0xe4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC2_SetConfig+0x68>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a21      	ldr	r2, [pc, #132]	; (80053c4 <TIM_OC2_SetConfig+0xe8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d10d      	bne.n	8005360 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <TIM_OC2_SetConfig+0xe4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_OC2_SetConfig+0x94>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <TIM_OC2_SetConfig+0xe8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d113      	bne.n	8005398 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800537e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40010400 	.word	0x40010400

080053c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <TIM_OC3_SetConfig+0xe0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_OC3_SetConfig+0x66>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a20      	ldr	r2, [pc, #128]	; (80054ac <TIM_OC3_SetConfig+0xe4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10d      	bne.n	800544a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <TIM_OC3_SetConfig+0xe0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_OC3_SetConfig+0x92>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a15      	ldr	r2, [pc, #84]	; (80054ac <TIM_OC3_SetConfig+0xe4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d113      	bne.n	8005482 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40010400 	.word	0x40010400

080054b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	031b      	lsls	r3, r3, #12
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a12      	ldr	r2, [pc, #72]	; (8005554 <TIM_OC4_SetConfig+0xa4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_OC4_SetConfig+0x68>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a11      	ldr	r2, [pc, #68]	; (8005558 <TIM_OC4_SetConfig+0xa8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d109      	bne.n	800552c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800551e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	019b      	lsls	r3, r3, #6
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40010400 	.word	0x40010400

0800555c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 030a 	bic.w	r3, r3, #10
 8005598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0210 	bic.w	r2, r3, #16
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	f043 0307 	orr.w	r3, r3, #7
 800563c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800566a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	609a      	str	r2, [r3, #8]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e05a      	b.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a21      	ldr	r2, [pc, #132]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f4:	d01d      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1a      	ldr	r2, [pc, #104]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a17      	ldr	r2, [pc, #92]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a15      	ldr	r2, [pc, #84]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10c      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4313      	orrs	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40010400 	.word	0x40010400
 8005780:	40014000 	.word	0x40014000
 8005784:	40001800 	.word	0x40001800

08005788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e03f      	b.n	8005842 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb fb68 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2224      	movs	r2, #36	; 0x24
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fc7b 	bl	80060f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b0ba      	sub	sp, #232	; 0xe8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005872:	2300      	movs	r3, #0
 8005874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005878:	2300      	movs	r3, #0
 800587a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800588a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10f      	bne.n	80058b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d009      	beq.n	80058b2 <HAL_UART_IRQHandler+0x66>
 800589e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fb65 	bl	8005f7a <UART_Receive_IT>
      return;
 80058b0:	e256      	b.n	8005d60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80de 	beq.w	8005a78 <HAL_UART_IRQHandler+0x22c>
 80058bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80d1 	beq.w	8005a78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_UART_IRQHandler+0xae>
 80058e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0201 	orr.w	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <HAL_UART_IRQHandler+0xd2>
 8005906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f043 0202 	orr.w	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_UART_IRQHandler+0xf6>
 800592a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f043 0204 	orr.w	r2, r3, #4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d011      	beq.n	8005972 <HAL_UART_IRQHandler+0x126>
 800594e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800595a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f043 0208 	orr.w	r2, r3, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 81ed 	beq.w	8005d56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_UART_IRQHandler+0x14e>
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 faf0 	bl	8005f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <HAL_UART_IRQHandler+0x17a>
 80059be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d04f      	beq.n	8005a66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f9f8 	bl	8005dbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d141      	bne.n	8005a5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3314      	adds	r3, #20
 80059e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3314      	adds	r3, #20
 8005a02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1d9      	bne.n	80059da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d013      	beq.n	8005a56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	4a7d      	ldr	r2, [pc, #500]	; (8005c28 <HAL_UART_IRQHandler+0x3dc>)
 8005a34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fb fd91 	bl	8001562 <HAL_DMA_Abort_IT>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	e00e      	b.n	8005a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f99a 	bl	8005d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	e00a      	b.n	8005a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f996 	bl	8005d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	e006      	b.n	8005a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f992 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a72:	e170      	b.n	8005d56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	bf00      	nop
    return;
 8005a76:	e16e      	b.n	8005d56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	f040 814a 	bne.w	8005d16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 8143 	beq.w	8005d16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 813c 	beq.w	8005d16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	f040 80b4 	bne.w	8005c2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ad0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8140 	beq.w	8005d5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	f080 8139 	bcs.w	8005d5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afa:	f000 8088 	beq.w	8005c0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1d9      	bne.n	8005afe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e1      	bne.n	8005b4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3314      	adds	r3, #20
 8005b8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3314      	adds	r3, #20
 8005ba6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e3      	bne.n	8005b86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bde:	f023 0310 	bic.w	r3, r3, #16
 8005be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	330c      	adds	r3, #12
 8005bec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bf0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bf2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e3      	bne.n	8005bcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fb fc3a 	bl	8001482 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f8c0 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c24:	e099      	b.n	8005d5a <HAL_UART_IRQHandler+0x50e>
 8005c26:	bf00      	nop
 8005c28:	08005e83 	.word	0x08005e83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 808b 	beq.w	8005d5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8086 	beq.w	8005d5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c76:	647a      	str	r2, [r7, #68]	; 0x44
 8005c78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e3      	bne.n	8005c52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3314      	adds	r3, #20
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	623b      	str	r3, [r7, #32]
   return(result);
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cae:	633a      	str	r2, [r7, #48]	; 0x30
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e3      	bne.n	8005c8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0310 	bic.w	r3, r3, #16
 8005ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cf4:	61fa      	str	r2, [r7, #28]
 8005cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	617b      	str	r3, [r7, #20]
   return(result);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e3      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f848 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d14:	e023      	b.n	8005d5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_UART_IRQHandler+0x4ea>
 8005d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8bb 	bl	8005eaa <UART_Transmit_IT>
    return;
 8005d34:	e014      	b.n	8005d60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00e      	beq.n	8005d60 <HAL_UART_IRQHandler+0x514>
 8005d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f8fb 	bl	8005f4a <UART_EndTransmit_IT>
    return;
 8005d54:	e004      	b.n	8005d60 <HAL_UART_IRQHandler+0x514>
    return;
 8005d56:	bf00      	nop
 8005d58:	e002      	b.n	8005d60 <HAL_UART_IRQHandler+0x514>
      return;
 8005d5a:	bf00      	nop
 8005d5c:	e000      	b.n	8005d60 <HAL_UART_IRQHandler+0x514>
      return;
 8005d5e:	bf00      	nop
  }
}
 8005d60:	37e8      	adds	r7, #232	; 0xe8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop

08005d68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b095      	sub	sp, #84	; 0x54
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005de4:	643a      	str	r2, [r7, #64]	; 0x40
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3314      	adds	r3, #20
 8005dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f023 0301 	bic.w	r3, r3, #1
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3314      	adds	r3, #20
 8005e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e5      	bne.n	8005df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d119      	bne.n	8005e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e54:	61ba      	str	r2, [r7, #24]
 8005e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6979      	ldr	r1, [r7, #20]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	613b      	str	r3, [r7, #16]
   return(result);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e5      	bne.n	8005e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e76:	bf00      	nop
 8005e78:	3754      	adds	r7, #84	; 0x54
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff ff77 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b21      	cmp	r3, #33	; 0x21
 8005ebc:	d13e      	bne.n	8005f3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec6:	d114      	bne.n	8005ef2 <UART_Transmit_IT+0x48>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d110      	bne.n	8005ef2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	1c9a      	adds	r2, r3, #2
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	621a      	str	r2, [r3, #32]
 8005ef0:	e008      	b.n	8005f04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	1c59      	adds	r1, r3, #1
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6211      	str	r1, [r2, #32]
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	4619      	mov	r1, r3
 8005f12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10f      	bne.n	8005f38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e000      	b.n	8005f3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
  }
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fefc 	bl	8005d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b08c      	sub	sp, #48	; 0x30
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b22      	cmp	r3, #34	; 0x22
 8005f8c:	f040 80ab 	bne.w	80060e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f98:	d117      	bne.n	8005fca <UART_Receive_IT+0x50>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	1c9a      	adds	r2, r3, #2
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc8:	e026      	b.n	8006018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fdc:	d007      	beq.n	8005fee <UART_Receive_IT+0x74>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <UART_Receive_IT+0x82>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	e008      	b.n	800600e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006008:	b2da      	uxtb	r2, r3
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29b      	uxth	r3, r3
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4619      	mov	r1, r3
 8006026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006028:	2b00      	cmp	r3, #0
 800602a:	d15a      	bne.n	80060e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0220 	bic.w	r2, r2, #32
 800603a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800604a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0201 	bic.w	r2, r2, #1
 800605a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	2b01      	cmp	r3, #1
 800606a:	d135      	bne.n	80060d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	330c      	adds	r3, #12
 8006078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	613b      	str	r3, [r7, #16]
   return(result);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f023 0310 	bic.w	r3, r3, #16
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	623a      	str	r2, [r7, #32]
 8006094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	69f9      	ldr	r1, [r7, #28]
 8006098:	6a3a      	ldr	r2, [r7, #32]
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	61bb      	str	r3, [r7, #24]
   return(result);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e5      	bne.n	8006072 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d10a      	bne.n	80060ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff fe67 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
 80060d6:	e002      	b.n	80060de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff fe4f 	bl	8005d7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	e002      	b.n	80060e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e000      	b.n	80060e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
  }
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3730      	adds	r7, #48	; 0x30
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f4:	b0c0      	sub	sp, #256	; 0x100
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	68d9      	ldr	r1, [r3, #12]
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	ea40 0301 	orr.w	r3, r0, r1
 8006118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	431a      	orrs	r2, r3
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	431a      	orrs	r2, r3
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006148:	f021 010c 	bic.w	r1, r1, #12
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006156:	430b      	orrs	r3, r1
 8006158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616a:	6999      	ldr	r1, [r3, #24]
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	ea40 0301 	orr.w	r3, r0, r1
 8006176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b8f      	ldr	r3, [pc, #572]	; (80063bc <UART_SetConfig+0x2cc>)
 8006180:	429a      	cmp	r2, r3
 8006182:	d005      	beq.n	8006190 <UART_SetConfig+0xa0>
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b8d      	ldr	r3, [pc, #564]	; (80063c0 <UART_SetConfig+0x2d0>)
 800618c:	429a      	cmp	r2, r3
 800618e:	d104      	bne.n	800619a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006190:	f7fe fa4a 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 8006194:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006198:	e003      	b.n	80061a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800619a:	f7fe fa31 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 800619e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ac:	f040 810c 	bne.w	80063c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061c2:	4622      	mov	r2, r4
 80061c4:	462b      	mov	r3, r5
 80061c6:	1891      	adds	r1, r2, r2
 80061c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80061ca:	415b      	adcs	r3, r3
 80061cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061d2:	4621      	mov	r1, r4
 80061d4:	eb12 0801 	adds.w	r8, r2, r1
 80061d8:	4629      	mov	r1, r5
 80061da:	eb43 0901 	adc.w	r9, r3, r1
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061f2:	4690      	mov	r8, r2
 80061f4:	4699      	mov	r9, r3
 80061f6:	4623      	mov	r3, r4
 80061f8:	eb18 0303 	adds.w	r3, r8, r3
 80061fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006200:	462b      	mov	r3, r5
 8006202:	eb49 0303 	adc.w	r3, r9, r3
 8006206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006216:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800621a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800621e:	460b      	mov	r3, r1
 8006220:	18db      	adds	r3, r3, r3
 8006222:	653b      	str	r3, [r7, #80]	; 0x50
 8006224:	4613      	mov	r3, r2
 8006226:	eb42 0303 	adc.w	r3, r2, r3
 800622a:	657b      	str	r3, [r7, #84]	; 0x54
 800622c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006234:	f7f9 ffc8 	bl	80001c8 <__aeabi_uldivmod>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4b61      	ldr	r3, [pc, #388]	; (80063c4 <UART_SetConfig+0x2d4>)
 800623e:	fba3 2302 	umull	r2, r3, r3, r2
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	011c      	lsls	r4, r3, #4
 8006246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800624a:	2200      	movs	r2, #0
 800624c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006250:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006258:	4642      	mov	r2, r8
 800625a:	464b      	mov	r3, r9
 800625c:	1891      	adds	r1, r2, r2
 800625e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006260:	415b      	adcs	r3, r3
 8006262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006268:	4641      	mov	r1, r8
 800626a:	eb12 0a01 	adds.w	sl, r2, r1
 800626e:	4649      	mov	r1, r9
 8006270:	eb43 0b01 	adc.w	fp, r3, r1
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006288:	4692      	mov	sl, r2
 800628a:	469b      	mov	fp, r3
 800628c:	4643      	mov	r3, r8
 800628e:	eb1a 0303 	adds.w	r3, sl, r3
 8006292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006296:	464b      	mov	r3, r9
 8006298:	eb4b 0303 	adc.w	r3, fp, r3
 800629c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062b4:	460b      	mov	r3, r1
 80062b6:	18db      	adds	r3, r3, r3
 80062b8:	643b      	str	r3, [r7, #64]	; 0x40
 80062ba:	4613      	mov	r3, r2
 80062bc:	eb42 0303 	adc.w	r3, r2, r3
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
 80062c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062ca:	f7f9 ff7d 	bl	80001c8 <__aeabi_uldivmod>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <UART_SetConfig+0x2d4>)
 80062d6:	fba3 2301 	umull	r2, r3, r3, r1
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	2264      	movs	r2, #100	; 0x64
 80062de:	fb02 f303 	mul.w	r3, r2, r3
 80062e2:	1acb      	subs	r3, r1, r3
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062ea:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <UART_SetConfig+0x2d4>)
 80062ec:	fba3 2302 	umull	r2, r3, r3, r2
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062f8:	441c      	add	r4, r3
 80062fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006304:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800630c:	4642      	mov	r2, r8
 800630e:	464b      	mov	r3, r9
 8006310:	1891      	adds	r1, r2, r2
 8006312:	63b9      	str	r1, [r7, #56]	; 0x38
 8006314:	415b      	adcs	r3, r3
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800631c:	4641      	mov	r1, r8
 800631e:	1851      	adds	r1, r2, r1
 8006320:	6339      	str	r1, [r7, #48]	; 0x30
 8006322:	4649      	mov	r1, r9
 8006324:	414b      	adcs	r3, r1
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006334:	4659      	mov	r1, fp
 8006336:	00cb      	lsls	r3, r1, #3
 8006338:	4651      	mov	r1, sl
 800633a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800633e:	4651      	mov	r1, sl
 8006340:	00ca      	lsls	r2, r1, #3
 8006342:	4610      	mov	r0, r2
 8006344:	4619      	mov	r1, r3
 8006346:	4603      	mov	r3, r0
 8006348:	4642      	mov	r2, r8
 800634a:	189b      	adds	r3, r3, r2
 800634c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006350:	464b      	mov	r3, r9
 8006352:	460a      	mov	r2, r1
 8006354:	eb42 0303 	adc.w	r3, r2, r3
 8006358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006368:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800636c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006370:	460b      	mov	r3, r1
 8006372:	18db      	adds	r3, r3, r3
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
 8006376:	4613      	mov	r3, r2
 8006378:	eb42 0303 	adc.w	r3, r2, r3
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800637e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006386:	f7f9 ff1f 	bl	80001c8 <__aeabi_uldivmod>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <UART_SetConfig+0x2d4>)
 8006390:	fba3 1302 	umull	r1, r3, r3, r2
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	2164      	movs	r1, #100	; 0x64
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	3332      	adds	r3, #50	; 0x32
 80063a2:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <UART_SetConfig+0x2d4>)
 80063a4:	fba2 2303 	umull	r2, r3, r2, r3
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	f003 0207 	and.w	r2, r3, #7
 80063ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4422      	add	r2, r4
 80063b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063b8:	e105      	b.n	80065c6 <UART_SetConfig+0x4d6>
 80063ba:	bf00      	nop
 80063bc:	40011000 	.word	0x40011000
 80063c0:	40011400 	.word	0x40011400
 80063c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063da:	4642      	mov	r2, r8
 80063dc:	464b      	mov	r3, r9
 80063de:	1891      	adds	r1, r2, r2
 80063e0:	6239      	str	r1, [r7, #32]
 80063e2:	415b      	adcs	r3, r3
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
 80063e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ea:	4641      	mov	r1, r8
 80063ec:	1854      	adds	r4, r2, r1
 80063ee:	4649      	mov	r1, r9
 80063f0:	eb43 0501 	adc.w	r5, r3, r1
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	00eb      	lsls	r3, r5, #3
 80063fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006402:	00e2      	lsls	r2, r4, #3
 8006404:	4614      	mov	r4, r2
 8006406:	461d      	mov	r5, r3
 8006408:	4643      	mov	r3, r8
 800640a:	18e3      	adds	r3, r4, r3
 800640c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006410:	464b      	mov	r3, r9
 8006412:	eb45 0303 	adc.w	r3, r5, r3
 8006416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800642a:	f04f 0200 	mov.w	r2, #0
 800642e:	f04f 0300 	mov.w	r3, #0
 8006432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006436:	4629      	mov	r1, r5
 8006438:	008b      	lsls	r3, r1, #2
 800643a:	4621      	mov	r1, r4
 800643c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006440:	4621      	mov	r1, r4
 8006442:	008a      	lsls	r2, r1, #2
 8006444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006448:	f7f9 febe 	bl	80001c8 <__aeabi_uldivmod>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4b60      	ldr	r3, [pc, #384]	; (80065d4 <UART_SetConfig+0x4e4>)
 8006452:	fba3 2302 	umull	r2, r3, r3, r2
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	011c      	lsls	r4, r3, #4
 800645a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645e:	2200      	movs	r2, #0
 8006460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006464:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	1891      	adds	r1, r2, r2
 8006472:	61b9      	str	r1, [r7, #24]
 8006474:	415b      	adcs	r3, r3
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800647c:	4641      	mov	r1, r8
 800647e:	1851      	adds	r1, r2, r1
 8006480:	6139      	str	r1, [r7, #16]
 8006482:	4649      	mov	r1, r9
 8006484:	414b      	adcs	r3, r1
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006494:	4659      	mov	r1, fp
 8006496:	00cb      	lsls	r3, r1, #3
 8006498:	4651      	mov	r1, sl
 800649a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800649e:	4651      	mov	r1, sl
 80064a0:	00ca      	lsls	r2, r1, #3
 80064a2:	4610      	mov	r0, r2
 80064a4:	4619      	mov	r1, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	4642      	mov	r2, r8
 80064aa:	189b      	adds	r3, r3, r2
 80064ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064b0:	464b      	mov	r3, r9
 80064b2:	460a      	mov	r2, r1
 80064b4:	eb42 0303 	adc.w	r3, r2, r3
 80064b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80064c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064d4:	4649      	mov	r1, r9
 80064d6:	008b      	lsls	r3, r1, #2
 80064d8:	4641      	mov	r1, r8
 80064da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064de:	4641      	mov	r1, r8
 80064e0:	008a      	lsls	r2, r1, #2
 80064e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064e6:	f7f9 fe6f 	bl	80001c8 <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4b39      	ldr	r3, [pc, #228]	; (80065d4 <UART_SetConfig+0x4e4>)
 80064f0:	fba3 1302 	umull	r1, r3, r3, r2
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	2164      	movs	r1, #100	; 0x64
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	3332      	adds	r3, #50	; 0x32
 8006502:	4a34      	ldr	r2, [pc, #208]	; (80065d4 <UART_SetConfig+0x4e4>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800650e:	441c      	add	r4, r3
 8006510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006514:	2200      	movs	r2, #0
 8006516:	673b      	str	r3, [r7, #112]	; 0x70
 8006518:	677a      	str	r2, [r7, #116]	; 0x74
 800651a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800651e:	4642      	mov	r2, r8
 8006520:	464b      	mov	r3, r9
 8006522:	1891      	adds	r1, r2, r2
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	415b      	adcs	r3, r3
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800652e:	4641      	mov	r1, r8
 8006530:	1851      	adds	r1, r2, r1
 8006532:	6039      	str	r1, [r7, #0]
 8006534:	4649      	mov	r1, r9
 8006536:	414b      	adcs	r3, r1
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006546:	4659      	mov	r1, fp
 8006548:	00cb      	lsls	r3, r1, #3
 800654a:	4651      	mov	r1, sl
 800654c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006550:	4651      	mov	r1, sl
 8006552:	00ca      	lsls	r2, r1, #3
 8006554:	4610      	mov	r0, r2
 8006556:	4619      	mov	r1, r3
 8006558:	4603      	mov	r3, r0
 800655a:	4642      	mov	r2, r8
 800655c:	189b      	adds	r3, r3, r2
 800655e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006560:	464b      	mov	r3, r9
 8006562:	460a      	mov	r2, r1
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	663b      	str	r3, [r7, #96]	; 0x60
 8006574:	667a      	str	r2, [r7, #100]	; 0x64
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006582:	4649      	mov	r1, r9
 8006584:	008b      	lsls	r3, r1, #2
 8006586:	4641      	mov	r1, r8
 8006588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800658c:	4641      	mov	r1, r8
 800658e:	008a      	lsls	r2, r1, #2
 8006590:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006594:	f7f9 fe18 	bl	80001c8 <__aeabi_uldivmod>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <UART_SetConfig+0x4e4>)
 800659e:	fba3 1302 	umull	r1, r3, r3, r2
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	2164      	movs	r1, #100	; 0x64
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	3332      	adds	r3, #50	; 0x32
 80065b0:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <UART_SetConfig+0x4e4>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4422      	add	r2, r4
 80065c4:	609a      	str	r2, [r3, #8]
}
 80065c6:	bf00      	nop
 80065c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065cc:	46bd      	mov	sp, r7
 80065ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d2:	bf00      	nop
 80065d4:	51eb851f 	.word	0x51eb851f

080065d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065d8:	b084      	sub	sp, #16
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	f107 001c 	add.w	r0, r7, #28
 80065e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d122      	bne.n	8006636 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661a:	2b01      	cmp	r3, #1
 800661c:	d105      	bne.n	800662a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9c0 	bl	80069b0 <USB_CoreReset>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
 8006634:	e01a      	b.n	800666c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f9b4 	bl	80069b0 <USB_CoreReset>
 8006648:	4603      	mov	r3, r0
 800664a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800664c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
 800665e:	e005      	b.n	800666c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10b      	bne.n	800668a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f043 0206 	orr.w	r2, r3, #6
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006696:	b004      	add	sp, #16
 8006698:	4770      	bx	lr

0800669a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f043 0201 	orr.w	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f023 0201 	bic.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d115      	bne.n	800672c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800670c:	2001      	movs	r0, #1
 800670e:	f7fa fd83 	bl	8001218 <HAL_Delay>
      ms++;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f93a 	bl	8006992 <USB_GetMode>
 800671e:	4603      	mov	r3, r0
 8006720:	2b01      	cmp	r3, #1
 8006722:	d01e      	beq.n	8006762 <USB_SetCurrentMode+0x84>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b31      	cmp	r3, #49	; 0x31
 8006728:	d9f0      	bls.n	800670c <USB_SetCurrentMode+0x2e>
 800672a:	e01a      	b.n	8006762 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d115      	bne.n	800675e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800673e:	2001      	movs	r0, #1
 8006740:	f7fa fd6a 	bl	8001218 <HAL_Delay>
      ms++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f921 	bl	8006992 <USB_GetMode>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <USB_SetCurrentMode+0x84>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b31      	cmp	r3, #49	; 0x31
 800675a:	d9f0      	bls.n	800673e <USB_SetCurrentMode+0x60>
 800675c:	e001      	b.n	8006762 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e005      	b.n	800676e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b32      	cmp	r3, #50	; 0x32
 8006766:	d101      	bne.n	800676c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a13      	ldr	r2, [pc, #76]	; (80067dc <USB_FlushTxFifo+0x64>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d901      	bls.n	8006798 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e01b      	b.n	80067d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	daf2      	bge.n	8006786 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	019b      	lsls	r3, r3, #6
 80067a8:	f043 0220 	orr.w	r2, r3, #32
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a08      	ldr	r2, [pc, #32]	; (80067dc <USB_FlushTxFifo+0x64>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e006      	b.n	80067d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d0f0      	beq.n	80067b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	00030d40 	.word	0x00030d40

080067e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4a11      	ldr	r2, [pc, #68]	; (800683c <USB_FlushRxFifo+0x5c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e018      	b.n	8006830 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	daf2      	bge.n	80067ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2210      	movs	r2, #16
 800680e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a08      	ldr	r2, [pc, #32]	; (800683c <USB_FlushRxFifo+0x5c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e006      	b.n	8006830 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b10      	cmp	r3, #16
 800682c:	d0f0      	beq.n	8006810 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	00030d40 	.word	0x00030d40

08006840 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006840:	b480      	push	{r7}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4611      	mov	r1, r2
 800684c:	461a      	mov	r2, r3
 800684e:	460b      	mov	r3, r1
 8006850:	71fb      	strb	r3, [r7, #7]
 8006852:	4613      	mov	r3, r2
 8006854:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800685e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d123      	bne.n	80068ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006866:	88bb      	ldrh	r3, [r7, #4]
 8006868:	3303      	adds	r3, #3
 800686a:	089b      	lsrs	r3, r3, #2
 800686c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800686e:	2300      	movs	r3, #0
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	e018      	b.n	80068a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	031a      	lsls	r2, r3, #12
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006880:	461a      	mov	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3301      	adds	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3301      	adds	r3, #1
 8006892:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	3301      	adds	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3301      	adds	r3, #1
 800689e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	3301      	adds	r3, #1
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d3e2      	bcc.n	8006874 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3724      	adds	r7, #36	; 0x24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068bc:	b480      	push	{r7}
 80068be:	b08b      	sub	sp, #44	; 0x2c
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	089b      	lsrs	r3, r3, #2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	e014      	b.n	8006912 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	3301      	adds	r3, #1
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	3301      	adds	r3, #1
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	3301      	adds	r3, #1
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	3301      	adds	r3, #1
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	3301      	adds	r3, #1
 8006910:	623b      	str	r3, [r7, #32]
 8006912:	6a3a      	ldr	r2, [r7, #32]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	429a      	cmp	r2, r3
 8006918:	d3e6      	bcc.n	80068e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800691a:	8bfb      	ldrh	r3, [r7, #30]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01e      	beq.n	800695e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692a:	461a      	mov	r2, r3
 800692c:	f107 0310 	add.w	r3, r7, #16
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
 8006940:	b2da      	uxtb	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	701a      	strb	r2, [r3, #0]
      i++;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	3301      	adds	r3, #1
 800694a:	623b      	str	r3, [r7, #32]
      pDest++;
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	3301      	adds	r3, #1
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006952:	8bfb      	ldrh	r3, [r7, #30]
 8006954:	3b01      	subs	r3, #1
 8006956:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006958:	8bfb      	ldrh	r3, [r7, #30]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1ea      	bne.n	8006934 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006960:	4618      	mov	r0, r3
 8006962:	372c      	adds	r7, #44	; 0x2c
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4013      	ands	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006984:	68fb      	ldr	r3, [r7, #12]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0301 	and.w	r3, r3, #1
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <USB_CoreReset+0x64>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d901      	bls.n	80069ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e01b      	b.n	8006a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	daf2      	bge.n	80069bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f043 0201 	orr.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <USB_CoreReset+0x64>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d901      	bls.n	80069f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e006      	b.n	8006a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d0f0      	beq.n	80069e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	00030d40 	.word	0x00030d40

08006a18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a18:	b084      	sub	sp, #16
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d018      	beq.n	8006aa0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10a      	bne.n	8006a8a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a82:	f043 0304 	orr.w	r3, r3, #4
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	e014      	b.n	8006ab4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a98:	f023 0304 	bic.w	r3, r3, #4
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	e009      	b.n	8006ab4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aae:	f023 0304 	bic.w	r3, r3, #4
 8006ab2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ab4:	2110      	movs	r1, #16
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fe5e 	bl	8006778 <USB_FlushTxFifo>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fe8a 	bl	80067e0 <USB_FlushRxFifo>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e015      	b.n	8006b08 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3301      	adds	r3, #1
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d3e5      	bcc.n	8006adc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b1c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <USB_HostInit+0x16c>)
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a13      	ldr	r2, [pc, #76]	; (8006b88 <USB_HostInit+0x170>)
 8006b3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006b40:	e009      	b.n	8006b56 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2280      	movs	r2, #128	; 0x80
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <USB_HostInit+0x174>)
 8006b4c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a0f      	ldr	r2, [pc, #60]	; (8006b90 <USB_HostInit+0x178>)
 8006b52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f043 0210 	orr.w	r2, r3, #16
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <USB_HostInit+0x17c>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b80:	b004      	add	sp, #16
 8006b82:	4770      	bx	lr
 8006b84:	01000200 	.word	0x01000200
 8006b88:	00e00300 	.word	0x00e00300
 8006b8c:	00600080 	.word	0x00600080
 8006b90:	004000e0 	.word	0x004000e0
 8006b94:	a3200008 	.word	0xa3200008

08006b98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d107      	bne.n	8006bea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006be0:	461a      	mov	r2, r3
 8006be2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006be6:	6053      	str	r3, [r2, #4]
 8006be8:	e009      	b.n	8006bfe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d106      	bne.n	8006bfe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006bfc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c3c:	2064      	movs	r0, #100	; 0x64
 8006c3e:	f7fa faeb 	bl	8001218 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c50:	200a      	movs	r0, #10
 8006c52:	f7fa fae1 	bl	8001218 <HAL_Delay>

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <USB_DriveVbus+0x44>
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d106      	bne.n	8006ca4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ca2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cae:	d109      	bne.n	8006cc4 <USB_DriveVbus+0x64>
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	0c5b      	lsrs	r3, r3, #17
 8006cf0:	f003 0303 	and.w	r3, r3, #3
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	b29b      	uxth	r3, r3
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
	...

08006d24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	4611      	mov	r1, r2
 8006d30:	461a      	mov	r2, r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	70fb      	strb	r3, [r7, #3]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70bb      	strb	r3, [r7, #2]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d52:	461a      	mov	r2, r3
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d87e      	bhi.n	8006e60 <USB_HC_Init+0x13c>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <USB_HC_Init+0x44>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d79 	.word	0x08006d79
 8006d6c:	08006e23 	.word	0x08006e23
 8006d70:	08006d79 	.word	0x08006d79
 8006d74:	08006de5 	.word	0x08006de5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	461a      	mov	r2, r3
 8006d86:	f240 439d 	movw	r3, #1181	; 0x49d
 8006d8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	da10      	bge.n	8006db6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006db4:	e057      	b.n	8006e66 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d051      	beq.n	8006e66 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	78fa      	ldrb	r2, [r7, #3]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ddc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006de0:	60d3      	str	r3, [r2, #12]
      break;
 8006de2:	e040      	b.n	8006e66 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df0:	461a      	mov	r2, r3
 8006df2:	f240 639d 	movw	r3, #1693	; 0x69d
 8006df6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006df8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da34      	bge.n	8006e6a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e20:	e023      	b.n	8006e6a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f240 2325 	movw	r3, #549	; 0x225
 8006e34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	da17      	bge.n	8006e6e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e58:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006e5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e5e:	e006      	b.n	8006e6e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	77fb      	strb	r3, [r7, #31]
      break;
 8006e64:	e004      	b.n	8006e70 <USB_HC_Init+0x14c>
      break;
 8006e66:	bf00      	nop
 8006e68:	e002      	b.n	8006e70 <USB_HC_Init+0x14c>
      break;
 8006e6a:	bf00      	nop
 8006e6c:	e000      	b.n	8006e70 <USB_HC_Init+0x14c>
      break;
 8006e6e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	78fa      	ldrb	r2, [r7, #3]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8a:	f043 0302 	orr.w	r3, r3, #2
 8006e8e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea4:	6939      	ldr	r1, [r7, #16]
 8006ea6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006eba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da03      	bge.n	8006eca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	e001      	b.n	8006ece <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff feff 	bl	8006cd2 <USB_GetHostSpeed>
 8006ed4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d106      	bne.n	8006eec <USB_HC_Init+0x1c8>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d003      	beq.n	8006eec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ee8:	617b      	str	r3, [r7, #20]
 8006eea:	e001      	b.n	8006ef0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ef0:	787b      	ldrb	r3, [r7, #1]
 8006ef2:	059b      	lsls	r3, r3, #22
 8006ef4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ef8:	78bb      	ldrb	r3, [r7, #2]
 8006efa:	02db      	lsls	r3, r3, #11
 8006efc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f00:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f06:	049b      	lsls	r3, r3, #18
 8006f08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	0159      	lsls	r1, r3, #5
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	440b      	add	r3, r1
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f26:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f2c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d003      	beq.n	8006f3e <USB_HC_Init+0x21a>
 8006f36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10f      	bne.n	8006f5e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	78fa      	ldrb	r2, [r7, #3]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08c      	sub	sp, #48	; 0x30
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d02d      	beq.n	8006fee <USB_HC_StartXfer+0x86>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	791b      	ldrb	r3, [r3, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d129      	bne.n	8006fee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d117      	bne.n	8006fd0 <USB_HC_StartXfer+0x68>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	79db      	ldrb	r3, [r3, #7]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <USB_HC_StartXfer+0x48>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	79db      	ldrb	r3, [r3, #7]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d10f      	bne.n	8006fd0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <USB_HC_StartXfer+0x86>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	795b      	ldrb	r3, [r3, #5]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fa0f 	bl	8007408 <USB_DoPing>
      return HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	e0f8      	b.n	80071e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d018      	beq.n	8007028 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	8912      	ldrh	r2, [r2, #8]
 8006ffe:	4413      	add	r3, r2
 8007000:	3b01      	subs	r3, #1
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	8912      	ldrh	r2, [r2, #8]
 8007006:	fbb3 f3f2 	udiv	r3, r3, r2
 800700a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800700c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800700e:	8b7b      	ldrh	r3, [r7, #26]
 8007010:	429a      	cmp	r2, r3
 8007012:	d90b      	bls.n	800702c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007014:	8b7b      	ldrh	r3, [r7, #26]
 8007016:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	8912      	ldrh	r2, [r2, #8]
 800701e:	fb03 f202 	mul.w	r2, r3, r2
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	611a      	str	r2, [r3, #16]
 8007026:	e001      	b.n	800702c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007028:	2301      	movs	r3, #1
 800702a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	78db      	ldrb	r3, [r3, #3]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	8912      	ldrh	r2, [r2, #8]
 800703a:	fb03 f202 	mul.w	r2, r3, r2
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	611a      	str	r2, [r3, #16]
 8007042:	e003      	b.n	800704c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007056:	04d9      	lsls	r1, r3, #19
 8007058:	4b63      	ldr	r3, [pc, #396]	; (80071e8 <USB_HC_StartXfer+0x280>)
 800705a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800705c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	7a9b      	ldrb	r3, [r3, #10]
 8007062:	075b      	lsls	r3, r3, #29
 8007064:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007068:	69f9      	ldr	r1, [r7, #28]
 800706a:	0148      	lsls	r0, r1, #5
 800706c:	6a39      	ldr	r1, [r7, #32]
 800706e:	4401      	add	r1, r0
 8007070:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007074:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007076:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	68d9      	ldr	r1, [r3, #12]
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	460a      	mov	r2, r1
 8007090:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	6a3a      	ldr	r2, [r7, #32]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	7e7b      	ldrb	r3, [r7, #25]
 80070da:	075b      	lsls	r3, r3, #29
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	0148      	lsls	r0, r1, #5
 80070e0:	6a39      	ldr	r1, [r7, #32]
 80070e2:	4401      	add	r1, r0
 80070e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80070e8:	4313      	orrs	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007102:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	78db      	ldrb	r3, [r3, #3]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d004      	beq.n	8007116 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	e003      	b.n	800711e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800711c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007124:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	4413      	add	r3, r2
 800712e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007132:	461a      	mov	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	e04e      	b.n	80071e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	78db      	ldrb	r3, [r3, #3]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d149      	bne.n	80071de <USB_HC_StartXfer+0x276>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d045      	beq.n	80071de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	79db      	ldrb	r3, [r3, #7]
 8007156:	2b03      	cmp	r3, #3
 8007158:	d830      	bhi.n	80071bc <USB_HC_StartXfer+0x254>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <USB_HC_StartXfer+0x1f8>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007171 	.word	0x08007171
 8007164:	08007195 	.word	0x08007195
 8007168:	08007171 	.word	0x08007171
 800716c:	08007195 	.word	0x08007195
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	3303      	adds	r3, #3
 8007176:	089b      	lsrs	r3, r3, #2
 8007178:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800717a:	8afa      	ldrh	r2, [r7, #22]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	b29b      	uxth	r3, r3
 8007182:	429a      	cmp	r2, r3
 8007184:	d91c      	bls.n	80071c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f043 0220 	orr.w	r2, r3, #32
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	619a      	str	r2, [r3, #24]
        }
        break;
 8007192:	e015      	b.n	80071c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	3303      	adds	r3, #3
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800719e:	8afa      	ldrh	r2, [r7, #22]
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d90a      	bls.n	80071c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80071ba:	e003      	b.n	80071c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80071bc:	bf00      	nop
 80071be:	e002      	b.n	80071c6 <USB_HC_StartXfer+0x25e>
        break;
 80071c0:	bf00      	nop
 80071c2:	e000      	b.n	80071c6 <USB_HC_StartXfer+0x25e>
        break;
 80071c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68d9      	ldr	r1, [r3, #12]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	785a      	ldrb	r2, [r3, #1]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2000      	movs	r0, #0
 80071d6:	9000      	str	r0, [sp, #0]
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fb31 	bl	8006840 <USB_WritePacket>
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3728      	adds	r7, #40	; 0x28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	1ff80000 	.word	0x1ff80000

080071ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	b29b      	uxth	r3, r3
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800720e:	b480      	push	{r7}
 8007210:	b089      	sub	sp, #36	; 0x24
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	0c9b      	lsrs	r3, r3, #18
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	0fdb      	lsrs	r3, r3, #31
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d104      	bne.n	8007268 <USB_HC_Halt+0x5a>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	e0c8      	b.n	80073fa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <USB_HC_Halt+0x66>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d163      	bne.n	800733c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4413      	add	r3, r2
 800727c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	440a      	add	r2, r1
 800728a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800728e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007292:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	f040 80ab 	bne.w	80073f8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d133      	bne.n	8007316 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3301      	adds	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072fa:	d81d      	bhi.n	8007338 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800730e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007312:	d0ec      	beq.n	80072ee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007314:	e070      	b.n	80073f8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	440a      	add	r2, r1
 800732c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007334:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007336:	e05f      	b.n	80073f8 <USB_HC_Halt+0x1ea>
            break;
 8007338:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800733a:	e05d      	b.n	80073f8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	440a      	add	r2, r1
 8007352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800735a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d133      	bne.n	80073d4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	440a      	add	r2, r1
 8007382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800738a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073b8:	d81d      	bhi.n	80073f6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d0:	d0ec      	beq.n	80073ac <USB_HC_Halt+0x19e>
 80073d2:	e011      	b.n	80073f8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	e000      	b.n	80073f8 <USB_HC_Halt+0x1ea>
          break;
 80073f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3724      	adds	r7, #36	; 0x24
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800741c:	2301      	movs	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	04da      	lsls	r2, r3, #19
 8007424:	4b15      	ldr	r3, [pc, #84]	; (800747c <USB_DoPing+0x74>)
 8007426:	4013      	ands	r3, r2
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	440a      	add	r2, r1
 8007430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007438:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	4413      	add	r3, r2
 8007442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007450:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007458:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	461a      	mov	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	1ff80000 	.word	0x1ff80000

08007480 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff f911 	bl	80066bc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800749a:	2110      	movs	r1, #16
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff f96b 	bl	8006778 <USB_FlushTxFifo>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff f997 	bl	80067e0 <USB_FlushRxFifo>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	e01f      	b.n	8007502 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f6:	461a      	mov	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	3301      	adds	r3, #1
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b0f      	cmp	r3, #15
 8007506:	d9dc      	bls.n	80074c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007508:	2300      	movs	r3, #0
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	e034      	b.n	8007578 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007524:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800752c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007534:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007542:	461a      	mov	r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007554:	d80c      	bhi.n	8007570 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4413      	add	r3, r2
 800755e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800756c:	d0ec      	beq.n	8007548 <USB_StopHost+0xc8>
 800756e:	e000      	b.n	8007572 <USB_StopHost+0xf2>
        break;
 8007570:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	3301      	adds	r3, #1
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b0f      	cmp	r3, #15
 800757c:	d9c7      	bls.n	800750e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007584:	461a      	mov	r2, r3
 8007586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800758a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007592:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff f880 	bl	800669a <USB_EnableGlobalInt>

  return ret;
 800759a:	7ffb      	ldrb	r3, [r7, #31]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80075a4:	b590      	push	{r4, r7, lr}
 80075a6:	b089      	sub	sp, #36	; 0x24
 80075a8:	af04      	add	r7, sp, #16
 80075aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80075ac:	2301      	movs	r3, #1
 80075ae:	2202      	movs	r2, #2
 80075b0:	2102      	movs	r1, #2
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc66 	bl	8007e84 <USBH_FindInterface>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2bff      	cmp	r3, #255	; 0xff
 80075c0:	d002      	beq.n	80075c8 <USBH_CDC_InterfaceInit+0x24>
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d901      	bls.n	80075cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075c8:	2302      	movs	r3, #2
 80075ca:	e13d      	b.n	8007848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fc3b 	bl	8007e4c <USBH_SelectInterface>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80075e0:	2302      	movs	r3, #2
 80075e2:	e131      	b.n	8007848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80075ea:	2050      	movs	r0, #80	; 0x50
 80075ec:	f002 fafa 	bl	8009be4 <malloc>
 80075f0:	4603      	mov	r3, r0
 80075f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007604:	2302      	movs	r3, #2
 8007606:	e11f      	b.n	8007848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007608:	2250      	movs	r2, #80	; 0x50
 800760a:	2100      	movs	r1, #0
 800760c:	68b8      	ldr	r0, [r7, #8]
 800760e:	f002 faf9 	bl	8009c04 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	211a      	movs	r1, #26
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	b25b      	sxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	da15      	bge.n	8007656 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	211a      	movs	r1, #26
 8007630:	fb01 f303 	mul.w	r3, r1, r3
 8007634:	4413      	add	r3, r2
 8007636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	211a      	movs	r1, #26
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	4413      	add	r3, r2
 800764c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007650:	881a      	ldrh	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 ff2c 	bl	80094ba <USBH_AllocPipe>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	7819      	ldrb	r1, [r3, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	7858      	ldrb	r0, [r3, #1]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	8952      	ldrh	r2, [r2, #10]
 8007682:	9202      	str	r2, [sp, #8]
 8007684:	2203      	movs	r2, #3
 8007686:	9201      	str	r2, [sp, #4]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	4623      	mov	r3, r4
 800768c:	4602      	mov	r2, r0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fee4 	bl	800945c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2200      	movs	r2, #0
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f002 f9f3 	bl	8009a88 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80076a2:	2300      	movs	r3, #0
 80076a4:	2200      	movs	r2, #0
 80076a6:	210a      	movs	r1, #10
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fbeb 	bl	8007e84 <USBH_FindInterface>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2bff      	cmp	r3, #255	; 0xff
 80076b6:	d002      	beq.n	80076be <USBH_CDC_InterfaceInit+0x11a>
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d901      	bls.n	80076c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80076be:	2302      	movs	r3, #2
 80076c0:	e0c2      	b.n	8007848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	211a      	movs	r1, #26
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b25b      	sxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da16      	bge.n	8007708 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	211a      	movs	r1, #26
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	4413      	add	r3, r2
 80076e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	211a      	movs	r1, #26
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007700:	881a      	ldrh	r2, [r3, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	835a      	strh	r2, [r3, #26]
 8007706:	e015      	b.n	8007734 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	211a      	movs	r1, #26
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	4413      	add	r3, r2
 8007714:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	211a      	movs	r1, #26
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	4413      	add	r3, r2
 800772a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800772e:	881a      	ldrh	r2, [r3, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	211a      	movs	r1, #26
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	4413      	add	r3, r2
 8007740:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b25b      	sxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	da16      	bge.n	800777a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	211a      	movs	r1, #26
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	4413      	add	r3, r2
 8007758:	f203 3356 	addw	r3, r3, #854	; 0x356
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	211a      	movs	r1, #26
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007772:	881a      	ldrh	r2, [r3, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	835a      	strh	r2, [r3, #26]
 8007778:	e015      	b.n	80077a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	211a      	movs	r1, #26
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	f203 3356 	addw	r3, r3, #854	; 0x356
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	211a      	movs	r1, #26
 8007796:	fb01 f303 	mul.w	r3, r1, r3
 800779a:	4413      	add	r3, r2
 800779c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	7b9b      	ldrb	r3, [r3, #14]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 fe84 	bl	80094ba <USBH_AllocPipe>
 80077b2:	4603      	mov	r3, r0
 80077b4:	461a      	mov	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	7bdb      	ldrb	r3, [r3, #15]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 fe7a 	bl	80094ba <USBH_AllocPipe>
 80077c6:	4603      	mov	r3, r0
 80077c8:	461a      	mov	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	7b59      	ldrb	r1, [r3, #13]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	7b98      	ldrb	r0, [r3, #14]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	8b12      	ldrh	r2, [r2, #24]
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	2202      	movs	r2, #2
 80077ea:	9201      	str	r2, [sp, #4]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	4623      	mov	r3, r4
 80077f0:	4602      	mov	r2, r0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fe32 	bl	800945c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	7b19      	ldrb	r1, [r3, #12]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	7bd8      	ldrb	r0, [r3, #15]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	8b52      	ldrh	r2, [r2, #26]
 8007810:	9202      	str	r2, [sp, #8]
 8007812:	2202      	movs	r2, #2
 8007814:	9201      	str	r2, [sp, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	4623      	mov	r3, r4
 800781a:	4602      	mov	r2, r0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fe1d 	bl	800945c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	7b5b      	ldrb	r3, [r3, #13]
 800782e:	2200      	movs	r2, #0
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f002 f928 	bl	8009a88 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	7b1b      	ldrb	r3, [r3, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 f921 	bl	8009a88 <USBH_LL_SetToggle>

  return USBH_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	bd90      	pop	{r4, r7, pc}

08007850 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00e      	beq.n	8007888 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 fe12 	bl	800949a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fe3d 	bl	80094fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	7b1b      	ldrb	r3, [r3, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00e      	beq.n	80078ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	7b1b      	ldrb	r3, [r3, #12]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 fdff 	bl	800949a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	7b1b      	ldrb	r3, [r3, #12]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 fe2a 	bl	80094fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	7b5b      	ldrb	r3, [r3, #13]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00e      	beq.n	80078d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	7b5b      	ldrb	r3, [r3, #13]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fdec 	bl	800949a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	7b5b      	ldrb	r3, [r3, #13]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fe17 	bl	80094fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f002 f983 	bl	8009bf4 <free>
    phost->pActiveClass->pData = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f4:	2200      	movs	r2, #0
 80078f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3340      	adds	r3, #64	; 0x40
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f8b1 	bl	8007a82 <GetLineCoding>
 8007920:	4603      	mov	r3, r0
 8007922:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007930:	2102      	movs	r1, #2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007936:	7afb      	ldrb	r3, [r7, #11]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007960:	2b04      	cmp	r3, #4
 8007962:	d877      	bhi.n	8007a54 <USBH_CDC_Process+0x114>
 8007964:	a201      	add	r2, pc, #4	; (adr r2, 800796c <USBH_CDC_Process+0x2c>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	08007981 	.word	0x08007981
 8007970:	08007987 	.word	0x08007987
 8007974:	080079b7 	.word	0x080079b7
 8007978:	08007a2b 	.word	0x08007a2b
 800797c:	08007a39 	.word	0x08007a39
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]
      break;
 8007984:	e06d      	b.n	8007a62 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f897 	bl	8007ac0 <SetLineCoding>
 8007992:	4603      	mov	r3, r0
 8007994:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80079a4:	e058      	b.n	8007a58 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d055      	beq.n	8007a58 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2204      	movs	r2, #4
 80079b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80079b4:	e050      	b.n	8007a58 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	3340      	adds	r3, #64	; 0x40
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f860 	bl	8007a82 <GetLineCoding>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d126      	bne.n	8007a1a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d13b      	bne.n	8007a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d133      	bne.n	8007a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d12b      	bne.n	8007a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d124      	bne.n	8007a5c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f958 	bl	8007cc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a18:	e020      	b.n	8007a5c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d01d      	beq.n	8007a5c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2204      	movs	r2, #4
 8007a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a28:	e018      	b.n	8007a5c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f867 	bl	8007afe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f8da 	bl	8007bea <CDC_ProcessReception>
      break;
 8007a36:	e014      	b.n	8007a62 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 ffef 	bl	8008a1e <USBH_ClrFeature>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007a52:	e005      	b.n	8007a60 <USBH_CDC_Process+0x120>

    default:
      break;
 8007a54:	bf00      	nop
 8007a56:	e004      	b.n	8007a62 <USBH_CDC_Process+0x122>
      break;
 8007a58:	bf00      	nop
 8007a5a:	e002      	b.n	8007a62 <USBH_CDC_Process+0x122>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e000      	b.n	8007a62 <USBH_CDC_Process+0x122>
      break;
 8007a60:	bf00      	nop

  }

  return status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	22a1      	movs	r2, #161	; 0xa1
 8007a90:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2221      	movs	r2, #33	; 0x21
 8007a96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2207      	movs	r2, #7
 8007aa8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2207      	movs	r2, #7
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fa81 	bl	8008fb8 <USBH_CtlReq>
 8007ab6:	4603      	mov	r3, r0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2221      	movs	r2, #33	; 0x21
 8007ace:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2207      	movs	r2, #7
 8007ae6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2207      	movs	r2, #7
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fa62 	bl	8008fb8 <USBH_CtlReq>
 8007af4:	4603      	mov	r3, r0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af02      	add	r7, sp, #8
 8007b04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d002      	beq.n	8007b24 <CDC_ProcessTransmission+0x26>
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d023      	beq.n	8007b6a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007b22:	e05e      	b.n	8007be2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	8b12      	ldrh	r2, [r2, #24]
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d90b      	bls.n	8007b48 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	69d9      	ldr	r1, [r3, #28]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8b1a      	ldrh	r2, [r3, #24]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	7b5b      	ldrb	r3, [r3, #13]
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	9000      	str	r0, [sp, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fc48 	bl	80093d6 <USBH_BulkSendData>
 8007b46:	e00b      	b.n	8007b60 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	7b5b      	ldrb	r3, [r3, #13]
 8007b56:	2001      	movs	r0, #1
 8007b58:	9000      	str	r0, [sp, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fc3b 	bl	80093d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b68:	e03b      	b.n	8007be2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	7b5b      	ldrb	r3, [r3, #13]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 ff5f 	bl	8009a34 <USBH_LL_GetURBState>
 8007b76:	4603      	mov	r3, r0
 8007b78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d128      	bne.n	8007bd2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	8b12      	ldrh	r2, [r2, #24]
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d90e      	bls.n	8007baa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	8b12      	ldrh	r2, [r2, #24]
 8007b94:	1a9a      	subs	r2, r3, r2
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	8b12      	ldrh	r2, [r2, #24]
 8007ba2:	441a      	add	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	61da      	str	r2, [r3, #28]
 8007ba8:	e002      	b.n	8007bb0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007bc0:	e00e      	b.n	8007be0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f868 	bl	8007ca0 <USBH_CDC_TransmitCallback>
      break;
 8007bd0:	e006      	b.n	8007be0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d103      	bne.n	8007be0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007be0:	bf00      	nop
  }
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d002      	beq.n	8007c10 <CDC_ProcessReception+0x26>
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d00e      	beq.n	8007c2c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007c0e:	e043      	b.n	8007c98 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	6a19      	ldr	r1, [r3, #32]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	8b5a      	ldrh	r2, [r3, #26]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	7b1b      	ldrb	r3, [r3, #12]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fbff 	bl	8009420 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2204      	movs	r2, #4
 8007c26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c2a:	e035      	b.n	8007c98 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	7b1b      	ldrb	r3, [r3, #12]
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fefe 	bl	8009a34 <USBH_LL_GetURBState>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007c3c:	7cfb      	ldrb	r3, [r7, #19]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d129      	bne.n	8007c96 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	7b1b      	ldrb	r3, [r3, #12]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 fe61 	bl	8009910 <USBH_LL_GetLastXferSize>
 8007c4e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d016      	beq.n	8007c88 <CDC_ProcessReception+0x9e>
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	8b5b      	ldrh	r3, [r3, #26]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d910      	bls.n	8007c88 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	1ad2      	subs	r2, r2, r3
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	441a      	add	r2, r3
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2203      	movs	r2, #3
 8007c82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c86:	e006      	b.n	8007c96 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f80f 	bl	8007cb4 <USBH_CDC_ReceiveCallback>
      break;
 8007c96:	bf00      	nop
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e029      	b.n	8007d48 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	79fa      	ldrb	r2, [r7, #7]
 8007cf8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f81f 	bl	8007d50 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f001 fd31 	bl	80097a8 <USBH_LL_Init>

  return USBH_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e009      	b.n	8007d76 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	33e0      	adds	r3, #224	; 0xe0
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b0f      	cmp	r3, #15
 8007d7a:	d9f2      	bls.n	8007d62 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e009      	b.n	8007d96 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9c:	d3f1      	bcc.n	8007d82 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2240      	movs	r2, #64	; 0x40
 8007dc2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d016      	beq.n	8007e3a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10e      	bne.n	8007e34 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	33de      	adds	r3, #222	; 0xde
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e004      	b.n	8007e3e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007e34:	2302      	movs	r3, #2
 8007e36:	73fb      	strb	r3, [r7, #15]
 8007e38:	e001      	b.n	8007e3e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d204      	bcs.n	8007e72 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	78fa      	ldrb	r2, [r7, #3]
 8007e6c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007e70:	e001      	b.n	8007e76 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007e72:	2302      	movs	r3, #2
 8007e74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	70fb      	strb	r3, [r7, #3]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70bb      	strb	r3, [r7, #2]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007eac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007eae:	e025      	b.n	8007efc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	221a      	movs	r2, #26
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
 8007eb8:	3308      	adds	r3, #8
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	795b      	ldrb	r3, [r3, #5]
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d002      	beq.n	8007ed2 <USBH_FindInterface+0x4e>
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	2bff      	cmp	r3, #255	; 0xff
 8007ed0:	d111      	bne.n	8007ef6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ed6:	78ba      	ldrb	r2, [r7, #2]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d002      	beq.n	8007ee2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007edc:	78bb      	ldrb	r3, [r7, #2]
 8007ede:	2bff      	cmp	r3, #255	; 0xff
 8007ee0:	d109      	bne.n	8007ef6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ee6:	787a      	ldrb	r2, [r7, #1]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d002      	beq.n	8007ef2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007eec:	787b      	ldrb	r3, [r7, #1]
 8007eee:	2bff      	cmp	r3, #255	; 0xff
 8007ef0:	d101      	bne.n	8007ef6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	e006      	b.n	8007f04 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d9d6      	bls.n	8007eb0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007f02:	23ff      	movs	r3, #255	; 0xff
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fc81 	bl	8009820 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007f1e:	2101      	movs	r1, #1
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fd9a 	bl	8009a5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af04      	add	r7, sp, #16
 8007f36:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d102      	bne.n	8007f52 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b0b      	cmp	r3, #11
 8007f5a:	f200 81be 	bhi.w	80082da <USBH_Process+0x3aa>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <USBH_Process+0x34>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f95 	.word	0x08007f95
 8007f68:	08007fc7 	.word	0x08007fc7
 8007f6c:	0800802f 	.word	0x0800802f
 8007f70:	08008275 	.word	0x08008275
 8007f74:	080082db 	.word	0x080082db
 8007f78:	080080d3 	.word	0x080080d3
 8007f7c:	0800821b 	.word	0x0800821b
 8007f80:	08008109 	.word	0x08008109
 8007f84:	08008129 	.word	0x08008129
 8007f88:	08008149 	.word	0x08008149
 8007f8c:	0800818d 	.word	0x0800818d
 8007f90:	0800825d 	.word	0x0800825d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 819e 	beq.w	80082de <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007fa8:	20c8      	movs	r0, #200	; 0xc8
 8007faa:	f001 fd9d 	bl	8009ae8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fc93 	bl	80098da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007fc4:	e18b      	b.n	80082de <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d107      	bne.n	8007fe0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fde:	e18d      	b.n	80082fc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fea:	d914      	bls.n	8008016 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008002:	2b03      	cmp	r3, #3
 8008004:	d903      	bls.n	800800e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	220d      	movs	r2, #13
 800800a:	701a      	strb	r2, [r3, #0]
      break;
 800800c:	e176      	b.n	80082fc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
      break;
 8008014:	e172      	b.n	80082fc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800801c:	f103 020a 	add.w	r2, r3, #10
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008026:	200a      	movs	r0, #10
 8008028:	f001 fd5e 	bl	8009ae8 <USBH_Delay>
      break;
 800802c:	e166      	b.n	80082fc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800803e:	2104      	movs	r1, #4
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008044:	2064      	movs	r0, #100	; 0x64
 8008046:	f001 fd4f 	bl	8009ae8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fc1e 	bl	800988c <USBH_LL_GetSpeed>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2205      	movs	r2, #5
 800805e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008060:	2100      	movs	r1, #0
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fa29 	bl	80094ba <USBH_AllocPipe>
 8008068:	4603      	mov	r3, r0
 800806a:	461a      	mov	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008070:	2180      	movs	r1, #128	; 0x80
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fa21 	bl	80094ba <USBH_AllocPipe>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7919      	ldrb	r1, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008094:	b292      	uxth	r2, r2
 8008096:	9202      	str	r2, [sp, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	9201      	str	r2, [sp, #4]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	4603      	mov	r3, r0
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 f9da 	bl	800945c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7959      	ldrb	r1, [r3, #5]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080bc:	b292      	uxth	r2, r2
 80080be:	9202      	str	r2, [sp, #8]
 80080c0:	2200      	movs	r2, #0
 80080c2:	9201      	str	r2, [sp, #4]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4603      	mov	r3, r0
 80080c8:	2200      	movs	r2, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 f9c6 	bl	800945c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080d0:	e114      	b.n	80082fc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f918 	bl	8008308 <USBH_HandleEnum>
 80080d8:	4603      	mov	r3, r0
 80080da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 80fe 	bne.w	80082e2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d103      	bne.n	8008100 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2208      	movs	r2, #8
 80080fc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080fe:	e0f0      	b.n	80082e2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2207      	movs	r2, #7
 8008104:	701a      	strb	r2, [r3, #0]
      break;
 8008106:	e0ec      	b.n	80082e2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80e9 	beq.w	80082e6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800811a:	2101      	movs	r1, #1
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2208      	movs	r2, #8
 8008124:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008126:	e0de      	b.n	80082e6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800812e:	b29b      	uxth	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fc2c 	bl	8008990 <USBH_SetCfg>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 80d5 	bne.w	80082ea <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2209      	movs	r2, #9
 8008144:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008146:	e0d0      	b.n	80082ea <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d016      	beq.n	8008184 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008156:	2101      	movs	r1, #1
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fc3c 	bl	80089d6 <USBH_SetFeature>
 800815e:	4603      	mov	r3, r0
 8008160:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	220a      	movs	r2, #10
 800816e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008170:	e0bd      	b.n	80082ee <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b03      	cmp	r3, #3
 8008178:	f040 80b9 	bne.w	80082ee <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	220a      	movs	r2, #10
 8008180:	701a      	strb	r2, [r3, #0]
      break;
 8008182:	e0b4      	b.n	80082ee <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	220a      	movs	r2, #10
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e0b0      	b.n	80082ee <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80ad 	beq.w	80082f2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
 80081a4:	e016      	b.n	80081d4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80081a6:	7bfa      	ldrb	r2, [r7, #15]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	32de      	adds	r2, #222	; 0xde
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	791a      	ldrb	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d108      	bne.n	80081ce <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80081bc:	7bfa      	ldrb	r2, [r7, #15]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	32de      	adds	r2, #222	; 0xde
 80081c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80081cc:	e005      	b.n	80081da <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	3301      	adds	r3, #1
 80081d2:	73fb      	strb	r3, [r7, #15]
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0e5      	beq.n	80081a6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d016      	beq.n	8008212 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	4798      	blx	r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2206      	movs	r2, #6
 80081fa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008202:	2103      	movs	r1, #3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008208:	e073      	b.n	80082f2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	220d      	movs	r2, #13
 800820e:	701a      	strb	r2, [r3, #0]
      break;
 8008210:	e06f      	b.n	80082f2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220d      	movs	r2, #13
 8008216:	701a      	strb	r2, [r3, #0]
      break;
 8008218:	e06b      	b.n	80082f2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d017      	beq.n	8008254 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	4798      	blx	r3
 8008230:	4603      	mov	r3, r0
 8008232:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	220b      	movs	r2, #11
 8008240:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008242:	e058      	b.n	80082f6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d154      	bne.n	80082f6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	220d      	movs	r2, #13
 8008250:	701a      	strb	r2, [r3, #0]
      break;
 8008252:	e050      	b.n	80082f6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	220d      	movs	r2, #13
 8008258:	701a      	strb	r2, [r3, #0]
      break;
 800825a:	e04c      	b.n	80082f6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d049      	beq.n	80082fa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
      }
      break;
 8008272:	e042      	b.n	80082fa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff fd67 	bl	8007d50 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d005      	beq.n	80082b6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082b0:	2105      	movs	r1, #5
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d107      	bne.n	80082d2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff fe20 	bl	8007f10 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082d0:	e014      	b.n	80082fc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 faa4 	bl	8009820 <USBH_LL_Start>
      break;
 80082d8:	e010      	b.n	80082fc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80082da:	bf00      	nop
 80082dc:	e00e      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082de:	bf00      	nop
 80082e0:	e00c      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082e2:	bf00      	nop
 80082e4:	e00a      	b.n	80082fc <USBH_Process+0x3cc>
    break;
 80082e6:	bf00      	nop
 80082e8:	e008      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082ea:	bf00      	nop
 80082ec:	e006      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082ee:	bf00      	nop
 80082f0:	e004      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082f2:	bf00      	nop
 80082f4:	e002      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082fa:	bf00      	nop
  }
  return USBH_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop

08008308 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008314:	2301      	movs	r3, #1
 8008316:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	2b07      	cmp	r3, #7
 800831e:	f200 81c1 	bhi.w	80086a4 <USBH_HandleEnum+0x39c>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <USBH_HandleEnum+0x20>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008349 	.word	0x08008349
 800832c:	08008407 	.word	0x08008407
 8008330:	08008471 	.word	0x08008471
 8008334:	080084ff 	.word	0x080084ff
 8008338:	08008569 	.word	0x08008569
 800833c:	080085d9 	.word	0x080085d9
 8008340:	0800861f 	.word	0x0800861f
 8008344:	08008665 	.word	0x08008665
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008348:	2108      	movs	r1, #8
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa50 	bl	80087f0 <USBH_Get_DevDesc>
 8008350:	4603      	mov	r3, r0
 8008352:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d130      	bne.n	80083bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	7919      	ldrb	r1, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800837e:	b292      	uxth	r2, r2
 8008380:	9202      	str	r2, [sp, #8]
 8008382:	2200      	movs	r2, #0
 8008384:	9201      	str	r2, [sp, #4]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4603      	mov	r3, r0
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 f865 	bl	800945c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	7959      	ldrb	r1, [r3, #5]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083a6:	b292      	uxth	r2, r2
 80083a8:	9202      	str	r2, [sp, #8]
 80083aa:	2200      	movs	r2, #0
 80083ac:	9201      	str	r2, [sp, #4]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4603      	mov	r3, r0
 80083b2:	2200      	movs	r2, #0
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 f851 	bl	800945c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083ba:	e175      	b.n	80086a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	f040 8172 	bne.w	80086a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ca:	3301      	adds	r3, #1
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d903      	bls.n	80083e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	220d      	movs	r2, #13
 80083e2:	701a      	strb	r2, [r3, #0]
      break;
 80083e4:	e160      	b.n	80086a8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	795b      	ldrb	r3, [r3, #5]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f885 	bl	80094fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 f87f 	bl	80094fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
      break;
 8008404:	e150      	b.n	80086a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008406:	2112      	movs	r1, #18
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f9f1 	bl	80087f0 <USBH_Get_DevDesc>
 800840e:	4603      	mov	r3, r0
 8008410:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800841e:	e145      	b.n	80086ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b03      	cmp	r3, #3
 8008424:	f040 8142 	bne.w	80086ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800842e:	3301      	adds	r3, #1
 8008430:	b2da      	uxtb	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800843e:	2b03      	cmp	r3, #3
 8008440:	d903      	bls.n	800844a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220d      	movs	r2, #13
 8008446:	701a      	strb	r2, [r3, #0]
      break;
 8008448:	e130      	b.n	80086ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	795b      	ldrb	r3, [r3, #5]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f853 	bl	80094fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	791b      	ldrb	r3, [r3, #4]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 f84d 	bl	80094fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
      break;
 800846e:	e11d      	b.n	80086ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008470:	2101      	movs	r1, #1
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa68 	bl	8008948 <USBH_SetAddress>
 8008478:	4603      	mov	r3, r0
 800847a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d132      	bne.n	80084e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008482:	2002      	movs	r0, #2
 8008484:	f001 fb30 	bl	8009ae8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2203      	movs	r2, #3
 8008494:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7919      	ldrb	r1, [r3, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80084aa:	b292      	uxth	r2, r2
 80084ac:	9202      	str	r2, [sp, #8]
 80084ae:	2200      	movs	r2, #0
 80084b0:	9201      	str	r2, [sp, #4]
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4603      	mov	r3, r0
 80084b6:	2280      	movs	r2, #128	; 0x80
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 ffcf 	bl	800945c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	7959      	ldrb	r1, [r3, #5]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084d2:	b292      	uxth	r2, r2
 80084d4:	9202      	str	r2, [sp, #8]
 80084d6:	2200      	movs	r2, #0
 80084d8:	9201      	str	r2, [sp, #4]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4603      	mov	r3, r0
 80084de:	2200      	movs	r2, #0
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 ffbb 	bl	800945c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80084e6:	e0e3      	b.n	80086b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	f040 80e0 	bne.w	80086b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	220d      	movs	r2, #13
 80084f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	705a      	strb	r2, [r3, #1]
      break;
 80084fc:	e0d8      	b.n	80086b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80084fe:	2109      	movs	r1, #9
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f99d 	bl	8008840 <USBH_Get_CfgDesc>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2204      	movs	r2, #4
 8008514:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008516:	e0cd      	b.n	80086b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b03      	cmp	r3, #3
 800851c:	f040 80ca 	bne.w	80086b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008526:	3301      	adds	r3, #1
 8008528:	b2da      	uxtb	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008536:	2b03      	cmp	r3, #3
 8008538:	d903      	bls.n	8008542 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	220d      	movs	r2, #13
 800853e:	701a      	strb	r2, [r3, #0]
      break;
 8008540:	e0b8      	b.n	80086b4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	795b      	ldrb	r3, [r3, #5]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 ffd7 	bl	80094fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	791b      	ldrb	r3, [r3, #4]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 ffd1 	bl	80094fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	701a      	strb	r2, [r3, #0]
      break;
 8008566:	e0a5      	b.n	80086b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f965 	bl	8008840 <USBH_Get_CfgDesc>
 8008576:	4603      	mov	r3, r0
 8008578:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2205      	movs	r2, #5
 8008584:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008586:	e097      	b.n	80086b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b03      	cmp	r3, #3
 800858c:	f040 8094 	bne.w	80086b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008596:	3301      	adds	r3, #1
 8008598:	b2da      	uxtb	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d903      	bls.n	80085b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	220d      	movs	r2, #13
 80085ae:	701a      	strb	r2, [r3, #0]
      break;
 80085b0:	e082      	b.n	80086b8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	795b      	ldrb	r3, [r3, #5]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 ff9f 	bl	80094fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	791b      	ldrb	r3, [r3, #4]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 ff99 	bl	80094fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
      break;
 80085d6:	e06f      	b.n	80086b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d019      	beq.n	8008616 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80085ee:	23ff      	movs	r3, #255	; 0xff
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f949 	bl	8008888 <USBH_Get_StringDesc>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d103      	bne.n	8008608 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2206      	movs	r2, #6
 8008604:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008606:	e059      	b.n	80086bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	2b03      	cmp	r3, #3
 800860c:	d156      	bne.n	80086bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2206      	movs	r2, #6
 8008612:	705a      	strb	r2, [r3, #1]
      break;
 8008614:	e052      	b.n	80086bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2206      	movs	r2, #6
 800861a:	705a      	strb	r2, [r3, #1]
      break;
 800861c:	e04e      	b.n	80086bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008624:	2b00      	cmp	r3, #0
 8008626:	d019      	beq.n	800865c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008634:	23ff      	movs	r3, #255	; 0xff
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f926 	bl	8008888 <USBH_Get_StringDesc>
 800863c:	4603      	mov	r3, r0
 800863e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d103      	bne.n	800864e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2207      	movs	r2, #7
 800864a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800864c:	e038      	b.n	80086c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d135      	bne.n	80086c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2207      	movs	r2, #7
 8008658:	705a      	strb	r2, [r3, #1]
      break;
 800865a:	e031      	b.n	80086c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2207      	movs	r2, #7
 8008660:	705a      	strb	r2, [r3, #1]
      break;
 8008662:	e02d      	b.n	80086c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800866a:	2b00      	cmp	r3, #0
 800866c:	d017      	beq.n	800869e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800867a:	23ff      	movs	r3, #255	; 0xff
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f903 	bl	8008888 <USBH_Get_StringDesc>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008690:	e018      	b.n	80086c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b03      	cmp	r3, #3
 8008696:	d115      	bne.n	80086c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
      break;
 800869c:	e012      	b.n	80086c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
      break;
 80086a2:	e00f      	b.n	80086c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80086a4:	bf00      	nop
 80086a6:	e00e      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086a8:	bf00      	nop
 80086aa:	e00c      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086ac:	bf00      	nop
 80086ae:	e00a      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086b0:	bf00      	nop
 80086b2:	e008      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086b4:	bf00      	nop
 80086b6:	e006      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086b8:	bf00      	nop
 80086ba:	e004      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086bc:	bf00      	nop
 80086be:	e002      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086c0:	bf00      	nop
 80086c2:	e000      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086c4:	bf00      	nop
  }
  return Status;
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f804 	bl	8008712 <USBH_HandleSof>
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b0b      	cmp	r3, #11
 8008722:	d10a      	bne.n	800873a <USBH_HandleSof+0x28>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
  }
}
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008752:	bf00      	nop
}
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800876e:	bf00      	nop
}
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 f844 	bl	8009856 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	791b      	ldrb	r3, [r3, #4]
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fe91 	bl	80094fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	795b      	ldrb	r3, [r3, #5]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fe8b 	bl	80094fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	b29b      	uxth	r3, r3
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	4613      	mov	r3, r2
 800880a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800880e:	2100      	movs	r1, #0
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f864 	bl	80088de <USBH_GetDescriptor>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	b292      	uxth	r2, r2
 8008830:	4619      	mov	r1, r3
 8008832:	f000 f918 	bl	8008a66 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af02      	add	r7, sp, #8
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	331c      	adds	r3, #28
 8008850:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008852:	887b      	ldrh	r3, [r7, #2]
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f83d 	bl	80088de <USBH_GetDescriptor>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d107      	bne.n	800887e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800886e:	887b      	ldrh	r3, [r7, #2]
 8008870:	461a      	mov	r2, r3
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f987 	bl	8008b88 <USBH_ParseCfgDesc>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	461a      	mov	r2, r3
 8008894:	460b      	mov	r3, r1
 8008896:	72fb      	strb	r3, [r7, #11]
 8008898:	4613      	mov	r3, r2
 800889a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800889c:	7afb      	ldrb	r3, [r7, #11]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80088a4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80088ac:	893b      	ldrh	r3, [r7, #8]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	460b      	mov	r3, r1
 80088b2:	2100      	movs	r1, #0
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f812 	bl	80088de <USBH_GetDescriptor>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d107      	bne.n	80088d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088ca:	893a      	ldrh	r2, [r7, #8]
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fb24 	bl	8008f1c <USBH_ParseStringDesc>
  }

  return status;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	607b      	str	r3, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	72fb      	strb	r3, [r7, #11]
 80088ec:	4613      	mov	r3, r2
 80088ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	789b      	ldrb	r3, [r3, #2]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d11c      	bne.n	8008932 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80088f8:	7afb      	ldrb	r3, [r7, #11]
 80088fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2206      	movs	r2, #6
 8008908:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	893a      	ldrh	r2, [r7, #8]
 800890e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008910:	893b      	ldrh	r3, [r7, #8]
 8008912:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800891a:	d104      	bne.n	8008926 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f240 4209 	movw	r2, #1033	; 0x409
 8008922:	829a      	strh	r2, [r3, #20]
 8008924:	e002      	b.n	800892c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8b3a      	ldrh	r2, [r7, #24]
 8008930:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008932:	8b3b      	ldrh	r3, [r7, #24]
 8008934:	461a      	mov	r2, r3
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fb3d 	bl	8008fb8 <USBH_CtlReq>
 800893e:	4603      	mov	r3, r0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	789b      	ldrb	r3, [r3, #2]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d10f      	bne.n	800897c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2205      	movs	r2, #5
 8008966:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800897c:	2200      	movs	r2, #0
 800897e:	2100      	movs	r1, #0
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fb19 	bl	8008fb8 <USBH_CtlReq>
 8008986:	4603      	mov	r3, r0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	789b      	ldrb	r3, [r3, #2]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d10e      	bne.n	80089c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2209      	movs	r2, #9
 80089ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	887a      	ldrh	r2, [r7, #2]
 80089b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 faf6 	bl	8008fb8 <USBH_CtlReq>
 80089cc:	4603      	mov	r3, r0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	789b      	ldrb	r3, [r3, #2]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d10f      	bne.n	8008a0a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2203      	movs	r2, #3
 80089f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fad2 	bl	8008fb8 <USBH_CtlReq>
 8008a14:	4603      	mov	r3, r0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	789b      	ldrb	r3, [r3, #2]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d10f      	bne.n	8008a52 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2202      	movs	r2, #2
 8008a36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 faae 	bl	8008fb8 <USBH_CtlReq>
 8008a5c:	4603      	mov	r3, r0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	4613      	mov	r3, r2
 8008a72:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	785a      	ldrb	r2, [r3, #1]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3302      	adds	r3, #2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3303      	adds	r3, #3
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	791a      	ldrb	r2, [r3, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	795a      	ldrb	r2, [r3, #5]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	799a      	ldrb	r2, [r3, #6]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	79da      	ldrb	r2, [r3, #7]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	79db      	ldrb	r3, [r3, #7]
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	dc11      	bgt.n	8008aec <USBH_ParseDevDesc+0x86>
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	db16      	blt.n	8008afa <USBH_ParseDevDesc+0x94>
 8008acc:	3b08      	subs	r3, #8
 8008ace:	2201      	movs	r2, #1
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bf14      	ite	ne
 8008ae0:	2301      	movne	r3, #1
 8008ae2:	2300      	moveq	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <USBH_ParseDevDesc+0x8a>
 8008aea:	e006      	b.n	8008afa <USBH_ParseDevDesc+0x94>
 8008aec:	2b40      	cmp	r3, #64	; 0x40
 8008aee:	d104      	bne.n	8008afa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	79da      	ldrb	r2, [r3, #7]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	71da      	strb	r2, [r3, #7]
      break;
 8008af8:	e003      	b.n	8008b02 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2240      	movs	r2, #64	; 0x40
 8008afe:	71da      	strb	r2, [r3, #7]
      break;
 8008b00:	bf00      	nop
  }

  if (length > 8U)
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d939      	bls.n	8008b7c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	3309      	adds	r3, #9
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	021b      	lsls	r3, r3, #8
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	330a      	adds	r3, #10
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	330b      	adds	r3, #11
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	330c      	adds	r3, #12
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	330d      	adds	r3, #13
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	7b9a      	ldrb	r2, [r3, #14]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	7bda      	ldrb	r2, [r3, #15]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	7c1a      	ldrb	r2, [r3, #16]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	7c5a      	ldrb	r2, [r3, #17]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	745a      	strb	r2, [r3, #17]
  }
}
 8008b7c:	bf00      	nop
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08c      	sub	sp, #48	; 0x30
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b9c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	781a      	ldrb	r2, [r3, #0]
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	785a      	ldrb	r2, [r3, #1]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	3302      	adds	r3, #2
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3303      	adds	r3, #3
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	021b      	lsls	r3, r3, #8
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be4:	bf28      	it	cs
 8008be6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	791a      	ldrb	r2, [r3, #4]
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	795a      	ldrb	r2, [r3, #5]
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	799a      	ldrb	r2, [r3, #6]
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	79da      	ldrb	r2, [r3, #7]
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	7a1a      	ldrb	r2, [r3, #8]
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d002      	beq.n	8008c26 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	2209      	movs	r2, #9
 8008c24:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	2b09      	cmp	r3, #9
 8008c2a:	f240 809d 	bls.w	8008d68 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c2e:	2309      	movs	r3, #9
 8008c30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c36:	e081      	b.n	8008d3c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c38:	f107 0316 	add.w	r3, r7, #22
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c40:	f000 f99f 	bl	8008f82 <USBH_GetNextDesc>
 8008c44:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d176      	bne.n	8008d3c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	d002      	beq.n	8008c5c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	2209      	movs	r2, #9
 8008c5a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c60:	221a      	movs	r2, #26
 8008c62:	fb02 f303 	mul.w	r3, r2, r3
 8008c66:	3308      	adds	r3, #8
 8008c68:	6a3a      	ldr	r2, [r7, #32]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c72:	69f8      	ldr	r0, [r7, #28]
 8008c74:	f000 f87e 	bl	8008d74 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c82:	e043      	b.n	8008d0c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c84:	f107 0316 	add.w	r3, r7, #22
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8c:	f000 f979 	bl	8008f82 <USBH_GetNextDesc>
 8008c90:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	2b05      	cmp	r3, #5
 8008c98:	d138      	bne.n	8008d0c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	795b      	ldrb	r3, [r3, #5]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d10f      	bne.n	8008cc2 <USBH_ParseCfgDesc+0x13a>
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	799b      	ldrb	r3, [r3, #6]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d10b      	bne.n	8008cc2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	79db      	ldrb	r3, [r3, #7]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10f      	bne.n	8008cd2 <USBH_ParseCfgDesc+0x14a>
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b09      	cmp	r3, #9
 8008cb8:	d00b      	beq.n	8008cd2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	2209      	movs	r2, #9
 8008cbe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cc0:	e007      	b.n	8008cd2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b07      	cmp	r3, #7
 8008cc8:	d004      	beq.n	8008cd4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	2207      	movs	r2, #7
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e000      	b.n	8008cd4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cd2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008cdc:	3201      	adds	r2, #1
 8008cde:	00d2      	lsls	r2, r2, #3
 8008ce0:	211a      	movs	r1, #26
 8008ce2:	fb01 f303 	mul.w	r3, r1, r3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3308      	adds	r3, #8
 8008cea:	6a3a      	ldr	r2, [r7, #32]
 8008cec:	4413      	add	r3, r2
 8008cee:	3304      	adds	r3, #4
 8008cf0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf4:	69b9      	ldr	r1, [r7, #24]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f86b 	bl	8008dd2 <USBH_ParseEPDesc>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008d02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d06:	3301      	adds	r3, #1
 8008d08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	791b      	ldrb	r3, [r3, #4]
 8008d10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d204      	bcs.n	8008d22 <USBH_ParseCfgDesc+0x19a>
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	885a      	ldrh	r2, [r3, #2]
 8008d1c:	8afb      	ldrh	r3, [r7, #22]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d8b0      	bhi.n	8008c84 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	791b      	ldrb	r3, [r3, #4]
 8008d26:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d201      	bcs.n	8008d32 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e01c      	b.n	8008d6c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d36:	3301      	adds	r3, #1
 8008d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d805      	bhi.n	8008d50 <USBH_ParseCfgDesc+0x1c8>
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	885a      	ldrh	r2, [r3, #2]
 8008d48:	8afb      	ldrh	r3, [r7, #22]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	f63f af74 	bhi.w	8008c38 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	791b      	ldrb	r3, [r3, #4]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	bf28      	it	cs
 8008d58:	2302      	movcs	r3, #2
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d201      	bcs.n	8008d68 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e001      	b.n	8008d6c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3730      	adds	r7, #48	; 0x30
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	785a      	ldrb	r2, [r3, #1]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	789a      	ldrb	r2, [r3, #2]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	78da      	ldrb	r2, [r3, #3]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	791a      	ldrb	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	795a      	ldrb	r2, [r3, #5]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	799a      	ldrb	r2, [r3, #6]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	79da      	ldrb	r2, [r3, #7]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	7a1a      	ldrb	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	721a      	strb	r2, [r3, #8]
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	785a      	ldrb	r2, [r3, #1]
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	789a      	ldrb	r2, [r3, #2]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	78da      	ldrb	r2, [r3, #3]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3304      	adds	r3, #4
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3305      	adds	r3, #5
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	799a      	ldrb	r2, [r3, #6]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	889b      	ldrh	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	75fb      	strb	r3, [r7, #23]
 8008e32:	e033      	b.n	8008e9c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	889b      	ldrh	r3, [r3, #4]
 8008e38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e3c:	f023 0307 	bic.w	r3, r3, #7
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	889b      	ldrh	r3, [r3, #4]
 8008e4a:	b21a      	sxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	b299      	uxth	r1, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3305      	adds	r3, #5
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	021b      	lsls	r3, r3, #8
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	430b      	orrs	r3, r1
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d110      	bne.n	8008e8e <USBH_ParseEPDesc+0xbc>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b299      	uxth	r1, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3305      	adds	r3, #5
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	430b      	orrs	r3, r1
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e8a:	b21b      	sxth	r3, r3
 8008e8c:	e001      	b.n	8008e92 <USBH_ParseEPDesc+0xc0>
 8008e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e92:	4313      	orrs	r3, r2
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d116      	bne.n	8008ed4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	78db      	ldrb	r3, [r3, #3]
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d005      	beq.n	8008ebe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	78db      	ldrb	r3, [r3, #3]
 8008eb6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d127      	bne.n	8008f0e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	799b      	ldrb	r3, [r3, #6]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <USBH_ParseEPDesc+0xfc>
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	799b      	ldrb	r3, [r3, #6]
 8008eca:	2b10      	cmp	r3, #16
 8008ecc:	d91f      	bls.n	8008f0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	75fb      	strb	r3, [r7, #23]
 8008ed2:	e01c      	b.n	8008f0e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	78db      	ldrb	r3, [r3, #3]
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d10a      	bne.n	8008ef6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	799b      	ldrb	r3, [r3, #6]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <USBH_ParseEPDesc+0x11e>
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	799b      	ldrb	r3, [r3, #6]
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d90e      	bls.n	8008f0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	75fb      	strb	r3, [r7, #23]
 8008ef4:	e00b      	b.n	8008f0e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	78db      	ldrb	r3, [r3, #3]
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d105      	bne.n	8008f0e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	799b      	ldrb	r3, [r3, #6]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	371c      	adds	r7, #28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4613      	mov	r3, r2
 8008f28:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d120      	bne.n	8008f76 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	1e9a      	subs	r2, r3, #2
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	bf28      	it	cs
 8008f40:	4613      	movcs	r3, r2
 8008f42:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3302      	adds	r3, #2
 8008f48:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	82fb      	strh	r3, [r7, #22]
 8008f4e:	e00b      	b.n	8008f68 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008f50:	8afb      	ldrh	r3, [r7, #22]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f62:	8afb      	ldrh	r3, [r7, #22]
 8008f64:	3302      	adds	r3, #2
 8008f66:	82fb      	strh	r3, [r7, #22]
 8008f68:	8afa      	ldrh	r2, [r7, #22]
 8008f6a:	8abb      	ldrh	r3, [r7, #20]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d3ef      	bcc.n	8008f50 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
  }
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	881a      	ldrh	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	4413      	add	r3, r2
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008faa:	68fb      	ldr	r3, [r7, #12]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	789b      	ldrb	r3, [r3, #2]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d002      	beq.n	8008fd8 <USBH_CtlReq+0x20>
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d00f      	beq.n	8008ff6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008fd6:	e027      	b.n	8009028 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	88fa      	ldrh	r2, [r7, #6]
 8008fe2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2202      	movs	r2, #2
 8008fee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ff4:	e018      	b.n	8009028 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 f81c 	bl	8009034 <USBH_HandleControl>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <USBH_CtlReq+0x54>
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d106      	bne.n	800901a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	761a      	strb	r2, [r3, #24]
      break;
 8009018:	e005      	b.n	8009026 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d102      	bne.n	8009026 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	709a      	strb	r2, [r3, #2]
      break;
 8009026:	bf00      	nop
  }
  return status;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af02      	add	r7, sp, #8
 800903a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009040:	2300      	movs	r3, #0
 8009042:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	7e1b      	ldrb	r3, [r3, #24]
 8009048:	3b01      	subs	r3, #1
 800904a:	2b0a      	cmp	r3, #10
 800904c:	f200 8156 	bhi.w	80092fc <USBH_HandleControl+0x2c8>
 8009050:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <USBH_HandleControl+0x24>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	08009085 	.word	0x08009085
 800905c:	0800909f 	.word	0x0800909f
 8009060:	08009109 	.word	0x08009109
 8009064:	0800912f 	.word	0x0800912f
 8009068:	08009167 	.word	0x08009167
 800906c:	08009191 	.word	0x08009191
 8009070:	080091e3 	.word	0x080091e3
 8009074:	08009205 	.word	0x08009205
 8009078:	08009241 	.word	0x08009241
 800907c:	08009267 	.word	0x08009267
 8009080:	080092a5 	.word	0x080092a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 0110 	add.w	r1, r3, #16
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	795b      	ldrb	r3, [r3, #5]
 800908e:	461a      	mov	r2, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f943 	bl	800931c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	761a      	strb	r2, [r3, #24]
      break;
 800909c:	e139      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	795b      	ldrb	r3, [r3, #5]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fcc5 	bl	8009a34 <USBH_LL_GetURBState>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d11e      	bne.n	80090f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7c1b      	ldrb	r3, [r3, #16]
 80090b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	8adb      	ldrh	r3, [r3, #22]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80090c6:	7b7b      	ldrb	r3, [r7, #13]
 80090c8:	2b80      	cmp	r3, #128	; 0x80
 80090ca:	d103      	bne.n	80090d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2203      	movs	r2, #3
 80090d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090d2:	e115      	b.n	8009300 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2205      	movs	r2, #5
 80090d8:	761a      	strb	r2, [r3, #24]
      break;
 80090da:	e111      	b.n	8009300 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80090dc:	7b7b      	ldrb	r3, [r7, #13]
 80090de:	2b80      	cmp	r3, #128	; 0x80
 80090e0:	d103      	bne.n	80090ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2209      	movs	r2, #9
 80090e6:	761a      	strb	r2, [r3, #24]
      break;
 80090e8:	e10a      	b.n	8009300 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2207      	movs	r2, #7
 80090ee:	761a      	strb	r2, [r3, #24]
      break;
 80090f0:	e106      	b.n	8009300 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d003      	beq.n	8009100 <USBH_HandleControl+0xcc>
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	f040 8100 	bne.w	8009300 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	220b      	movs	r2, #11
 8009104:	761a      	strb	r2, [r3, #24]
      break;
 8009106:	e0fb      	b.n	8009300 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800910e:	b29a      	uxth	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6899      	ldr	r1, [r3, #8]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	899a      	ldrh	r2, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	791b      	ldrb	r3, [r3, #4]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f93a 	bl	800939a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2204      	movs	r2, #4
 800912a:	761a      	strb	r2, [r3, #24]
      break;
 800912c:	e0f1      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	791b      	ldrb	r3, [r3, #4]
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc7d 	bl	8009a34 <USBH_LL_GetURBState>
 800913a:	4603      	mov	r3, r0
 800913c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d102      	bne.n	800914a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2209      	movs	r2, #9
 8009148:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	2b05      	cmp	r3, #5
 800914e:	d102      	bne.n	8009156 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009150:	2303      	movs	r3, #3
 8009152:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009154:	e0d6      	b.n	8009304 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b04      	cmp	r3, #4
 800915a:	f040 80d3 	bne.w	8009304 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	220b      	movs	r2, #11
 8009162:	761a      	strb	r2, [r3, #24]
      break;
 8009164:	e0ce      	b.n	8009304 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6899      	ldr	r1, [r3, #8]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	899a      	ldrh	r2, [r3, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	795b      	ldrb	r3, [r3, #5]
 8009172:	2001      	movs	r0, #1
 8009174:	9000      	str	r0, [sp, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8ea 	bl	8009350 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009182:	b29a      	uxth	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2206      	movs	r2, #6
 800918c:	761a      	strb	r2, [r3, #24]
      break;
 800918e:	e0c0      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	795b      	ldrb	r3, [r3, #5]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fc4c 	bl	8009a34 <USBH_LL_GetURBState>
 800919c:	4603      	mov	r3, r0
 800919e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d103      	bne.n	80091ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2207      	movs	r2, #7
 80091aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091ac:	e0ac      	b.n	8009308 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b05      	cmp	r3, #5
 80091b2:	d105      	bne.n	80091c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	220c      	movs	r2, #12
 80091b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80091ba:	2303      	movs	r3, #3
 80091bc:	73fb      	strb	r3, [r7, #15]
      break;
 80091be:	e0a3      	b.n	8009308 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d103      	bne.n	80091ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2205      	movs	r2, #5
 80091ca:	761a      	strb	r2, [r3, #24]
      break;
 80091cc:	e09c      	b.n	8009308 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	f040 8099 	bne.w	8009308 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	220b      	movs	r2, #11
 80091da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80091dc:	2302      	movs	r3, #2
 80091de:	73fb      	strb	r3, [r7, #15]
      break;
 80091e0:	e092      	b.n	8009308 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	2100      	movs	r1, #0
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f8d5 	bl	800939a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2208      	movs	r2, #8
 8009200:	761a      	strb	r2, [r3, #24]

      break;
 8009202:	e086      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fc12 	bl	8009a34 <USBH_LL_GetURBState>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d105      	bne.n	8009226 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	220d      	movs	r2, #13
 800921e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009224:	e072      	b.n	800930c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b04      	cmp	r3, #4
 800922a:	d103      	bne.n	8009234 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	220b      	movs	r2, #11
 8009230:	761a      	strb	r2, [r3, #24]
      break;
 8009232:	e06b      	b.n	800930c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	2b05      	cmp	r3, #5
 8009238:	d168      	bne.n	800930c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800923a:	2303      	movs	r3, #3
 800923c:	73fb      	strb	r3, [r7, #15]
      break;
 800923e:	e065      	b.n	800930c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	795b      	ldrb	r3, [r3, #5]
 8009244:	2201      	movs	r2, #1
 8009246:	9200      	str	r2, [sp, #0]
 8009248:	2200      	movs	r2, #0
 800924a:	2100      	movs	r1, #0
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f87f 	bl	8009350 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	220a      	movs	r2, #10
 8009262:	761a      	strb	r2, [r3, #24]
      break;
 8009264:	e055      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	795b      	ldrb	r3, [r3, #5]
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fbe1 	bl	8009a34 <USBH_LL_GetURBState>
 8009272:	4603      	mov	r3, r0
 8009274:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d105      	bne.n	8009288 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	220d      	movs	r2, #13
 8009284:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009286:	e043      	b.n	8009310 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d103      	bne.n	8009296 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2209      	movs	r2, #9
 8009292:	761a      	strb	r2, [r3, #24]
      break;
 8009294:	e03c      	b.n	8009310 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	2b04      	cmp	r3, #4
 800929a:	d139      	bne.n	8009310 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	220b      	movs	r2, #11
 80092a0:	761a      	strb	r2, [r3, #24]
      break;
 80092a2:	e035      	b.n	8009310 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7e5b      	ldrb	r3, [r3, #25]
 80092a8:	3301      	adds	r3, #1
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	765a      	strb	r2, [r3, #25]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	7e5b      	ldrb	r3, [r3, #25]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d806      	bhi.n	80092c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092c4:	e025      	b.n	8009312 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092cc:	2106      	movs	r1, #6
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	795b      	ldrb	r3, [r3, #5]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f90c 	bl	80094fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	791b      	ldrb	r3, [r3, #4]
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f906 	bl	80094fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	73fb      	strb	r3, [r7, #15]
      break;
 80092fa:	e00a      	b.n	8009312 <USBH_HandleControl+0x2de>

    default:
      break;
 80092fc:	bf00      	nop
 80092fe:	e008      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 8009300:	bf00      	nop
 8009302:	e006      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 8009304:	bf00      	nop
 8009306:	e004      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 8009308:	bf00      	nop
 800930a:	e002      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 800930c:	bf00      	nop
 800930e:	e000      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 8009310:	bf00      	nop
  }

  return status;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af04      	add	r7, sp, #16
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800932a:	79f9      	ldrb	r1, [r7, #7]
 800932c:	2300      	movs	r3, #0
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	2308      	movs	r3, #8
 8009332:	9302      	str	r3, [sp, #8]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	2300      	movs	r3, #0
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	2300      	movs	r3, #0
 800933e:	2200      	movs	r2, #0
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 fb46 	bl	80099d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af04      	add	r7, sp, #16
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4611      	mov	r1, r2
 800935c:	461a      	mov	r2, r3
 800935e:	460b      	mov	r3, r1
 8009360:	80fb      	strh	r3, [r7, #6]
 8009362:	4613      	mov	r3, r2
 8009364:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009374:	7979      	ldrb	r1, [r7, #5]
 8009376:	7e3b      	ldrb	r3, [r7, #24]
 8009378:	9303      	str	r3, [sp, #12]
 800937a:	88fb      	ldrh	r3, [r7, #6]
 800937c:	9302      	str	r3, [sp, #8]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	2301      	movs	r3, #1
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	2300      	movs	r3, #0
 8009388:	2200      	movs	r2, #0
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 fb21 	bl	80099d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b088      	sub	sp, #32
 800939e:	af04      	add	r7, sp, #16
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	4611      	mov	r1, r2
 80093a6:	461a      	mov	r2, r3
 80093a8:	460b      	mov	r3, r1
 80093aa:	80fb      	strh	r3, [r7, #6]
 80093ac:	4613      	mov	r3, r2
 80093ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093b0:	7979      	ldrb	r1, [r7, #5]
 80093b2:	2300      	movs	r3, #0
 80093b4:	9303      	str	r3, [sp, #12]
 80093b6:	88fb      	ldrh	r3, [r7, #6]
 80093b8:	9302      	str	r3, [sp, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	2301      	movs	r3, #1
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	2201      	movs	r2, #1
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fb03 	bl	80099d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093cc:	2300      	movs	r3, #0

}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b088      	sub	sp, #32
 80093da:	af04      	add	r7, sp, #16
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	4611      	mov	r1, r2
 80093e2:	461a      	mov	r2, r3
 80093e4:	460b      	mov	r3, r1
 80093e6:	80fb      	strh	r3, [r7, #6]
 80093e8:	4613      	mov	r3, r2
 80093ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093fa:	7979      	ldrb	r1, [r7, #5]
 80093fc:	7e3b      	ldrb	r3, [r7, #24]
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	88fb      	ldrh	r3, [r7, #6]
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	2301      	movs	r3, #1
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	2302      	movs	r3, #2
 800940e:	2200      	movs	r2, #0
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fade 	bl	80099d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af04      	add	r7, sp, #16
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4611      	mov	r1, r2
 800942c:	461a      	mov	r2, r3
 800942e:	460b      	mov	r3, r1
 8009430:	80fb      	strh	r3, [r7, #6]
 8009432:	4613      	mov	r3, r2
 8009434:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009436:	7979      	ldrb	r1, [r7, #5]
 8009438:	2300      	movs	r3, #0
 800943a:	9303      	str	r3, [sp, #12]
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	9302      	str	r3, [sp, #8]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	2301      	movs	r3, #1
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	2302      	movs	r3, #2
 800944a:	2201      	movs	r2, #1
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 fac0 	bl	80099d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af04      	add	r7, sp, #16
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	461a      	mov	r2, r3
 800946a:	4603      	mov	r3, r0
 800946c:	70fb      	strb	r3, [r7, #3]
 800946e:	460b      	mov	r3, r1
 8009470:	70bb      	strb	r3, [r7, #2]
 8009472:	4613      	mov	r3, r2
 8009474:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009476:	7878      	ldrb	r0, [r7, #1]
 8009478:	78ba      	ldrb	r2, [r7, #2]
 800947a:	78f9      	ldrb	r1, [r7, #3]
 800947c:	8b3b      	ldrh	r3, [r7, #24]
 800947e:	9302      	str	r3, [sp, #8]
 8009480:	7d3b      	ldrb	r3, [r7, #20]
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	7c3b      	ldrb	r3, [r7, #16]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	4603      	mov	r3, r0
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa53 	bl	8009936 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80094a6:	78fb      	ldrb	r3, [r7, #3]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa72 	bl	8009994 <USBH_LL_ClosePipe>

  return USBH_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f836 	bl	8009538 <USBH_GetFreePipe>
 80094cc:	4603      	mov	r3, r0
 80094ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80094d0:	89fb      	ldrh	r3, [r7, #14]
 80094d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00a      	beq.n	80094f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80094da:	78fa      	ldrb	r2, [r7, #3]
 80094dc:	89fb      	ldrh	r3, [r7, #14]
 80094de:	f003 030f 	and.w	r3, r3, #15
 80094e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	33e0      	adds	r3, #224	; 0xe0
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80094f0:	89fb      	ldrh	r3, [r7, #14]
 80094f2:	b2db      	uxtb	r3, r3
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	2b0f      	cmp	r3, #15
 800950c:	d80d      	bhi.n	800952a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	33e0      	adds	r3, #224	; 0xe0
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	33e0      	adds	r3, #224	; 0xe0
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
 8009548:	e00f      	b.n	800956a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	33e0      	adds	r3, #224	; 0xe0
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	b29b      	uxth	r3, r3
 8009562:	e007      	b.n	8009574 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	3301      	adds	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	2b0f      	cmp	r3, #15
 800956e:	d9ec      	bls.n	800954a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009570:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009584:	2201      	movs	r2, #1
 8009586:	490e      	ldr	r1, [pc, #56]	; (80095c0 <MX_USB_HOST_Init+0x40>)
 8009588:	480e      	ldr	r0, [pc, #56]	; (80095c4 <MX_USB_HOST_Init+0x44>)
 800958a:	f7fe fba7 	bl	8007cdc <USBH_Init>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009594:	f7f7 fad8 	bl	8000b48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009598:	490b      	ldr	r1, [pc, #44]	; (80095c8 <MX_USB_HOST_Init+0x48>)
 800959a:	480a      	ldr	r0, [pc, #40]	; (80095c4 <MX_USB_HOST_Init+0x44>)
 800959c:	f7fe fc2c 	bl	8007df8 <USBH_RegisterClass>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80095a6:	f7f7 facf 	bl	8000b48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80095aa:	4806      	ldr	r0, [pc, #24]	; (80095c4 <MX_USB_HOST_Init+0x44>)
 80095ac:	f7fe fcb0 	bl	8007f10 <USBH_Start>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80095b6:	f7f7 fac7 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80095ba:	bf00      	nop
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	080095e1 	.word	0x080095e1
 80095c4:	2000027c 	.word	0x2000027c
 80095c8:	2000000c 	.word	0x2000000c

080095cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80095d0:	4802      	ldr	r0, [pc, #8]	; (80095dc <MX_USB_HOST_Process+0x10>)
 80095d2:	f7fe fcad 	bl	8007f30 <USBH_Process>
}
 80095d6:	bf00      	nop
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	2000027c 	.word	0x2000027c

080095e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d819      	bhi.n	8009628 <USBH_UserProcess+0x48>
 80095f4:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <USBH_UserProcess+0x1c>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	08009629 	.word	0x08009629
 8009600:	08009619 	.word	0x08009619
 8009604:	08009629 	.word	0x08009629
 8009608:	08009621 	.word	0x08009621
 800960c:	08009611 	.word	0x08009611
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009610:	4b09      	ldr	r3, [pc, #36]	; (8009638 <USBH_UserProcess+0x58>)
 8009612:	2203      	movs	r2, #3
 8009614:	701a      	strb	r2, [r3, #0]
  break;
 8009616:	e008      	b.n	800962a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <USBH_UserProcess+0x58>)
 800961a:	2202      	movs	r2, #2
 800961c:	701a      	strb	r2, [r3, #0]
  break;
 800961e:	e004      	b.n	800962a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009620:	4b05      	ldr	r3, [pc, #20]	; (8009638 <USBH_UserProcess+0x58>)
 8009622:	2201      	movs	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]
  break;
 8009626:	e000      	b.n	800962a <USBH_UserProcess+0x4a>

  default:
  break;
 8009628:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000654 	.word	0x20000654

0800963c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b08a      	sub	sp, #40	; 0x28
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009644:	f107 0314 	add.w	r3, r7, #20
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	605a      	str	r2, [r3, #4]
 800964e:	609a      	str	r2, [r3, #8]
 8009650:	60da      	str	r2, [r3, #12]
 8009652:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800965c:	d147      	bne.n	80096ee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800965e:	2300      	movs	r3, #0
 8009660:	613b      	str	r3, [r7, #16]
 8009662:	4b25      	ldr	r3, [pc, #148]	; (80096f8 <HAL_HCD_MspInit+0xbc>)
 8009664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009666:	4a24      	ldr	r2, [pc, #144]	; (80096f8 <HAL_HCD_MspInit+0xbc>)
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	6313      	str	r3, [r2, #48]	; 0x30
 800966e:	4b22      	ldr	r3, [pc, #136]	; (80096f8 <HAL_HCD_MspInit+0xbc>)
 8009670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	613b      	str	r3, [r7, #16]
 8009678:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800967a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800967e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009680:	2300      	movs	r3, #0
 8009682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009688:	f107 0314 	add.w	r3, r7, #20
 800968c:	4619      	mov	r1, r3
 800968e:	481b      	ldr	r0, [pc, #108]	; (80096fc <HAL_HCD_MspInit+0xc0>)
 8009690:	f7f7 ff8a 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009694:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800969a:	2302      	movs	r3, #2
 800969c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096a2:	2300      	movs	r3, #0
 80096a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096a6:	230a      	movs	r3, #10
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096aa:	f107 0314 	add.w	r3, r7, #20
 80096ae:	4619      	mov	r1, r3
 80096b0:	4812      	ldr	r0, [pc, #72]	; (80096fc <HAL_HCD_MspInit+0xc0>)
 80096b2:	f7f7 ff79 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096b6:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <HAL_HCD_MspInit+0xbc>)
 80096b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ba:	4a0f      	ldr	r2, [pc, #60]	; (80096f8 <HAL_HCD_MspInit+0xbc>)
 80096bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c0:	6353      	str	r3, [r2, #52]	; 0x34
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <HAL_HCD_MspInit+0xbc>)
 80096c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ca:	4a0b      	ldr	r2, [pc, #44]	; (80096f8 <HAL_HCD_MspInit+0xbc>)
 80096cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096d0:	6453      	str	r3, [r2, #68]	; 0x44
 80096d2:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <HAL_HCD_MspInit+0xbc>)
 80096d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80096de:	2200      	movs	r2, #0
 80096e0:	2100      	movs	r1, #0
 80096e2:	2043      	movs	r0, #67	; 0x43
 80096e4:	f7f7 fe97 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096e8:	2043      	movs	r0, #67	; 0x43
 80096ea:	f7f7 feb0 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096ee:	bf00      	nop
 80096f0:	3728      	adds	r7, #40	; 0x28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	40023800 	.word	0x40023800
 80096fc:	40020000 	.word	0x40020000

08009700 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe ffed 	bl	80086ee <USBH_LL_IncTimer>
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff f825 	bl	800877a <USBH_LL_Connect>
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff f82e 	bl	80087a8 <USBH_LL_Disconnect>
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
 8009760:	4613      	mov	r3, r2
 8009762:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe ffdf 	bl	8008742 <USBH_LL_PortEnabled>
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe ffdf 	bl	800875e <USBH_LL_PortDisabled>
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d12a      	bne.n	8009810 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80097ba:	4a18      	ldr	r2, [pc, #96]	; (800981c <USBH_LL_Init+0x74>)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a15      	ldr	r2, [pc, #84]	; (800981c <USBH_LL_Init+0x74>)
 80097c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097ca:	4b14      	ldr	r3, [pc, #80]	; (800981c <USBH_LL_Init+0x74>)
 80097cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80097d2:	4b12      	ldr	r3, [pc, #72]	; (800981c <USBH_LL_Init+0x74>)
 80097d4:	2208      	movs	r2, #8
 80097d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80097d8:	4b10      	ldr	r3, [pc, #64]	; (800981c <USBH_LL_Init+0x74>)
 80097da:	2201      	movs	r2, #1
 80097dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097de:	4b0f      	ldr	r3, [pc, #60]	; (800981c <USBH_LL_Init+0x74>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80097e4:	4b0d      	ldr	r3, [pc, #52]	; (800981c <USBH_LL_Init+0x74>)
 80097e6:	2202      	movs	r2, #2
 80097e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097ea:	4b0c      	ldr	r3, [pc, #48]	; (800981c <USBH_LL_Init+0x74>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80097f0:	480a      	ldr	r0, [pc, #40]	; (800981c <USBH_LL_Init+0x74>)
 80097f2:	f7f8 f8a7 	bl	8001944 <HAL_HCD_Init>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80097fc:	f7f7 f9a4 	bl	8000b48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009800:	4806      	ldr	r0, [pc, #24]	; (800981c <USBH_LL_Init+0x74>)
 8009802:	f7f8 fc8a 	bl	800211a <HAL_HCD_GetCurrentFrame>
 8009806:	4603      	mov	r3, r0
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7fe ff60 	bl	80086d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20000658 	.word	0x20000658

08009820 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009836:	4618      	mov	r0, r3
 8009838:	f7f8 fbf9 	bl	800202e <HAL_HCD_Start>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f95c 	bl	8009b00 <USBH_Get_USB_Status>
 8009848:	4603      	mov	r3, r0
 800984a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984c:	7bbb      	ldrb	r3, [r7, #14]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800986c:	4618      	mov	r0, r3
 800986e:	f7f8 fc01 	bl	8002074 <HAL_HCD_Stop>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f941 	bl	8009b00 <USBH_Get_USB_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009882:	7bbb      	ldrb	r3, [r7, #14]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009894:	2301      	movs	r3, #1
 8009896:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800989e:	4618      	mov	r0, r3
 80098a0:	f7f8 fc49 	bl	8002136 <HAL_HCD_GetCurrentSpeed>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d00c      	beq.n	80098c4 <USBH_LL_GetSpeed+0x38>
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d80d      	bhi.n	80098ca <USBH_LL_GetSpeed+0x3e>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <USBH_LL_GetSpeed+0x2c>
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d003      	beq.n	80098be <USBH_LL_GetSpeed+0x32>
 80098b6:	e008      	b.n	80098ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80098b8:	2300      	movs	r3, #0
 80098ba:	73fb      	strb	r3, [r7, #15]
    break;
 80098bc:	e008      	b.n	80098d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80098be:	2301      	movs	r3, #1
 80098c0:	73fb      	strb	r3, [r7, #15]
    break;
 80098c2:	e005      	b.n	80098d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80098c4:	2302      	movs	r3, #2
 80098c6:	73fb      	strb	r3, [r7, #15]
    break;
 80098c8:	e002      	b.n	80098d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80098ca:	2301      	movs	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
    break;
 80098ce:	bf00      	nop
  }
  return  speed;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7f8 fbdc 	bl	80020ae <HAL_HCD_ResetPort>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f8ff 	bl	8009b00 <USBH_Get_USB_Status>
 8009902:	4603      	mov	r3, r0
 8009904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009906:	7bbb      	ldrb	r3, [r7, #14]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7f8 fbe3 	bl	80020f2 <HAL_HCD_HC_GetXferCount>
 800992c:	4603      	mov	r3, r0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009936:	b590      	push	{r4, r7, lr}
 8009938:	b089      	sub	sp, #36	; 0x24
 800993a:	af04      	add	r7, sp, #16
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	4608      	mov	r0, r1
 8009940:	4611      	mov	r1, r2
 8009942:	461a      	mov	r2, r3
 8009944:	4603      	mov	r3, r0
 8009946:	70fb      	strb	r3, [r7, #3]
 8009948:	460b      	mov	r3, r1
 800994a:	70bb      	strb	r3, [r7, #2]
 800994c:	4613      	mov	r3, r2
 800994e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800995e:	787c      	ldrb	r4, [r7, #1]
 8009960:	78ba      	ldrb	r2, [r7, #2]
 8009962:	78f9      	ldrb	r1, [r7, #3]
 8009964:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009966:	9302      	str	r3, [sp, #8]
 8009968:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	4623      	mov	r3, r4
 8009976:	f7f8 f847 	bl	8001a08 <HAL_HCD_HC_Init>
 800997a:	4603      	mov	r3, r0
 800997c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	4618      	mov	r0, r3
 8009982:	f000 f8bd 	bl	8009b00 <USBH_Get_USB_Status>
 8009986:	4603      	mov	r3, r0
 8009988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800998a:	7bbb      	ldrb	r3, [r7, #14]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	bd90      	pop	{r4, r7, pc}

08009994 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099ae:	78fa      	ldrb	r2, [r7, #3]
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7f8 f8b7 	bl	8001b26 <HAL_HCD_HC_Halt>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f89e 	bl	8009b00 <USBH_Get_USB_Status>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80099d2:	b590      	push	{r4, r7, lr}
 80099d4:	b089      	sub	sp, #36	; 0x24
 80099d6:	af04      	add	r7, sp, #16
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	461a      	mov	r2, r3
 80099e0:	4603      	mov	r3, r0
 80099e2:	70fb      	strb	r3, [r7, #3]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70bb      	strb	r3, [r7, #2]
 80099e8:	4613      	mov	r3, r2
 80099ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80099fa:	787c      	ldrb	r4, [r7, #1]
 80099fc:	78ba      	ldrb	r2, [r7, #2]
 80099fe:	78f9      	ldrb	r1, [r7, #3]
 8009a00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a04:	9303      	str	r3, [sp, #12]
 8009a06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a08:	9302      	str	r3, [sp, #8]
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	4623      	mov	r3, r4
 8009a16:	f7f8 f8a9 	bl	8001b6c <HAL_HCD_HC_SubmitRequest>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 f86d 	bl	8009b00 <USBH_Get_USB_Status>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd90      	pop	{r4, r7, pc}

08009a34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	4611      	mov	r1, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f8 fb3d 	bl	80020ca <HAL_HCD_HC_GetURBState>
 8009a50:	4603      	mov	r3, r0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	460b      	mov	r3, r1
 8009a64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d103      	bne.n	8009a78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 f870 	bl	8009b58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a78:	20c8      	movs	r0, #200	; 0xc8
 8009a7a:	f7f7 fbcd 	bl	8001218 <HAL_Delay>
  return USBH_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
 8009a94:	4613      	mov	r3, r2
 8009a96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	212c      	movs	r1, #44	; 0x2c
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	4413      	add	r3, r2
 8009aac:	333b      	adds	r3, #59	; 0x3b
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d009      	beq.n	8009ac8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009ab4:	78fb      	ldrb	r3, [r7, #3]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	212c      	movs	r1, #44	; 0x2c
 8009aba:	fb01 f303 	mul.w	r3, r1, r3
 8009abe:	4413      	add	r3, r2
 8009ac0:	3354      	adds	r3, #84	; 0x54
 8009ac2:	78ba      	ldrb	r2, [r7, #2]
 8009ac4:	701a      	strb	r2, [r3, #0]
 8009ac6:	e008      	b.n	8009ada <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	212c      	movs	r1, #44	; 0x2c
 8009ace:	fb01 f303 	mul.w	r3, r1, r3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3355      	adds	r3, #85	; 0x55
 8009ad6:	78ba      	ldrb	r2, [r7, #2]
 8009ad8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7f7 fb91 	bl	8001218 <HAL_Delay>
}
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d817      	bhi.n	8009b44 <USBH_Get_USB_Status+0x44>
 8009b14:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <USBH_Get_USB_Status+0x1c>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b2d 	.word	0x08009b2d
 8009b20:	08009b33 	.word	0x08009b33
 8009b24:	08009b39 	.word	0x08009b39
 8009b28:	08009b3f 	.word	0x08009b3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b30:	e00b      	b.n	8009b4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b32:	2302      	movs	r3, #2
 8009b34:	73fb      	strb	r3, [r7, #15]
    break;
 8009b36:	e008      	b.n	8009b4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3c:	e005      	b.n	8009b4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	73fb      	strb	r3, [r7, #15]
    break;
 8009b42:	e002      	b.n	8009b4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b44:	2302      	movs	r3, #2
 8009b46:	73fb      	strb	r3, [r7, #15]
    break;
 8009b48:	bf00      	nop
  }
  return usb_status;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
 8009b70:	e001      	b.n	8009b76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009b72:	2301      	movs	r3, #1
 8009b74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	4803      	ldr	r0, [pc, #12]	; (8009b8c <MX_DriverVbusFS+0x34>)
 8009b7e:	f7f7 feaf 	bl	80018e0 <HAL_GPIO_WritePin>
}
 8009b82:	bf00      	nop
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	40020800 	.word	0x40020800

08009b90 <__errno>:
 8009b90:	4b01      	ldr	r3, [pc, #4]	; (8009b98 <__errno+0x8>)
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	2000002c 	.word	0x2000002c

08009b9c <__libc_init_array>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	4d0d      	ldr	r5, [pc, #52]	; (8009bd4 <__libc_init_array+0x38>)
 8009ba0:	4c0d      	ldr	r4, [pc, #52]	; (8009bd8 <__libc_init_array+0x3c>)
 8009ba2:	1b64      	subs	r4, r4, r5
 8009ba4:	10a4      	asrs	r4, r4, #2
 8009ba6:	2600      	movs	r6, #0
 8009ba8:	42a6      	cmp	r6, r4
 8009baa:	d109      	bne.n	8009bc0 <__libc_init_array+0x24>
 8009bac:	4d0b      	ldr	r5, [pc, #44]	; (8009bdc <__libc_init_array+0x40>)
 8009bae:	4c0c      	ldr	r4, [pc, #48]	; (8009be0 <__libc_init_array+0x44>)
 8009bb0:	f000 f92e 	bl	8009e10 <_init>
 8009bb4:	1b64      	subs	r4, r4, r5
 8009bb6:	10a4      	asrs	r4, r4, #2
 8009bb8:	2600      	movs	r6, #0
 8009bba:	42a6      	cmp	r6, r4
 8009bbc:	d105      	bne.n	8009bca <__libc_init_array+0x2e>
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc4:	4798      	blx	r3
 8009bc6:	3601      	adds	r6, #1
 8009bc8:	e7ee      	b.n	8009ba8 <__libc_init_array+0xc>
 8009bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bce:	4798      	blx	r3
 8009bd0:	3601      	adds	r6, #1
 8009bd2:	e7f2      	b.n	8009bba <__libc_init_array+0x1e>
 8009bd4:	08009e4c 	.word	0x08009e4c
 8009bd8:	08009e4c 	.word	0x08009e4c
 8009bdc:	08009e4c 	.word	0x08009e4c
 8009be0:	08009e50 	.word	0x08009e50

08009be4 <malloc>:
 8009be4:	4b02      	ldr	r3, [pc, #8]	; (8009bf0 <malloc+0xc>)
 8009be6:	4601      	mov	r1, r0
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	f000 b87f 	b.w	8009cec <_malloc_r>
 8009bee:	bf00      	nop
 8009bf0:	2000002c 	.word	0x2000002c

08009bf4 <free>:
 8009bf4:	4b02      	ldr	r3, [pc, #8]	; (8009c00 <free+0xc>)
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	6818      	ldr	r0, [r3, #0]
 8009bfa:	f000 b80b 	b.w	8009c14 <_free_r>
 8009bfe:	bf00      	nop
 8009c00:	2000002c 	.word	0x2000002c

08009c04 <memset>:
 8009c04:	4402      	add	r2, r0
 8009c06:	4603      	mov	r3, r0
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d100      	bne.n	8009c0e <memset+0xa>
 8009c0c:	4770      	bx	lr
 8009c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c12:	e7f9      	b.n	8009c08 <memset+0x4>

08009c14 <_free_r>:
 8009c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c16:	2900      	cmp	r1, #0
 8009c18:	d044      	beq.n	8009ca4 <_free_r+0x90>
 8009c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c1e:	9001      	str	r0, [sp, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f1a1 0404 	sub.w	r4, r1, #4
 8009c26:	bfb8      	it	lt
 8009c28:	18e4      	addlt	r4, r4, r3
 8009c2a:	f000 f8e3 	bl	8009df4 <__malloc_lock>
 8009c2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <_free_r+0x94>)
 8009c30:	9801      	ldr	r0, [sp, #4]
 8009c32:	6813      	ldr	r3, [r2, #0]
 8009c34:	b933      	cbnz	r3, 8009c44 <_free_r+0x30>
 8009c36:	6063      	str	r3, [r4, #4]
 8009c38:	6014      	str	r4, [r2, #0]
 8009c3a:	b003      	add	sp, #12
 8009c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c40:	f000 b8de 	b.w	8009e00 <__malloc_unlock>
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	d908      	bls.n	8009c5a <_free_r+0x46>
 8009c48:	6825      	ldr	r5, [r4, #0]
 8009c4a:	1961      	adds	r1, r4, r5
 8009c4c:	428b      	cmp	r3, r1
 8009c4e:	bf01      	itttt	eq
 8009c50:	6819      	ldreq	r1, [r3, #0]
 8009c52:	685b      	ldreq	r3, [r3, #4]
 8009c54:	1949      	addeq	r1, r1, r5
 8009c56:	6021      	streq	r1, [r4, #0]
 8009c58:	e7ed      	b.n	8009c36 <_free_r+0x22>
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	b10b      	cbz	r3, 8009c64 <_free_r+0x50>
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	d9fa      	bls.n	8009c5a <_free_r+0x46>
 8009c64:	6811      	ldr	r1, [r2, #0]
 8009c66:	1855      	adds	r5, r2, r1
 8009c68:	42a5      	cmp	r5, r4
 8009c6a:	d10b      	bne.n	8009c84 <_free_r+0x70>
 8009c6c:	6824      	ldr	r4, [r4, #0]
 8009c6e:	4421      	add	r1, r4
 8009c70:	1854      	adds	r4, r2, r1
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	6011      	str	r1, [r2, #0]
 8009c76:	d1e0      	bne.n	8009c3a <_free_r+0x26>
 8009c78:	681c      	ldr	r4, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	6053      	str	r3, [r2, #4]
 8009c7e:	4421      	add	r1, r4
 8009c80:	6011      	str	r1, [r2, #0]
 8009c82:	e7da      	b.n	8009c3a <_free_r+0x26>
 8009c84:	d902      	bls.n	8009c8c <_free_r+0x78>
 8009c86:	230c      	movs	r3, #12
 8009c88:	6003      	str	r3, [r0, #0]
 8009c8a:	e7d6      	b.n	8009c3a <_free_r+0x26>
 8009c8c:	6825      	ldr	r5, [r4, #0]
 8009c8e:	1961      	adds	r1, r4, r5
 8009c90:	428b      	cmp	r3, r1
 8009c92:	bf04      	itt	eq
 8009c94:	6819      	ldreq	r1, [r3, #0]
 8009c96:	685b      	ldreq	r3, [r3, #4]
 8009c98:	6063      	str	r3, [r4, #4]
 8009c9a:	bf04      	itt	eq
 8009c9c:	1949      	addeq	r1, r1, r5
 8009c9e:	6021      	streq	r1, [r4, #0]
 8009ca0:	6054      	str	r4, [r2, #4]
 8009ca2:	e7ca      	b.n	8009c3a <_free_r+0x26>
 8009ca4:	b003      	add	sp, #12
 8009ca6:	bd30      	pop	{r4, r5, pc}
 8009ca8:	2000095c 	.word	0x2000095c

08009cac <sbrk_aligned>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	4e0e      	ldr	r6, [pc, #56]	; (8009ce8 <sbrk_aligned+0x3c>)
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	6831      	ldr	r1, [r6, #0]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	b911      	cbnz	r1, 8009cbe <sbrk_aligned+0x12>
 8009cb8:	f000 f88c 	bl	8009dd4 <_sbrk_r>
 8009cbc:	6030      	str	r0, [r6, #0]
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f000 f887 	bl	8009dd4 <_sbrk_r>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	d00a      	beq.n	8009ce0 <sbrk_aligned+0x34>
 8009cca:	1cc4      	adds	r4, r0, #3
 8009ccc:	f024 0403 	bic.w	r4, r4, #3
 8009cd0:	42a0      	cmp	r0, r4
 8009cd2:	d007      	beq.n	8009ce4 <sbrk_aligned+0x38>
 8009cd4:	1a21      	subs	r1, r4, r0
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 f87c 	bl	8009dd4 <_sbrk_r>
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d101      	bne.n	8009ce4 <sbrk_aligned+0x38>
 8009ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	20000960 	.word	0x20000960

08009cec <_malloc_r>:
 8009cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	1ccd      	adds	r5, r1, #3
 8009cf2:	f025 0503 	bic.w	r5, r5, #3
 8009cf6:	3508      	adds	r5, #8
 8009cf8:	2d0c      	cmp	r5, #12
 8009cfa:	bf38      	it	cc
 8009cfc:	250c      	movcc	r5, #12
 8009cfe:	2d00      	cmp	r5, #0
 8009d00:	4607      	mov	r7, r0
 8009d02:	db01      	blt.n	8009d08 <_malloc_r+0x1c>
 8009d04:	42a9      	cmp	r1, r5
 8009d06:	d905      	bls.n	8009d14 <_malloc_r+0x28>
 8009d08:	230c      	movs	r3, #12
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	2600      	movs	r6, #0
 8009d0e:	4630      	mov	r0, r6
 8009d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d14:	4e2e      	ldr	r6, [pc, #184]	; (8009dd0 <_malloc_r+0xe4>)
 8009d16:	f000 f86d 	bl	8009df4 <__malloc_lock>
 8009d1a:	6833      	ldr	r3, [r6, #0]
 8009d1c:	461c      	mov	r4, r3
 8009d1e:	bb34      	cbnz	r4, 8009d6e <_malloc_r+0x82>
 8009d20:	4629      	mov	r1, r5
 8009d22:	4638      	mov	r0, r7
 8009d24:	f7ff ffc2 	bl	8009cac <sbrk_aligned>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	d14d      	bne.n	8009dca <_malloc_r+0xde>
 8009d2e:	6834      	ldr	r4, [r6, #0]
 8009d30:	4626      	mov	r6, r4
 8009d32:	2e00      	cmp	r6, #0
 8009d34:	d140      	bne.n	8009db8 <_malloc_r+0xcc>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	eb04 0803 	add.w	r8, r4, r3
 8009d40:	f000 f848 	bl	8009dd4 <_sbrk_r>
 8009d44:	4580      	cmp	r8, r0
 8009d46:	d13a      	bne.n	8009dbe <_malloc_r+0xd2>
 8009d48:	6821      	ldr	r1, [r4, #0]
 8009d4a:	3503      	adds	r5, #3
 8009d4c:	1a6d      	subs	r5, r5, r1
 8009d4e:	f025 0503 	bic.w	r5, r5, #3
 8009d52:	3508      	adds	r5, #8
 8009d54:	2d0c      	cmp	r5, #12
 8009d56:	bf38      	it	cc
 8009d58:	250c      	movcc	r5, #12
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	f7ff ffa5 	bl	8009cac <sbrk_aligned>
 8009d62:	3001      	adds	r0, #1
 8009d64:	d02b      	beq.n	8009dbe <_malloc_r+0xd2>
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	442b      	add	r3, r5
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	e00e      	b.n	8009d8c <_malloc_r+0xa0>
 8009d6e:	6822      	ldr	r2, [r4, #0]
 8009d70:	1b52      	subs	r2, r2, r5
 8009d72:	d41e      	bmi.n	8009db2 <_malloc_r+0xc6>
 8009d74:	2a0b      	cmp	r2, #11
 8009d76:	d916      	bls.n	8009da6 <_malloc_r+0xba>
 8009d78:	1961      	adds	r1, r4, r5
 8009d7a:	42a3      	cmp	r3, r4
 8009d7c:	6025      	str	r5, [r4, #0]
 8009d7e:	bf18      	it	ne
 8009d80:	6059      	strne	r1, [r3, #4]
 8009d82:	6863      	ldr	r3, [r4, #4]
 8009d84:	bf08      	it	eq
 8009d86:	6031      	streq	r1, [r6, #0]
 8009d88:	5162      	str	r2, [r4, r5]
 8009d8a:	604b      	str	r3, [r1, #4]
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f104 060b 	add.w	r6, r4, #11
 8009d92:	f000 f835 	bl	8009e00 <__malloc_unlock>
 8009d96:	f026 0607 	bic.w	r6, r6, #7
 8009d9a:	1d23      	adds	r3, r4, #4
 8009d9c:	1af2      	subs	r2, r6, r3
 8009d9e:	d0b6      	beq.n	8009d0e <_malloc_r+0x22>
 8009da0:	1b9b      	subs	r3, r3, r6
 8009da2:	50a3      	str	r3, [r4, r2]
 8009da4:	e7b3      	b.n	8009d0e <_malloc_r+0x22>
 8009da6:	6862      	ldr	r2, [r4, #4]
 8009da8:	42a3      	cmp	r3, r4
 8009daa:	bf0c      	ite	eq
 8009dac:	6032      	streq	r2, [r6, #0]
 8009dae:	605a      	strne	r2, [r3, #4]
 8009db0:	e7ec      	b.n	8009d8c <_malloc_r+0xa0>
 8009db2:	4623      	mov	r3, r4
 8009db4:	6864      	ldr	r4, [r4, #4]
 8009db6:	e7b2      	b.n	8009d1e <_malloc_r+0x32>
 8009db8:	4634      	mov	r4, r6
 8009dba:	6876      	ldr	r6, [r6, #4]
 8009dbc:	e7b9      	b.n	8009d32 <_malloc_r+0x46>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	603b      	str	r3, [r7, #0]
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f000 f81c 	bl	8009e00 <__malloc_unlock>
 8009dc8:	e7a1      	b.n	8009d0e <_malloc_r+0x22>
 8009dca:	6025      	str	r5, [r4, #0]
 8009dcc:	e7de      	b.n	8009d8c <_malloc_r+0xa0>
 8009dce:	bf00      	nop
 8009dd0:	2000095c 	.word	0x2000095c

08009dd4 <_sbrk_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4d06      	ldr	r5, [pc, #24]	; (8009df0 <_sbrk_r+0x1c>)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4604      	mov	r4, r0
 8009ddc:	4608      	mov	r0, r1
 8009dde:	602b      	str	r3, [r5, #0]
 8009de0:	f7f7 f92a 	bl	8001038 <_sbrk>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_sbrk_r+0x1a>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_sbrk_r+0x1a>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	20000964 	.word	0x20000964

08009df4 <__malloc_lock>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__malloc_lock+0x8>)
 8009df6:	f000 b809 	b.w	8009e0c <__retarget_lock_acquire_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	20000968 	.word	0x20000968

08009e00 <__malloc_unlock>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__malloc_unlock+0x8>)
 8009e02:	f000 b804 	b.w	8009e0e <__retarget_lock_release_recursive>
 8009e06:	bf00      	nop
 8009e08:	20000968 	.word	0x20000968

08009e0c <__retarget_lock_acquire_recursive>:
 8009e0c:	4770      	bx	lr

08009e0e <__retarget_lock_release_recursive>:
 8009e0e:	4770      	bx	lr

08009e10 <_init>:
 8009e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e12:	bf00      	nop
 8009e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e16:	bc08      	pop	{r3}
 8009e18:	469e      	mov	lr, r3
 8009e1a:	4770      	bx	lr

08009e1c <_fini>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr
