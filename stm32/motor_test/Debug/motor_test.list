
motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e8c  08008e8c  00018e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea8  08008ea8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb0  08008eb0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000864  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f8  200008f8  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a61e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c53  00000000  00000000  0003a6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  0003f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245b5  00000000  00000000  00040e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c45b  00000000  00000000  0006544d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3bb7  00000000  00000000  000818a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015545f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006198  00000000  00000000  001554b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e74 	.word	0x08008e74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008e74 	.word	0x08008e74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fdf4 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f854 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9d0 	bl	800087c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f8ba 	bl	8000654 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8e6 	bl	80006b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f914 	bl	8000710 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 f87c 	bl	80085e4 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004ec:	f000 f946 	bl	800077c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2110      	movs	r1, #16
 80004f4:	481e      	ldr	r0, [pc, #120]	; (8000570 <main+0xa4>)
 80004f6:	f001 f93d 	bl	8001774 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2120      	movs	r1, #32
 80004fe:	481c      	ldr	r0, [pc, #112]	; (8000570 <main+0xa4>)
 8000500:	f001 f938 	bl	8001774 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	4819      	ldr	r0, [pc, #100]	; (8000570 <main+0xa4>)
 800050a:	f001 f933 	bl	8001774 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	4817      	ldr	r0, [pc, #92]	; (8000570 <main+0xa4>)
 8000514:	f001 f92e 	bl	8001774 <HAL_GPIO_WritePin>

  TIM2->CCR1 = 950;
 8000518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800051c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 950;
 8000522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000526:	f240 32b6 	movw	r2, #950	; 0x3b6
 800052a:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800052c:	2100      	movs	r1, #0
 800052e:	4811      	ldr	r0, [pc, #68]	; (8000574 <main+0xa8>)
 8000530:	f004 fa36 	bl	80049a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000534:	2104      	movs	r1, #4
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <main+0xa8>)
 8000538:	f004 fa32 	bl	80049a0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800053c:	f008 f878 	bl	8008630 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000540:	2101      	movs	r1, #1
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <main+0xac>)
 8000544:	f001 f8fe 	bl	8001744 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0xb0>)
 800054e:	601a      	str	r2, [r3, #0]

    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000550:	2101      	movs	r1, #1
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0xac>)
 8000554:	f001 f8f6 	bl	8001744 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d1ee      	bne.n	800053c <main+0x70>
    	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <main+0xa8>)
 8000562:	f004 fae5 	bl	8004b30 <HAL_TIM_PWM_Stop>
    	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000566:	2104      	movs	r1, #4
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <main+0xa8>)
 800056a:	f004 fae1 	bl	8004b30 <HAL_TIM_PWM_Stop>
    MX_USB_HOST_Process();
 800056e:	e7e5      	b.n	800053c <main+0x70>
 8000570:	40021000 	.word	0x40021000
 8000574:	200001a4 	.word	0x200001a4
 8000578:	40020000 	.word	0x40020000
 800057c:	200001fc 	.word	0x200001fc

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f008 fb6a 	bl	8008c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fad4 	bl	8003bb4 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000612:	f000 fb0b 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2105      	movs	r1, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fd35 	bl	80040a4 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000640:	f000 faf4 	bl	8000c2c <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f002 fcab 	bl	8002fec <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 fac6 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000b0 	.word	0x200000b0
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_I2S3_Init+0x54>)
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <MX_I2S3_Init+0x58>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_I2S3_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_I2S3_Init+0x54>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_I2S3_Init+0x54>)
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <MX_I2S3_Init+0x5c>)
 80006da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2S3_Init+0x54>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_I2S3_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_I2S3_Init+0x54>)
 80006f0:	f002 fdc0 	bl	8003274 <HAL_I2S_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006fa:	f000 fa97 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000104 	.word	0x20000104
 8000708:	40003c00 	.word	0x40003c00
 800070c:	00017700 	.word	0x00017700

08000710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_SPI1_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_SPI1_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI1_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_SPI1_Init+0x64>)
 8000762:	f003 ffeb 	bl	800473c <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 fa5e 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000014c 	.word	0x2000014c
 8000778:	40013000 	.word	0x40013000

0800077c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	; 0x38
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <MX_TIM2_Init+0xfc>)
 80007ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_TIM2_Init+0xfc>)
 80007b6:	2253      	movs	r2, #83	; 0x53
 80007b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <MX_TIM2_Init+0xfc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_TIM2_Init+0xfc>)
 80007c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_TIM2_Init+0xfc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <MX_TIM2_Init+0xfc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d4:	4828      	ldr	r0, [pc, #160]	; (8000878 <MX_TIM2_Init+0xfc>)
 80007d6:	f004 f83a 	bl	800484e <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007e0:	f000 fa24 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4821      	ldr	r0, [pc, #132]	; (8000878 <MX_TIM2_Init+0xfc>)
 80007f2:	f004 facf 	bl	8004d94 <HAL_TIM_ConfigClockSource>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007fc:	f000 fa16 	bl	8000c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000800:	481d      	ldr	r0, [pc, #116]	; (8000878 <MX_TIM2_Init+0xfc>)
 8000802:	f004 f873 	bl	80048ec <HAL_TIM_PWM_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800080c:	f000 fa0e 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4619      	mov	r1, r3
 800081e:	4816      	ldr	r0, [pc, #88]	; (8000878 <MX_TIM2_Init+0xfc>)
 8000820:	f004 fe90 	bl	8005544 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800082a:	f000 f9ff 	bl	8000c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	; 0x60
 8000830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_TIM2_Init+0xfc>)
 8000846:	f004 f9e3 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000850:	f000 f9ec 	bl	8000c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2204      	movs	r2, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <MX_TIM2_Init+0xfc>)
 800085c:	f004 f9d8 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000866:	f000 f9e1 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <MX_TIM2_Init+0xfc>)
 800086c:	f000 fb3c 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 8000870:	bf00      	nop
 8000872:	3738      	adds	r7, #56	; 0x38
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200001a4 	.word	0x200001a4

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <MX_GPIO_Init+0x228>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a82      	ldr	r2, [pc, #520]	; (8000aa4 <MX_GPIO_Init+0x228>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b80      	ldr	r3, [pc, #512]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b7c      	ldr	r3, [pc, #496]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a7b      	ldr	r2, [pc, #492]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b79      	ldr	r3, [pc, #484]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b75      	ldr	r3, [pc, #468]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a74      	ldr	r2, [pc, #464]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b72      	ldr	r3, [pc, #456]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b6e      	ldr	r3, [pc, #440]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a6d      	ldr	r2, [pc, #436]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b6b      	ldr	r3, [pc, #428]	; (8000aa4 <MX_GPIO_Init+0x228>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b67      	ldr	r3, [pc, #412]	; (8000aa4 <MX_GPIO_Init+0x228>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a66      	ldr	r2, [pc, #408]	; (8000aa4 <MX_GPIO_Init+0x228>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b64      	ldr	r3, [pc, #400]	; (8000aa4 <MX_GPIO_Init+0x228>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b60      	ldr	r3, [pc, #384]	; (8000aa4 <MX_GPIO_Init+0x228>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a5f      	ldr	r2, [pc, #380]	; (8000aa4 <MX_GPIO_Init+0x228>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b5d      	ldr	r3, [pc, #372]	; (8000aa4 <MX_GPIO_Init+0x228>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800093a:	2200      	movs	r2, #0
 800093c:	21f8      	movs	r1, #248	; 0xf8
 800093e:	485a      	ldr	r0, [pc, #360]	; (8000aa8 <MX_GPIO_Init+0x22c>)
 8000940:	f000 ff18 	bl	8001774 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	4858      	ldr	r0, [pc, #352]	; (8000aac <MX_GPIO_Init+0x230>)
 800094a:	f000 ff13 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094e:	2200      	movs	r2, #0
 8000950:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000954:	4856      	ldr	r0, [pc, #344]	; (8000ab0 <MX_GPIO_Init+0x234>)
 8000956:	f000 ff0d 	bl	8001774 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE4 PE5 PE6
                           PE7 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800095a:	23f8      	movs	r3, #248	; 0xf8
 800095c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	484d      	ldr	r0, [pc, #308]	; (8000aa8 <MX_GPIO_Init+0x22c>)
 8000972:	f000 fd4b 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000976:	2301      	movs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4847      	ldr	r0, [pc, #284]	; (8000aac <MX_GPIO_Init+0x230>)
 800098e:	f000 fd3d 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000992:	2308      	movs	r3, #8
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a2:	2305      	movs	r3, #5
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	483f      	ldr	r0, [pc, #252]	; (8000aac <MX_GPIO_Init+0x230>)
 80009ae:	f000 fd2d 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	483b      	ldr	r0, [pc, #236]	; (8000ab4 <MX_GPIO_Init+0x238>)
 80009c6:	f000 fd21 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009ca:	2304      	movs	r3, #4
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <MX_GPIO_Init+0x23c>)
 80009de:	f000 fd15 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f4:	2305      	movs	r3, #5
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	482e      	ldr	r0, [pc, #184]	; (8000ab8 <MX_GPIO_Init+0x23c>)
 8000a00:	f000 fd04 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000a04:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a0a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a10:	2302      	movs	r3, #2
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0x23c>)
 8000a1c:	f000 fcf6 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a20:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0x23c>)
 8000a36:	f000 fce9 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a3e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <MX_GPIO_Init+0x234>)
 8000a54:	f000 fcda 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <MX_GPIO_Init+0x234>)
 8000a6c:	f000 fcce 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_GPIO_Init+0x22c>)
 8000a86:	f000 fcc1 	bl	800140c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	; 0x28
 8000a90:	f000 fc85 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	; 0x28
 8000a96:	f000 fc9e 	bl	80013d6 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	; 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_12){
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000acc:	d14b      	bne.n	8000b66 <HAL_GPIO_EXTI_Callback+0xaa>
		//pb12 rising edge
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){
 8000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad2:	4850      	ldr	r0, [pc, #320]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000ad4:	f000 fe36 	bl	8001744 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_EXTI_Callback+0x4a>
			//pb13 HIGH and pb12 rising edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)){
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	484c      	ldr	r0, [pc, #304]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000ae4:	f000 fe2e 	bl	8001744 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <HAL_GPIO_EXTI_Callback+0x3e>
				wheel_1_Step--;
 8000aee:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	4a48      	ldr	r2, [pc, #288]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	e018      	b.n	8000b2c <HAL_GPIO_EXTI_Callback+0x70>
			}
			//pb13 LOW and pb12 rising edge
			else{
				wheel_1_Step++;
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	4a45      	ldr	r2, [pc, #276]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e012      	b.n	8000b2c <HAL_GPIO_EXTI_Callback+0x70>
			}
		}
		//pb12 falling edge
		else{
			//pb13 HIGH and pb12 falling edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)){
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	4842      	ldr	r0, [pc, #264]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000b0c:	f000 fe1a 	bl	8001744 <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d005      	beq.n	8000b22 <HAL_GPIO_EXTI_Callback+0x66>
				wheel_1_Step++;
 8000b16:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	4a3e      	ldr	r2, [pc, #248]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e004      	b.n	8000b2c <HAL_GPIO_EXTI_Callback+0x70>
			}
			//pb13 LOW and pb12 falling edge
			else{
				wheel_1_Step--;
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	4a3b      	ldr	r2, [pc, #236]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b2a:	6013      	str	r3, [r2, #0]
			}
		}

		if(wheel_1_Step > step_Per_Round){
 8000b2c:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x160>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dd08      	ble.n	8000b4a <HAL_GPIO_EXTI_Callback+0x8e>
			wheel_1_Step = 0;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
			wheel_1_Round++;
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a36      	ldr	r2, [pc, #216]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000b46:	6013      	str	r3, [r2, #0]
		else if(wheel_1_Step < 0){
			wheel_1_Step = step_Per_Round;
			wheel_1_Round--;
		}

		return;
 8000b48:	e05d      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x14a>
		else if(wheel_1_Step < 0){
 8000b4a:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	da59      	bge.n	8000c06 <HAL_GPIO_EXTI_Callback+0x14a>
			wheel_1_Step = step_Per_Round;
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x160>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b58:	6013      	str	r3, [r2, #0]
			wheel_1_Round--;
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x164>)
 8000b62:	6013      	str	r3, [r2, #0]
		return;
 8000b64:	e04f      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x14a>
	}
	else if(GPIO_PIN == GPIO_PIN_14){
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b6c:	d14e      	bne.n	8000c0c <HAL_GPIO_EXTI_Callback+0x150>
		//pb14 rising edge
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 8000b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b72:	4828      	ldr	r0, [pc, #160]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000b74:	f000 fde6 	bl	8001744 <HAL_GPIO_ReadPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d013      	beq.n	8000ba6 <HAL_GPIO_EXTI_Callback+0xea>
			//pb15 HIGH and pb14 rising edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8000b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b82:	4824      	ldr	r0, [pc, #144]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000b84:	f000 fdde 	bl	8001744 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <HAL_GPIO_EXTI_Callback+0xde>
				wheel_2_Step--;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	4a23      	ldr	r2, [pc, #140]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e018      	b.n	8000bcc <HAL_GPIO_EXTI_Callback+0x110>
			}
			//pb15 LOW and pb14 rising edge
			else{
				wheel_2_Step++;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e012      	b.n	8000bcc <HAL_GPIO_EXTI_Callback+0x110>
			}
		}
		//pb12 falling edge
		else{
			//pb15 HIGH and pb14 falling edge
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8000ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000baa:	481a      	ldr	r0, [pc, #104]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x158>)
 8000bac:	f000 fdca 	bl	8001744 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d005      	beq.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x106>
				wheel_2_Step++;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e004      	b.n	8000bcc <HAL_GPIO_EXTI_Callback+0x110>
			}
			//pb15 LOW and pb14 falling edge
			else{
				wheel_2_Step--;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000bca:	6013      	str	r3, [r2, #0]
			}
		}

		if(wheel_2_Step > step_Per_Round){
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x160>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dd08      	ble.n	8000bea <HAL_GPIO_EXTI_Callback+0x12e>
			wheel_2_Step = 0;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
			wheel_2_Round++;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000be6:	6013      	str	r3, [r2, #0]
		else if(wheel_2_Step < 0){
			wheel_2_Step = step_Per_Round;
			wheel_2_Round--;
		}

		return;
 8000be8:	e00f      	b.n	8000c0a <HAL_GPIO_EXTI_Callback+0x14e>
		else if(wheel_2_Step < 0){
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da0b      	bge.n	8000c0a <HAL_GPIO_EXTI_Callback+0x14e>
			wheel_2_Step = step_Per_Round;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x160>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x168>)
 8000bf8:	6013      	str	r3, [r2, #0]
			wheel_2_Round--;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000c02:	6013      	str	r3, [r2, #0]
		return;
 8000c04:	e001      	b.n	8000c0a <HAL_GPIO_EXTI_Callback+0x14e>
		return;
 8000c06:	bf00      	nop
 8000c08:	e000      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x150>
		return;
 8000c0a:	bf00      	nop
	}
}
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40020400 	.word	0x40020400
 8000c18:	200001ec 	.word	0x200001ec
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	200001f4 	.word	0x200001f4
 8000c24:	200001f0 	.word	0x200001f0
 8000c28:	200001f8 	.word	0x200001f8

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c76:	2007      	movs	r0, #7
 8000c78:	f000 fb86 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_I2C_MspInit+0x84>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12c      	bne.n	8000d04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ccc:	2312      	movs	r3, #18
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <HAL_I2C_MspInit+0x8c>)
 8000ce4:	f000 fb92 	bl	800140c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400

08000d18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <HAL_I2S_MspInit+0xf0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d15a      	bne.n	8000dfe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d4c:	23c0      	movs	r3, #192	; 0xc0
 8000d4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 fbaf 	bl	80044bc <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d64:	f7ff ff62 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <HAL_I2S_MspInit+0xf8>)
 8000dd8:	f000 fb18 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ddc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dee:	2306      	movs	r3, #6
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <HAL_I2S_MspInit+0xfc>)
 8000dfa:	f000 fb07 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3738      	adds	r7, #56	; 0x38
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40003c00 	.word	0x40003c00
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020800 	.word	0x40020800

08000e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_SPI_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12b      	bne.n	8000e92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e72:	23e0      	movs	r3, #224	; 0xe0
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e82:	2305      	movs	r3, #5
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e8e:	f000 fabd 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40013000 	.word	0x40013000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb8:	d10d      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f08:	d11e      	bne.n	8000f48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_TIM_MspPostInit+0x68>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_TIM_MspPostInit+0x68>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_TIM_MspPostInit+0x68>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000f26:	f248 0302 	movw	r3, #32770	; 0x8002
 8000f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	4804      	ldr	r0, [pc, #16]	; (8000f54 <HAL_TIM_MspPostInit+0x6c>)
 8000f44:	f000 fa62 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f8dc 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000fb0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000fb4:	f000 fbf8 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000fb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fbc:	f000 fbf4 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <OTG_FS_IRQHandler+0x10>)
 8000fca:	f000 fe6f 	bl	8001cac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200005e4 	.word	0x200005e4

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f007 fdf4 	bl	8008bf4 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20020000 	.word	0x20020000
 8001038:	00000400 	.word	0x00000400
 800103c:	20000200 	.word	0x20000200
 8001040:	200008f8 	.word	0x200008f8

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd7 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f007 fdb3 	bl	8008c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fa17 	bl	80004cc <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80010ac:	08008eb8 	.word	0x08008eb8
  ldr r2, =_sbss
 80010b0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80010b4:	200008f8 	.word	0x200008f8

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f94f 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fda2 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f967 	bl	80013f2 <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113c:	f000 f92f 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000004 	.word	0x20000004
 8001158:	2000000c 	.word	0x2000000c
 800115c:	20000008 	.word	0x20000008

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000204 	.word	0x20000204

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000204 	.word	0x20000204

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000000c 	.word	0x2000000c

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff29 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff3e 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff8e 	bl	80012dc <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff31 	bl	800124c <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e16b      	b.n	8001700 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 815a 	bne.w	80016fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d005      	beq.n	800145e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145a:	2b02      	cmp	r3, #2
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d123      	bne.n	8001550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80b4 	beq.w	80016fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b60      	ldr	r3, [pc, #384]	; (8001718 <HAL_GPIO_Init+0x30c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a5f      	ldr	r2, [pc, #380]	; (8001718 <HAL_GPIO_Init+0x30c>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <HAL_GPIO_Init+0x30c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ae:	4a5b      	ldr	r2, [pc, #364]	; (800171c <HAL_GPIO_Init+0x310>)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a52      	ldr	r2, [pc, #328]	; (8001720 <HAL_GPIO_Init+0x314>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d02b      	beq.n	8001632 <HAL_GPIO_Init+0x226>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a51      	ldr	r2, [pc, #324]	; (8001724 <HAL_GPIO_Init+0x318>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d025      	beq.n	800162e <HAL_GPIO_Init+0x222>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a50      	ldr	r2, [pc, #320]	; (8001728 <HAL_GPIO_Init+0x31c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01f      	beq.n	800162a <HAL_GPIO_Init+0x21e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4f      	ldr	r2, [pc, #316]	; (800172c <HAL_GPIO_Init+0x320>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d019      	beq.n	8001626 <HAL_GPIO_Init+0x21a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4e      	ldr	r2, [pc, #312]	; (8001730 <HAL_GPIO_Init+0x324>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0x216>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4d      	ldr	r2, [pc, #308]	; (8001734 <HAL_GPIO_Init+0x328>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00d      	beq.n	800161e <HAL_GPIO_Init+0x212>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4c      	ldr	r2, [pc, #304]	; (8001738 <HAL_GPIO_Init+0x32c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d007      	beq.n	800161a <HAL_GPIO_Init+0x20e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4b      	ldr	r2, [pc, #300]	; (800173c <HAL_GPIO_Init+0x330>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_GPIO_Init+0x20a>
 8001612:	2307      	movs	r3, #7
 8001614:	e00e      	b.n	8001634 <HAL_GPIO_Init+0x228>
 8001616:	2308      	movs	r3, #8
 8001618:	e00c      	b.n	8001634 <HAL_GPIO_Init+0x228>
 800161a:	2306      	movs	r3, #6
 800161c:	e00a      	b.n	8001634 <HAL_GPIO_Init+0x228>
 800161e:	2305      	movs	r3, #5
 8001620:	e008      	b.n	8001634 <HAL_GPIO_Init+0x228>
 8001622:	2304      	movs	r3, #4
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x228>
 8001626:	2303      	movs	r3, #3
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x228>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x228>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x228>
 8001632:	2300      	movs	r3, #0
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001644:	4935      	ldr	r1, [pc, #212]	; (800171c <HAL_GPIO_Init+0x310>)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_GPIO_Init+0x334>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <HAL_GPIO_Init+0x334>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_GPIO_Init+0x334>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a0:	4a27      	ldr	r2, [pc, #156]	; (8001740 <HAL_GPIO_Init+0x334>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_GPIO_Init+0x334>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_GPIO_Init+0x334>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_GPIO_Init+0x334>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_GPIO_Init+0x334>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2b0f      	cmp	r3, #15
 8001704:	f67f ae90 	bls.w	8001428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40013800 	.word	0x40013800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40021400 	.word	0x40021400
 8001738:	40021800 	.word	0x40021800
 800173c:	40021c00 	.word	0x40021c00
 8001740:	40013c00 	.word	0x40013c00

08001744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001790:	e003      	b.n	800179a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	041a      	lsls	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	619a      	str	r2, [r3, #24]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f978 	bl	8000abc <HAL_GPIO_EXTI_Callback>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	b08f      	sub	sp, #60	; 0x3c
 80017dc:	af0a      	add	r7, sp, #40	; 0x28
 80017de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e054      	b.n	8001894 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d106      	bne.n	800180a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f006 ff4b 	bl	80086a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f003 ff79 	bl	8005720 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	687e      	ldr	r6, [r7, #4]
 8001836:	466d      	mov	r5, sp
 8001838:	f106 0410 	add.w	r4, r6, #16
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001844:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001848:	e885 0003 	stmia.w	r5, {r0, r1}
 800184c:	1d33      	adds	r3, r6, #4
 800184e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f003 fef3 	bl	800563c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f003 ff70 	bl	8005742 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	687e      	ldr	r6, [r7, #4]
 800186a:	466d      	mov	r5, sp
 800186c:	f106 0410 	add.w	r4, r6, #16
 8001870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001878:	e894 0003 	ldmia.w	r4, {r0, r1}
 800187c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001880:	1d33      	adds	r3, r6, #4
 8001882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001884:	6838      	ldr	r0, [r7, #0]
 8001886:	f004 f8f9 	bl	8005a7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800189c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af04      	add	r7, sp, #16
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	70fb      	strb	r3, [r7, #3]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70bb      	strb	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_HCD_HC_Init+0x28>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e076      	b.n	80019b2 <HAL_HCD_HC_Init+0x116>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	333d      	adds	r3, #61	; 0x3d
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3338      	adds	r3, #56	; 0x38
 80018ec:	787a      	ldrb	r2, [r7, #1]
 80018ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3340      	adds	r3, #64	; 0x40
 80018fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001900:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3339      	adds	r3, #57	; 0x39
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	333f      	adds	r3, #63	; 0x3f
 8001922:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	78ba      	ldrb	r2, [r7, #2]
 800192c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001930:	b2d0      	uxtb	r0, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	212c      	movs	r1, #44	; 0x2c
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	4413      	add	r3, r2
 800193c:	333a      	adds	r3, #58	; 0x3a
 800193e:	4602      	mov	r2, r0
 8001940:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001942:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001946:	2b00      	cmp	r3, #0
 8001948:	da09      	bge.n	800195e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	333b      	adds	r3, #59	; 0x3b
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e008      	b.n	8001970 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	333b      	adds	r3, #59	; 0x3b
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	333c      	adds	r3, #60	; 0x3c
 800197e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001982:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	787c      	ldrb	r4, [r7, #1]
 800198a:	78ba      	ldrb	r2, [r7, #2]
 800198c:	78f9      	ldrb	r1, [r7, #3]
 800198e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	f897 3020 	ldrb.w	r3, [r7, #32]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4623      	mov	r3, r4
 80019a0:	f004 f9f2 	bl	8005d88 <USB_HC_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd90      	pop	{r4, r7, pc}

080019ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_HCD_HC_Halt+0x1e>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e00f      	b.n	80019f8 <HAL_HCD_HC_Halt+0x3e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 fc42 	bl	8006272 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4603      	mov	r3, r0
 8001a10:	70fb      	strb	r3, [r7, #3]
 8001a12:	460b      	mov	r3, r1
 8001a14:	70bb      	strb	r3, [r7, #2]
 8001a16:	4613      	mov	r3, r2
 8001a18:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	333b      	adds	r3, #59	; 0x3b
 8001a28:	78ba      	ldrb	r2, [r7, #2]
 8001a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	333f      	adds	r3, #63	; 0x3f
 8001a3a:	787a      	ldrb	r2, [r7, #1]
 8001a3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a3e:	7c3b      	ldrb	r3, [r7, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d112      	bne.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3342      	adds	r3, #66	; 0x42
 8001a52:	2203      	movs	r2, #3
 8001a54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	212c      	movs	r1, #44	; 0x2c
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	333d      	adds	r3, #61	; 0x3d
 8001a64:	7f3a      	ldrb	r2, [r7, #28]
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	e008      	b.n	8001a7c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	3342      	adds	r3, #66	; 0x42
 8001a78:	2202      	movs	r2, #2
 8001a7a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	f200 80c6 	bhi.w	8001c10 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a84:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001bfd 	.word	0x08001bfd
 8001a94:	08001b01 	.word	0x08001b01
 8001a98:	08001b7f 	.word	0x08001b7f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a9c:	7c3b      	ldrb	r3, [r7, #16]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f040 80b8 	bne.w	8001c14 <HAL_HCD_HC_SubmitRequest+0x214>
 8001aa4:	78bb      	ldrb	r3, [r7, #2]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 80b4 	bne.w	8001c14 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001aac:	8b3b      	ldrh	r3, [r7, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d108      	bne.n	8001ac4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3355      	adds	r3, #85	; 0x55
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3355      	adds	r3, #85	; 0x55
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	212c      	movs	r1, #44	; 0x2c
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3342      	adds	r3, #66	; 0x42
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001aea:	e093      	b.n	8001c14 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3342      	adds	r3, #66	; 0x42
 8001afa:	2202      	movs	r2, #2
 8001afc:	701a      	strb	r2, [r3, #0]
      break;
 8001afe:	e089      	b.n	8001c14 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b00:	78bb      	ldrb	r3, [r7, #2]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11d      	bne.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	212c      	movs	r1, #44	; 0x2c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	3355      	adds	r3, #85	; 0x55
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	3342      	adds	r3, #66	; 0x42
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b2c:	e073      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3342      	adds	r3, #66	; 0x42
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]
      break;
 8001b40:	e069      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3354      	adds	r3, #84	; 0x54
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	3342      	adds	r3, #66	; 0x42
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
      break;
 8001b68:	e055      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3342      	adds	r3, #66	; 0x42
 8001b78:	2202      	movs	r2, #2
 8001b7a:	701a      	strb	r2, [r3, #0]
      break;
 8001b7c:	e04b      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b7e:	78bb      	ldrb	r3, [r7, #2]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11d      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3355      	adds	r3, #85	; 0x55
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3342      	adds	r3, #66	; 0x42
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001baa:	e034      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3342      	adds	r3, #66	; 0x42
 8001bba:	2202      	movs	r2, #2
 8001bbc:	701a      	strb	r2, [r3, #0]
      break;
 8001bbe:	e02a      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3354      	adds	r3, #84	; 0x54
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3342      	adds	r3, #66	; 0x42
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
      break;
 8001be6:	e016      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3342      	adds	r3, #66	; 0x42
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	701a      	strb	r2, [r3, #0]
      break;
 8001bfa:	e00c      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3342      	adds	r3, #66	; 0x42
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c10:	bf00      	nop
 8001c12:	e000      	b.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c14:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3344      	adds	r3, #68	; 0x44
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	8b3a      	ldrh	r2, [r7, #24]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	202c      	movs	r0, #44	; 0x2c
 8001c30:	fb00 f303 	mul.w	r3, r0, r3
 8001c34:	440b      	add	r3, r1
 8001c36:	334c      	adds	r3, #76	; 0x4c
 8001c38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3360      	adds	r3, #96	; 0x60
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	212c      	movs	r1, #44	; 0x2c
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	3350      	adds	r3, #80	; 0x50
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3339      	adds	r3, #57	; 0x39
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3361      	adds	r3, #97	; 0x61
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	222c      	movs	r2, #44	; 0x2c
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	3338      	adds	r3, #56	; 0x38
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	18d1      	adds	r1, r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f004 f996 	bl	8005fcc <USB_HC_StartXfer>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop

08001cac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fe97 	bl	80059f6 <USB_GetMode>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	f040 80f6 	bne.w	8001ebc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fe7b 	bl	80059d0 <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80ec 	beq.w	8001eba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fe72 	bl	80059d0 <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cf6:	d104      	bne.n	8001d02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fe62 	bl	80059d0 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d16:	d104      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fe52 	bl	80059d0 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d36:	d104      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fe42 	bl	80059d0 <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d103      	bne.n	8001d5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fe34 	bl	80059d0 <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d72:	d11c      	bne.n	8001dae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10f      	bne.n	8001dae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d8e:	2110      	movs	r1, #16
 8001d90:	6938      	ldr	r0, [r7, #16]
 8001d92:	f003 fd23 	bl	80057dc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d96:	6938      	ldr	r0, [r7, #16]
 8001d98:	f003 fd54 	bl	8005844 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 ff2a 	bl	8005bfc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f006 fcf7 	bl	800879c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fe0c 	bl	80059d0 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc2:	d102      	bne.n	8001dca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f001 f89e 	bl	8002f06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 fdfe 	bl	80059d0 <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d106      	bne.n	8001dec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f006 fcc0 	bl	8008764 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 fded 	bl	80059d0 <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d101      	bne.n	8001e04 <HAL_HCD_IRQHandler+0x158>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_HCD_IRQHandler+0x15a>
 8001e04:	2300      	movs	r3, #0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0210 	bic.w	r2, r2, #16
 8001e18:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 ffa1 	bl	8002d62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0210 	orr.w	r2, r2, #16
 8001e2e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fdcb 	bl	80059d0 <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e44:	d13a      	bne.n	8001ebc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fa00 	bl	8006250 <USB_HC_ReadInterrupt>
 8001e50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e025      	b.n	8001ea4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d018      	beq.n	8001e9e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e82:	d106      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8ab 	bl	8001fe6 <HCD_HC_IN_IRQHandler>
 8001e90:	e005      	b.n	8001e9e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fbf9 	bl	8002690 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3d4      	bcc.n	8001e58 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	e000      	b.n	8001ebc <HAL_HCD_IRQHandler+0x210>
      return;
 8001eba:	bf00      	nop
    }
  }
}
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_HCD_Start+0x16>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e013      	b.n	8001f00 <HAL_HCD_Start+0x3e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 feec 	bl	8005cc4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fc04 	bl	80056fe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_HCD_Stop+0x16>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e00d      	b.n	8001f3a <HAL_HCD_Stop+0x32>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 fada 	bl	80064e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fe8e 	bl	8005c70 <USB_ResetPort>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3360      	adds	r3, #96	; 0x60
 8001f78:	781b      	ldrb	r3, [r3, #0]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3350      	adds	r3, #80	; 0x50
 8001fa0:	681b      	ldr	r3, [r3, #0]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fed2 	bl	8005d64 <USB_GetCurrentFrame>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 fead 	bl	8005d36 <USB_GetHostSpeed>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b04      	cmp	r3, #4
 8002014:	d11a      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002022:	461a      	mov	r2, r3
 8002024:	2304      	movs	r3, #4
 8002026:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3361      	adds	r3, #97	; 0x61
 8002036:	2206      	movs	r2, #6
 8002038:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f004 f914 	bl	8006272 <USB_HC_Halt>
 800204a:	e0af      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002062:	d11b      	bne.n	800209c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002076:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3361      	adds	r3, #97	; 0x61
 8002086:	2207      	movs	r2, #7
 8002088:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f004 f8ec 	bl	8006272 <USB_HC_Halt>
 800209a:	e087      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d109      	bne.n	80020c6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	2320      	movs	r3, #32
 80020c2:	6093      	str	r3, [r2, #8]
 80020c4:	e072      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d11a      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	461a      	mov	r2, r3
 80020ea:	2308      	movs	r3, #8
 80020ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3361      	adds	r3, #97	; 0x61
 80020fc:	2205      	movs	r2, #5
 80020fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f004 f8b1 	bl	8006272 <USB_HC_Halt>
 8002110:	e04c      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002128:	d11b      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	461a      	mov	r2, r3
 8002138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3361      	adds	r3, #97	; 0x61
 800214c:	2208      	movs	r2, #8
 800214e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f004 f889 	bl	8006272 <USB_HC_Halt>
 8002160:	e024      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d119      	bne.n	80021ac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3361      	adds	r3, #97	; 0x61
 8002198:	2206      	movs	r2, #6
 800219a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 f863 	bl	8006272 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c2:	d112      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 f84f 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	461a      	mov	r2, r3
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021e8:	e24e      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	f040 80df 	bne.w	80023c0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d019      	beq.n	800223e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3348      	adds	r3, #72	; 0x48
 8002218:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	0159      	lsls	r1, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	440b      	add	r3, r1
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	202c      	movs	r0, #44	; 0x2c
 8002234:	fb00 f303 	mul.w	r3, r0, r3
 8002238:	440b      	add	r3, r1
 800223a:	3350      	adds	r3, #80	; 0x50
 800223c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3361      	adds	r3, #97	; 0x61
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	335c      	adds	r3, #92	; 0x5c
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2301      	movs	r3, #1
 8002272:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	333f      	adds	r3, #63	; 0x3f
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	333f      	adds	r3, #63	; 0x3f
 8002296:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002298:	2b02      	cmp	r3, #2
 800229a:	d111      	bne.n	80022c0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 ffe3 	bl	8006272 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b8:	461a      	mov	r2, r3
 80022ba:	2310      	movs	r3, #16
 80022bc:	6093      	str	r3, [r2, #8]
 80022be:	e03a      	b.n	8002336 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	333f      	adds	r3, #63	; 0x3f
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d009      	beq.n	80022e8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	333f      	adds	r3, #63	; 0x3f
 80022e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d126      	bne.n	8002336 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	0151      	lsls	r1, r2, #5
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	440a      	add	r2, r1
 80022fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002302:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002306:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3360      	adds	r3, #96	; 0x60
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	b2d9      	uxtb	r1, r3
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	202c      	movs	r0, #44	; 0x2c
 8002324:	fb00 f303 	mul.w	r3, r0, r3
 8002328:	4413      	add	r3, r2
 800232a:	3360      	adds	r3, #96	; 0x60
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f006 fa41 	bl	80087b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d12b      	bne.n	8002396 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	3348      	adds	r3, #72	; 0x48
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	202c      	movs	r0, #44	; 0x2c
 8002354:	fb00 f202 	mul.w	r2, r0, r2
 8002358:	440a      	add	r2, r1
 800235a:	3240      	adds	r2, #64	; 0x40
 800235c:	8812      	ldrh	r2, [r2, #0]
 800235e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 818e 	beq.w	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3354      	adds	r3, #84	; 0x54
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2d8      	uxtb	r0, r3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3354      	adds	r3, #84	; 0x54
 8002390:	4602      	mov	r2, r0
 8002392:	701a      	strb	r2, [r3, #0]
}
 8002394:	e178      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3354      	adds	r3, #84	; 0x54
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2d8      	uxtb	r0, r3
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3354      	adds	r3, #84	; 0x54
 80023ba:	4602      	mov	r2, r0
 80023bc:	701a      	strb	r2, [r3, #0]
}
 80023be:	e163      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	f040 80f6 	bne.w	80025c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3361      	adds	r3, #97	; 0x61
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d109      	bne.n	8002400 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3360      	adds	r3, #96	; 0x60
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e0c9      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3361      	adds	r3, #97	; 0x61
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d109      	bne.n	8002428 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3360      	adds	r3, #96	; 0x60
 8002422:	2205      	movs	r2, #5
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e0b5      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	3361      	adds	r3, #97	; 0x61
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b06      	cmp	r3, #6
 800243a:	d009      	beq.n	8002450 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3361      	adds	r3, #97	; 0x61
 800244a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800244c:	2b08      	cmp	r3, #8
 800244e:	d150      	bne.n	80024f2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	335c      	adds	r3, #92	; 0x5c
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	202c      	movs	r0, #44	; 0x2c
 8002468:	fb00 f303 	mul.w	r3, r0, r3
 800246c:	440b      	add	r3, r1
 800246e:	335c      	adds	r3, #92	; 0x5c
 8002470:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	335c      	adds	r3, #92	; 0x5c
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d912      	bls.n	80024ac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	335c      	adds	r3, #92	; 0x5c
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3360      	adds	r3, #96	; 0x60
 80024a6:	2204      	movs	r2, #4
 80024a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024aa:	e073      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024f0:	e050      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3361      	adds	r3, #97	; 0x61
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d122      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800252e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002536:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e023      	b.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3361      	adds	r3, #97	; 0x61
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b07      	cmp	r3, #7
 800255e:	d119      	bne.n	8002594 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	335c      	adds	r3, #92	; 0x5c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	202c      	movs	r0, #44	; 0x2c
 8002578:	fb00 f303 	mul.w	r3, r0, r3
 800257c:	440b      	add	r3, r1
 800257e:	335c      	adds	r3, #92	; 0x5c
 8002580:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3360      	adds	r3, #96	; 0x60
 8002590:	2204      	movs	r2, #4
 8002592:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	461a      	mov	r2, r3
 80025a2:	2302      	movs	r3, #2
 80025a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	b2d9      	uxtb	r1, r3
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	202c      	movs	r0, #44	; 0x2c
 80025b0:	fb00 f303 	mul.w	r3, r0, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3360      	adds	r3, #96	; 0x60
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f006 f8fb 	bl	80087b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025c2:	e061      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d156      	bne.n	8002688 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	333f      	adds	r3, #63	; 0x3f
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d111      	bne.n	8002612 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	335c      	adds	r3, #92	; 0x5c
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fe31 	bl	8006272 <USB_HC_Halt>
 8002610:	e031      	b.n	8002676 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	333f      	adds	r3, #63	; 0x3f
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	333f      	adds	r3, #63	; 0x3f
 8002634:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002636:	2b02      	cmp	r3, #2
 8002638:	d11d      	bne.n	8002676 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	335c      	adds	r3, #92	; 0x5c
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d110      	bne.n	8002676 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3361      	adds	r3, #97	; 0x61
 8002662:	2203      	movs	r2, #3
 8002664:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fdfe 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2310      	movs	r3, #16
 8002686:	6093      	str	r3, [r2, #8]
}
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11a      	bne.n	80026f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	461a      	mov	r2, r3
 80026ce:	2304      	movs	r3, #4
 80026d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3361      	adds	r3, #97	; 0x61
 80026e0:	2206      	movs	r2, #6
 80026e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fdbf 	bl	8006272 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80026f4:	e331      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b20      	cmp	r3, #32
 800270a:	d12e      	bne.n	800276a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	461a      	mov	r2, r3
 800271a:	2320      	movs	r3, #32
 800271c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	333d      	adds	r3, #61	; 0x3d
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	f040 8313 	bne.w	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	333d      	adds	r3, #61	; 0x3d
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3360      	adds	r3, #96	; 0x60
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fd85 	bl	8006272 <USB_HC_Halt>
}
 8002768:	e2f7      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002780:	d112      	bne.n	80027a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	461a      	mov	r2, r3
 8002790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002794:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 fd66 	bl	8006272 <USB_HC_Halt>
}
 80027a6:	e2d8      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d140      	bne.n	8002840 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	335c      	adds	r3, #92	; 0x5c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d111      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	333d      	adds	r3, #61	; 0x3d
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	461a      	mov	r2, r3
 8002818:	2301      	movs	r3, #1
 800281a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3361      	adds	r3, #97	; 0x61
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fd1a 	bl	8006272 <USB_HC_Halt>
}
 800283e:	e28c      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d12c      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3361      	adds	r3, #97	; 0x61
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	333d      	adds	r3, #61	; 0x3d
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	335c      	adds	r3, #92	; 0x5c
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fceb 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	6093      	str	r3, [r2, #8]
}
 80028ae:	e254      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d11a      	bne.n	80028fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	461a      	mov	r2, r3
 80028d4:	2308      	movs	r3, #8
 80028d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3361      	adds	r3, #97	; 0x61
 80028e6:	2205      	movs	r2, #5
 80028e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 fcbc 	bl	8006272 <USB_HC_Halt>
}
 80028fa:	e22e      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b10      	cmp	r3, #16
 8002910:	d140      	bne.n	8002994 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	335c      	adds	r3, #92	; 0x5c
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	2203      	movs	r2, #3
 8002934:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	333d      	adds	r3, #61	; 0x3d
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d112      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	333c      	adds	r3, #60	; 0x3c
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d108      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	333d      	adds	r3, #61	; 0x3d
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fc79 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	461a      	mov	r2, r3
 800298e:	2310      	movs	r3, #16
 8002990:	6093      	str	r3, [r2, #8]
}
 8002992:	e1e2      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d164      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d111      	bne.n	80029d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3361      	adds	r3, #97	; 0x61
 80029c0:	2206      	movs	r2, #6
 80029c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fc4f 	bl	8006272 <USB_HC_Halt>
 80029d4:	e044      	b.n	8002a60 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	335c      	adds	r3, #92	; 0x5c
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	202c      	movs	r0, #44	; 0x2c
 80029ee:	fb00 f303 	mul.w	r3, r0, r3
 80029f2:	440b      	add	r3, r1
 80029f4:	335c      	adds	r3, #92	; 0x5c
 80029f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	335c      	adds	r3, #92	; 0x5c
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d920      	bls.n	8002a4e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	335c      	adds	r3, #92	; 0x5c
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3360      	adds	r3, #96	; 0x60
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	b2d9      	uxtb	r1, r3
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	202c      	movs	r0, #44	; 0x2c
 8002a3a:	fb00 f303 	mul.w	r3, r0, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3360      	adds	r3, #96	; 0x60
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f005 feb6 	bl	80087b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a4c:	e008      	b.n	8002a60 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	6093      	str	r3, [r2, #8]
}
 8002a72:	e172      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d11b      	bne.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3361      	adds	r3, #97	; 0x61
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fbe2 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	461a      	mov	r2, r3
 8002abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac0:	6093      	str	r3, [r2, #8]
}
 8002ac2:	e14a      	b.n	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	f040 813f 	bne.w	8002d5a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3361      	adds	r3, #97	; 0x61
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d17d      	bne.n	8002bec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3360      	adds	r3, #96	; 0x60
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333f      	adds	r3, #63	; 0x3f
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d00a      	beq.n	8002b2c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	333f      	adds	r3, #63	; 0x3f
 8002b24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f040 8100 	bne.w	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d113      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3355      	adds	r3, #85	; 0x55
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	f083 0301 	eor.w	r3, r3, #1
 8002b48:	b2d8      	uxtb	r0, r3
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3355      	adds	r3, #85	; 0x55
 8002b58:	4602      	mov	r2, r0
 8002b5a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 80e3 	bne.w	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	334c      	adds	r3, #76	; 0x4c
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80d8 	beq.w	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	334c      	adds	r3, #76	; 0x4c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	202c      	movs	r0, #44	; 0x2c
 8002b92:	fb00 f202 	mul.w	r2, r0, r2
 8002b96:	440a      	add	r2, r1
 8002b98:	3240      	adds	r2, #64	; 0x40
 8002b9a:	8812      	ldrh	r2, [r2, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	202c      	movs	r0, #44	; 0x2c
 8002ba6:	fb00 f202 	mul.w	r2, r0, r2
 8002baa:	440a      	add	r2, r1
 8002bac:	3240      	adds	r2, #64	; 0x40
 8002bae:	8812      	ldrh	r2, [r2, #0]
 8002bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80b5 	beq.w	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3355      	adds	r3, #85	; 0x55
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2d8      	uxtb	r0, r3
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3355      	adds	r3, #85	; 0x55
 8002be6:	4602      	mov	r2, r0
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e09f      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3361      	adds	r3, #97	; 0x61
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d109      	bne.n	8002c14 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3360      	adds	r3, #96	; 0x60
 8002c0e:	2202      	movs	r2, #2
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e08b      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3361      	adds	r3, #97	; 0x61
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d109      	bne.n	8002c3c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3360      	adds	r3, #96	; 0x60
 8002c36:	2202      	movs	r2, #2
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e077      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3361      	adds	r3, #97	; 0x61
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d109      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3360      	adds	r3, #96	; 0x60
 8002c5e:	2205      	movs	r2, #5
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e063      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3361      	adds	r3, #97	; 0x61
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d009      	beq.n	8002c8c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d14f      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	335c      	adds	r3, #92	; 0x5c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	202c      	movs	r0, #44	; 0x2c
 8002ca4:	fb00 f303 	mul.w	r3, r0, r3
 8002ca8:	440b      	add	r3, r1
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	335c      	adds	r3, #92	; 0x5c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d912      	bls.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	335c      	adds	r3, #92	; 0x5c
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e021      	b.n	8002d2c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3360      	adds	r3, #96	; 0x60
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d10:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d18:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	461a      	mov	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	b2d9      	uxtb	r1, r3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	202c      	movs	r0, #44	; 0x2c
 8002d48:	fb00 f303 	mul.w	r3, r0, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f005 fd2f 	bl	80087b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d5a:	bf00      	nop
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08a      	sub	sp, #40	; 0x28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	0c5b      	lsrs	r3, r3, #17
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d004      	beq.n	8002da8 <HCD_RXQLVL_IRQHandler+0x46>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	f000 80a9 	beq.w	8002ef8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002da6:	e0aa      	b.n	8002efe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80a6 	beq.w	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3344      	adds	r3, #68	; 0x44
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 809b 	beq.w	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3350      	adds	r3, #80	; 0x50
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	441a      	add	r2, r3
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	202c      	movs	r0, #44	; 0x2c
 8002de0:	fb00 f303 	mul.w	r3, r0, r3
 8002de4:	440b      	add	r3, r1
 8002de6:	334c      	adds	r3, #76	; 0x4c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d87a      	bhi.n	8002ee4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3344      	adds	r3, #68	; 0x44
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	b292      	uxth	r2, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f002 fd8a 	bl	8005920 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3344      	adds	r3, #68	; 0x44
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	441a      	add	r2, r3
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	202c      	movs	r0, #44	; 0x2c
 8002e26:	fb00 f303 	mul.w	r3, r0, r3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3344      	adds	r3, #68	; 0x44
 8002e2e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3350      	adds	r3, #80	; 0x50
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	441a      	add	r2, r3
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	202c      	movs	r0, #44	; 0x2c
 8002e4a:	fb00 f303 	mul.w	r3, r0, r3
 8002e4e:	440b      	add	r3, r1
 8002e50:	3350      	adds	r3, #80	; 0x50
 8002e52:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	0cdb      	lsrs	r3, r3, #19
 8002e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e68:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3340      	adds	r3, #64	; 0x40
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d13c      	bne.n	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d039      	beq.n	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3354      	adds	r3, #84	; 0x54
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3354      	adds	r3, #84	; 0x54
 8002ede:	4602      	mov	r2, r0
 8002ee0:	701a      	strb	r2, [r3, #0]
      break;
 8002ee2:	e00b      	b.n	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3360      	adds	r3, #96	; 0x60
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	701a      	strb	r2, [r3, #0]
      break;
 8002ef6:	e001      	b.n	8002efc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002efc:	bf00      	nop
  }
}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	; 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d10b      	bne.n	8002f56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d102      	bne.n	8002f4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f005 fc19 	bl	8008780 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d132      	bne.n	8002fc6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f043 0308 	orr.w	r3, r3, #8
 8002f66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d126      	bne.n	8002fc0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d113      	bne.n	8002fa2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f84:	d106      	bne.n	8002f94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f002 fe35 	bl	8005bfc <USB_InitFSLSPClkSel>
 8002f92:	e011      	b.n	8002fb8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fe2e 	bl	8005bfc <USB_InitFSLSPClkSel>
 8002fa0:	e00a      	b.n	8002fb8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d106      	bne.n	8002fb8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fb6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f005 fc0b 	bl	80087d4 <HAL_HCD_PortEnabled_Callback>
 8002fbe:	e002      	b.n	8002fc6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f005 fc15 	bl	80087f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d103      	bne.n	8002fd8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f043 0320 	orr.w	r3, r3, #32
 8002fd6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e12b      	b.n	8003256 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fe38 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	; 0x24
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003050:	f001 fa20 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a81      	ldr	r2, [pc, #516]	; (8003260 <HAL_I2C_Init+0x274>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d807      	bhi.n	8003070 <HAL_I2C_Init+0x84>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a80      	ldr	r2, [pc, #512]	; (8003264 <HAL_I2C_Init+0x278>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e006      	b.n	800307e <HAL_I2C_Init+0x92>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a7d      	ldr	r2, [pc, #500]	; (8003268 <HAL_I2C_Init+0x27c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0e7      	b.n	8003256 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a78      	ldr	r2, [pc, #480]	; (800326c <HAL_I2C_Init+0x280>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9b      	lsrs	r3, r3, #18
 8003090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a6a      	ldr	r2, [pc, #424]	; (8003260 <HAL_I2C_Init+0x274>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d802      	bhi.n	80030c0 <HAL_I2C_Init+0xd4>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3301      	adds	r3, #1
 80030be:	e009      	b.n	80030d4 <HAL_I2C_Init+0xe8>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	4a69      	ldr	r2, [pc, #420]	; (8003270 <HAL_I2C_Init+0x284>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	3301      	adds	r3, #1
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	495c      	ldr	r1, [pc, #368]	; (8003260 <HAL_I2C_Init+0x274>)
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d819      	bhi.n	8003128 <HAL_I2C_Init+0x13c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e59      	subs	r1, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003102:	1c59      	adds	r1, r3, #1
 8003104:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003108:	400b      	ands	r3, r1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_I2C_Init+0x138>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1e59      	subs	r1, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fbb1 f3f3 	udiv	r3, r1, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	e051      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003124:	2304      	movs	r3, #4
 8003126:	e04f      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d111      	bne.n	8003154 <HAL_I2C_Init+0x168>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	440b      	add	r3, r1
 800313e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e012      	b.n	800317a <HAL_I2C_Init+0x18e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x196>
 800317e:	2301      	movs	r3, #1
 8003180:	e022      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10e      	bne.n	80031a8 <HAL_I2C_Init+0x1bc>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e58      	subs	r0, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	440b      	add	r3, r1
 8003198:	fbb0 f3f3 	udiv	r3, r0, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a6:	e00f      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	6809      	ldr	r1, [r1, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6911      	ldr	r1, [r2, #16]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	430b      	orrs	r3, r1
 800320a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	000186a0 	.word	0x000186a0
 8003264:	001e847f 	.word	0x001e847f
 8003268:	003d08ff 	.word	0x003d08ff
 800326c:	431bde83 	.word	0x431bde83
 8003270:	10624dd3 	.word	0x10624dd3

08003274 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e128      	b.n	80034d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a90      	ldr	r2, [pc, #576]	; (80034e0 <HAL_I2S_Init+0x26c>)
 800329e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fd fd39 	bl	8000d18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032bc:	f023 030f 	bic.w	r3, r3, #15
 80032c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2202      	movs	r2, #2
 80032c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d060      	beq.n	8003394 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032da:	2310      	movs	r3, #16
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e001      	b.n	80032e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d802      	bhi.n	80032f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032f2:	2001      	movs	r0, #1
 80032f4:	f001 f9c4 	bl	8004680 <HAL_RCCEx_GetPeriphCLKFreq>
 80032f8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003302:	d125      	bne.n	8003350 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	fbb2 f2f3 	udiv	r2, r2, r3
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	3305      	adds	r3, #5
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e01f      	b.n	800336e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	fbb2 f2f3 	udiv	r2, r2, r3
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	3305      	adds	r3, #5
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e00e      	b.n	800336e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fbb2 f2f3 	udiv	r2, r2, r3
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	3305      	adds	r3, #5
 800336c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4a5c      	ldr	r2, [pc, #368]	; (80034e4 <HAL_I2S_Init+0x270>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	08db      	lsrs	r3, r3, #3
 8003378:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e003      	b.n	800339c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003394:	2302      	movs	r3, #2
 8003396:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d902      	bls.n	80033a8 <HAL_I2S_Init+0x134>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2bff      	cmp	r3, #255	; 0xff
 80033a6:	d907      	bls.n	80033b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f043 0210 	orr.w	r2, r3, #16
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e08f      	b.n	80034d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	ea42 0103 	orr.w	r1, r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033d6:	f023 030f 	bic.w	r3, r3, #15
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6851      	ldr	r1, [r2, #4]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	4311      	orrs	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68d2      	ldr	r2, [r2, #12]
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6992      	ldr	r2, [r2, #24]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d161      	bne.n	80034c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a38      	ldr	r2, [pc, #224]	; (80034e8 <HAL_I2S_Init+0x274>)
 8003408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a37      	ldr	r2, [pc, #220]	; (80034ec <HAL_I2S_Init+0x278>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d101      	bne.n	8003418 <HAL_I2S_Init+0x1a4>
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <HAL_I2S_Init+0x27c>)
 8003416:	e001      	b.n	800341c <HAL_I2S_Init+0x1a8>
 8003418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	4932      	ldr	r1, [pc, #200]	; (80034ec <HAL_I2S_Init+0x278>)
 8003424:	428a      	cmp	r2, r1
 8003426:	d101      	bne.n	800342c <HAL_I2S_Init+0x1b8>
 8003428:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <HAL_I2S_Init+0x27c>)
 800342a:	e001      	b.n	8003430 <HAL_I2S_Init+0x1bc>
 800342c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003430:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003434:	f023 030f 	bic.w	r3, r3, #15
 8003438:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <HAL_I2S_Init+0x278>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_I2S_Init+0x1d4>
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_I2S_Init+0x27c>)
 8003446:	e001      	b.n	800344c <HAL_I2S_Init+0x1d8>
 8003448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800344c:	2202      	movs	r2, #2
 800344e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a25      	ldr	r2, [pc, #148]	; (80034ec <HAL_I2S_Init+0x278>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_I2S_Init+0x1ea>
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_I2S_Init+0x27c>)
 800345c:	e001      	b.n	8003462 <HAL_I2S_Init+0x1ee>
 800345e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346e:	d003      	beq.n	8003478 <HAL_I2S_Init+0x204>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d103      	bne.n	8003480 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	e001      	b.n	8003484 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800348e:	4313      	orrs	r3, r2
 8003490:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003498:	4313      	orrs	r3, r2
 800349a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034a2:	4313      	orrs	r3, r2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_I2S_Init+0x278>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_I2S_Init+0x24c>
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_I2S_Init+0x27c>)
 80034be:	e001      	b.n	80034c4 <HAL_I2S_Init+0x250>
 80034c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c4:	897a      	ldrh	r2, [r7, #10]
 80034c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	080035eb 	.word	0x080035eb
 80034e4:	cccccccd 	.word	0xcccccccd
 80034e8:	08003701 	.word	0x08003701
 80034ec:	40003800 	.word	0x40003800
 80034f0:	40003400 	.word	0x40003400

080034f4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10e      	bne.n	8003584 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003574:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ffb8 	bl	80034f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	b292      	uxth	r2, r2
 80035a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10e      	bne.n	80035e2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff93 	bl	8003508 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b04      	cmp	r3, #4
 8003604:	d13a      	bne.n	800367c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d109      	bne.n	8003624 <I2S_IRQHandler+0x3a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d102      	bne.n	8003624 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ffb4 	bl	800358c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d126      	bne.n	800367c <I2S_IRQHandler+0x92>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b20      	cmp	r3, #32
 800363a:	d11f      	bne.n	800367c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800364a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0202 	orr.w	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff50 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b03      	cmp	r3, #3
 8003686:	d136      	bne.n	80036f6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d109      	bne.n	80036a6 <I2S_IRQHandler+0xbc>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d102      	bne.n	80036a6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff45 	bl	8003530 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d122      	bne.n	80036f6 <I2S_IRQHandler+0x10c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d11b      	bne.n	80036f6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036cc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff13 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a92      	ldr	r2, [pc, #584]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800371a:	4b92      	ldr	r3, [pc, #584]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800371c:	e001      	b.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800371e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a8b      	ldr	r2, [pc, #556]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003738:	4b8a      	ldr	r3, [pc, #552]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800373a:	e001      	b.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800373c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374c:	d004      	beq.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 8099 	bne.w	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d107      	bne.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f925 	bl	80039bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9c8 	bl	8003b1c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d13a      	bne.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d035      	beq.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6e      	ldr	r2, [pc, #440]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037aa:	4b6e      	ldr	r3, [pc, #440]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ac:	e001      	b.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4969      	ldr	r1, [pc, #420]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ba:	428b      	cmp	r3, r1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037be:	4b69      	ldr	r3, [pc, #420]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c0:	e001      	b.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f043 0202 	orr.w	r2, r3, #2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fe88 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	f040 80c3 	bne.w	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80bd 	beq.w	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003832:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a49      	ldr	r2, [pc, #292]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800383e:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003840:	e001      	b.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4944      	ldr	r1, [pc, #272]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800384e:	428b      	cmp	r3, r1
 8003850:	d101      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003852:	4b44      	ldr	r3, [pc, #272]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003854:	e001      	b.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff fe4a 	bl	800351c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003888:	e089      	b.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d107      	bne.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8be 	bl	8003a20 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8fd 	bl	8003ab8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d12f      	bne.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02a      	beq.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038ec:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ee:	e001      	b.n	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4919      	ldr	r1, [pc, #100]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d101      	bne.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003902:	e001      	b.n	8003908 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fdfa 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b08      	cmp	r3, #8
 8003930:	d136      	bne.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d031      	beq.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a07      	ldr	r2, [pc, #28]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003948:	e001      	b.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800394a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4902      	ldr	r1, [pc, #8]	; (8003960 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003956:	428b      	cmp	r3, r1
 8003958:	d106      	bne.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800395a:	4b02      	ldr	r3, [pc, #8]	; (8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800395c:	e006      	b.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800395e:	bf00      	nop
 8003960:	40003800 	.word	0x40003800
 8003964:	40003400 	.word	0x40003400
 8003968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003970:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003980:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fdc0 	bl	800351c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800399c:	e000      	b.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800399e:	bf00      	nop
}
 80039a0:	bf00      	nop
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c99      	adds	r1, r3, #2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6251      	str	r1, [r2, #36]	; 0x24
 80039ce:	881a      	ldrh	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d113      	bne.n	8003a16 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ffc9 	bl	80039a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c99      	adds	r1, r3, #2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6251      	str	r1, [r2, #36]	; 0x24
 8003a32:	8819      	ldrh	r1, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <I2SEx_TxISR_I2SExt+0x22>
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a40:	e001      	b.n	8003a46 <I2SEx_TxISR_I2SExt+0x26>
 8003a42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a46:	460a      	mov	r2, r1
 8003a48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d121      	bne.n	8003aa6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <I2SEx_TxISR_I2SExt+0x50>
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a6e:	e001      	b.n	8003a74 <I2SEx_TxISR_I2SExt+0x54>
 8003a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	490d      	ldr	r1, [pc, #52]	; (8003ab0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a7c:	428b      	cmp	r3, r1
 8003a7e:	d101      	bne.n	8003a84 <I2SEx_TxISR_I2SExt+0x64>
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a82:	e001      	b.n	8003a88 <I2SEx_TxISR_I2SExt+0x68>
 8003a84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d106      	bne.n	8003aa6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff81 	bl	80039a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40003800 	.word	0x40003800
 8003ab4:	40003400 	.word	0x40003400

08003ab8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68d8      	ldr	r0, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	1c99      	adds	r1, r3, #2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ad0:	b282      	uxth	r2, r0
 8003ad2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d113      	bne.n	8003b14 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ff4a 	bl	80039a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <I2SEx_RxISR_I2SExt+0x90>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <I2SEx_RxISR_I2SExt+0x16>
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b30:	e001      	b.n	8003b36 <I2SEx_RxISR_I2SExt+0x1a>
 8003b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b36:	68d8      	ldr	r0, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	1c99      	adds	r1, r3, #2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b42:	b282      	uxth	r2, r0
 8003b44:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d121      	bne.n	8003ba2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <I2SEx_RxISR_I2SExt+0x90>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <I2SEx_RxISR_I2SExt+0x50>
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b6a:	e001      	b.n	8003b70 <I2SEx_RxISR_I2SExt+0x54>
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	490d      	ldr	r1, [pc, #52]	; (8003bac <I2SEx_RxISR_I2SExt+0x90>)
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	d101      	bne.n	8003b80 <I2SEx_RxISR_I2SExt+0x64>
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b7e:	e001      	b.n	8003b84 <I2SEx_RxISR_I2SExt+0x68>
 8003b80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b88:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff03 	bl	80039a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40003800 	.word	0x40003800
 8003bb0:	40003400 	.word	0x40003400

08003bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e267      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d075      	beq.n	8003cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bde:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d112      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bea:	4b82      	ldr	r3, [pc, #520]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	4b7e      	ldr	r3, [pc, #504]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d05b      	beq.n	8003cbc <HAL_RCC_OscConfig+0x108>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d157      	bne.n	8003cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e242      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c18:	d106      	bne.n	8003c28 <HAL_RCC_OscConfig+0x74>
 8003c1a:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a75      	ldr	r2, [pc, #468]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e01d      	b.n	8003c64 <HAL_RCC_OscConfig+0xb0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x98>
 8003c32:	4b70      	ldr	r3, [pc, #448]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a6f      	ldr	r2, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b6d      	ldr	r3, [pc, #436]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a6c      	ldr	r2, [pc, #432]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCC_OscConfig+0xb0>
 8003c4c:	4b69      	ldr	r3, [pc, #420]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a68      	ldr	r2, [pc, #416]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b66      	ldr	r3, [pc, #408]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a65      	ldr	r2, [pc, #404]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fa8c 	bl	8001188 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fd fa88 	bl	8001188 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e207      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b5b      	ldr	r3, [pc, #364]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0xc0>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd fa78 	bl	8001188 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fa74 	bl	8001188 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1f3      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	4b51      	ldr	r3, [pc, #324]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0xe8>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cca:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d11c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce2:	4b44      	ldr	r3, [pc, #272]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_RCC_OscConfig+0x152>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1c7      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4937      	ldr	r1, [pc, #220]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	e03a      	b.n	8003d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d24:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_RCC_OscConfig+0x244>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fa2d 	bl	8001188 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd fa29 	bl	8001188 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1a8      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4925      	ldr	r1, [pc, #148]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
 8003d64:	e015      	b.n	8003d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCC_OscConfig+0x244>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fd fa0c 	bl	8001188 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d74:	f7fd fa08 	bl	8001188 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e187      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_RCC_OscConfig+0x248>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd f9ec 	bl	8001188 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fd f9e8 	bl	8001188 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e167      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x200>
 8003dd2:	e01b      	b.n	8003e0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_OscConfig+0x248>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dda:	f7fd f9d5 	bl	8001188 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	e00e      	b.n	8003e00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de2:	f7fd f9d1 	bl	8001188 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d907      	bls.n	8003e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e150      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
 8003df4:	40023800 	.word	0x40023800
 8003df8:	42470000 	.word	0x42470000
 8003dfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ea      	bne.n	8003de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8097 	beq.w	8003f48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1e:	4b81      	ldr	r3, [pc, #516]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10f      	bne.n	8003e4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	4b7d      	ldr	r3, [pc, #500]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	4a7c      	ldr	r2, [pc, #496]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e38:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3a:	4b7a      	ldr	r3, [pc, #488]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b77      	ldr	r3, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x474>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d118      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e56:	4b74      	ldr	r3, [pc, #464]	; (8004028 <HAL_RCC_OscConfig+0x474>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a73      	ldr	r2, [pc, #460]	; (8004028 <HAL_RCC_OscConfig+0x474>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7fd f991 	bl	8001188 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6a:	f7fd f98d 	bl	8001188 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e10c      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_OscConfig+0x474>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2ea>
 8003e90:	4b64      	ldr	r3, [pc, #400]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a63      	ldr	r2, [pc, #396]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	e01c      	b.n	8003ed8 <HAL_RCC_OscConfig+0x324>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x30c>
 8003ea6:	4b5f      	ldr	r3, [pc, #380]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a5e      	ldr	r2, [pc, #376]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003eac:	f043 0304 	orr.w	r3, r3, #4
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b5c      	ldr	r3, [pc, #368]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a5b      	ldr	r2, [pc, #364]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0x324>
 8003ec0:	4b58      	ldr	r3, [pc, #352]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	4a57      	ldr	r2, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ecc:	4b55      	ldr	r3, [pc, #340]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a54      	ldr	r2, [pc, #336]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	f023 0304 	bic.w	r3, r3, #4
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d015      	beq.n	8003f0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd f952 	bl	8001188 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd f94e 	bl	8001188 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0cb      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efe:	4b49      	ldr	r3, [pc, #292]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ee      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x334>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0c:	f7fd f93c 	bl	8001188 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fd f938 	bl	8001188 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0b5      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2a:	4b3e      	ldr	r3, [pc, #248]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ee      	bne.n	8003f14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3c:	4b39      	ldr	r3, [pc, #228]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	4a38      	ldr	r2, [pc, #224]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80a1 	beq.w	8004094 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f52:	4b34      	ldr	r3, [pc, #208]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d05c      	beq.n	8004018 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d141      	bne.n	8003fea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f66:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCC_OscConfig+0x478>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fd f90c 	bl	8001188 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fd f908 	bl	8001188 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e087      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	3b01      	subs	r3, #1
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	491b      	ldr	r1, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x478>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fd f8e1 	bl	8001188 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fd f8dd 	bl	8001188 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e05c      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x416>
 8003fe8:	e054      	b.n	8004094 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <HAL_RCC_OscConfig+0x478>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd f8ca 	bl	8001188 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fd f8c6 	bl	8001188 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e045      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_OscConfig+0x470>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x444>
 8004016:	e03d      	b.n	8004094 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e038      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
 8004024:	40023800 	.word	0x40023800
 8004028:	40007000 	.word	0x40007000
 800402c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x4ec>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d028      	beq.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d121      	bne.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d11a      	bne.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004060:	4013      	ands	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004066:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	4293      	cmp	r3, r2
 800406a:	d111      	bne.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	3b01      	subs	r3, #1
 800407a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d107      	bne.n	8004090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0cc      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b8:	4b68      	ldr	r3, [pc, #416]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d90c      	bls.n	80040e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b63      	ldr	r3, [pc, #396]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0b8      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d020      	beq.n	800412e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a58      	ldr	r2, [pc, #352]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004102:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004110:	4b53      	ldr	r3, [pc, #332]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4a52      	ldr	r2, [pc, #328]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800411a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411c:	4b50      	ldr	r3, [pc, #320]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	494d      	ldr	r1, [pc, #308]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d044      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d119      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e07f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d003      	beq.n	8004162 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415e:	2b03      	cmp	r3, #3
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e06f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e067      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b37      	ldr	r3, [pc, #220]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4934      	ldr	r1, [pc, #208]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004194:	f7fc fff8 	bl	8001188 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fc fff4 	bl	8001188 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e04f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d20c      	bcs.n	80041ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e032      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4916      	ldr	r1, [pc, #88]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	490e      	ldr	r1, [pc, #56]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800422a:	f000 f821 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 800422e:	4602      	mov	r2, r0
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	490a      	ldr	r1, [pc, #40]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 800423c:	5ccb      	ldrb	r3, [r1, r3]
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc ff58 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023c00 	.word	0x40023c00
 8004260:	40023800 	.word	0x40023800
 8004264:	08008e90 	.word	0x08008e90
 8004268:	20000004 	.word	0x20000004
 800426c:	20000008 	.word	0x20000008

08004270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004274:	b094      	sub	sp, #80	; 0x50
 8004276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
 800427c:	2300      	movs	r3, #0
 800427e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004280:	2300      	movs	r3, #0
 8004282:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004288:	4b79      	ldr	r3, [pc, #484]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b08      	cmp	r3, #8
 8004292:	d00d      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004294:	2b08      	cmp	r3, #8
 8004296:	f200 80e1 	bhi.w	800445c <HAL_RCC_GetSysClockFreq+0x1ec>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x34>
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x3a>
 80042a2:	e0db      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b73      	ldr	r3, [pc, #460]	; (8004474 <HAL_RCC_GetSysClockFreq+0x204>)
 80042a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042a8:	e0db      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042aa:	4b73      	ldr	r3, [pc, #460]	; (8004478 <HAL_RCC_GetSysClockFreq+0x208>)
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ae:	e0d8      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b0:	4b6f      	ldr	r3, [pc, #444]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ba:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d063      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	2200      	movs	r2, #0
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30
 80042da:	2300      	movs	r3, #0
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
 80042de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042e2:	4622      	mov	r2, r4
 80042e4:	462b      	mov	r3, r5
 80042e6:	f04f 0000 	mov.w	r0, #0
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	0159      	lsls	r1, r3, #5
 80042f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f4:	0150      	lsls	r0, r2, #5
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4621      	mov	r1, r4
 80042fc:	1a51      	subs	r1, r2, r1
 80042fe:	6139      	str	r1, [r7, #16]
 8004300:	4629      	mov	r1, r5
 8004302:	eb63 0301 	sbc.w	r3, r3, r1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004314:	4659      	mov	r1, fp
 8004316:	018b      	lsls	r3, r1, #6
 8004318:	4651      	mov	r1, sl
 800431a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800431e:	4651      	mov	r1, sl
 8004320:	018a      	lsls	r2, r1, #6
 8004322:	4651      	mov	r1, sl
 8004324:	ebb2 0801 	subs.w	r8, r2, r1
 8004328:	4659      	mov	r1, fp
 800432a:	eb63 0901 	sbc.w	r9, r3, r1
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004342:	4690      	mov	r8, r2
 8004344:	4699      	mov	r9, r3
 8004346:	4623      	mov	r3, r4
 8004348:	eb18 0303 	adds.w	r3, r8, r3
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	462b      	mov	r3, r5
 8004350:	eb49 0303 	adc.w	r3, r9, r3
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004362:	4629      	mov	r1, r5
 8004364:	024b      	lsls	r3, r1, #9
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800436c:	4621      	mov	r1, r4
 800436e:	024a      	lsls	r2, r1, #9
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004376:	2200      	movs	r2, #0
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 800437a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800437c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004380:	f7fb ff22 	bl	80001c8 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	e058      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b38      	ldr	r3, [pc, #224]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	2200      	movs	r2, #0
 8004396:	4618      	mov	r0, r3
 8004398:	4611      	mov	r1, r2
 800439a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800439e:	623b      	str	r3, [r7, #32]
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	f04f 0000 	mov.w	r0, #0
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	0159      	lsls	r1, r3, #5
 80043b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ba:	0150      	lsls	r0, r2, #5
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4641      	mov	r1, r8
 80043c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80043c6:	4649      	mov	r1, r9
 80043c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e0:	ebb2 040a 	subs.w	r4, r2, sl
 80043e4:	eb63 050b 	sbc.w	r5, r3, fp
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	00eb      	lsls	r3, r5, #3
 80043f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f6:	00e2      	lsls	r2, r4, #3
 80043f8:	4614      	mov	r4, r2
 80043fa:	461d      	mov	r5, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	18e3      	adds	r3, r4, r3
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	464b      	mov	r3, r9
 8004404:	eb45 0303 	adc.w	r3, r5, r3
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004416:	4629      	mov	r1, r5
 8004418:	028b      	lsls	r3, r1, #10
 800441a:	4621      	mov	r1, r4
 800441c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004420:	4621      	mov	r1, r4
 8004422:	028a      	lsls	r2, r1, #10
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442a:	2200      	movs	r2, #0
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	61fa      	str	r2, [r7, #28]
 8004430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004434:	f7fb fec8 	bl	80001c8 <__aeabi_uldivmod>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4613      	mov	r3, r2
 800443e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	3301      	adds	r3, #1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800445a:	e002      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetSysClockFreq+0x204>)
 800445e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004464:	4618      	mov	r0, r3
 8004466:	3750      	adds	r7, #80	; 0x50
 8004468:	46bd      	mov	sp, r7
 800446a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
 8004474:	00f42400 	.word	0x00f42400
 8004478:	007a1200 	.word	0x007a1200

0800447c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <HAL_RCC_GetHCLKFreq+0x14>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000004 	.word	0x20000004

08004494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004498:	f7ff fff0 	bl	800447c <HAL_RCC_GetHCLKFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	0a9b      	lsrs	r3, r3, #10
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	4903      	ldr	r1, [pc, #12]	; (80044b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044aa:	5ccb      	ldrb	r3, [r1, r3]
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40023800 	.word	0x40023800
 80044b8:	08008ea0 	.word	0x08008ea0

080044bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d035      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044e4:	4b62      	ldr	r3, [pc, #392]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044ea:	f7fc fe4d 	bl	8001188 <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044f2:	f7fc fe49 	bl	8001188 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0b0      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004504:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	019a      	lsls	r2, r3, #6
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	071b      	lsls	r3, r3, #28
 800451c:	4955      	ldr	r1, [pc, #340]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004524:	4b52      	ldr	r3, [pc, #328]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800452a:	f7fc fe2d 	bl	8001188 <HAL_GetTick>
 800452e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004532:	f7fc fe29 	bl	8001188 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e090      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004544:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8083 	beq.w	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	4b44      	ldr	r3, [pc, #272]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	4a43      	ldr	r2, [pc, #268]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456c:	6413      	str	r3, [r2, #64]	; 0x40
 800456e:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800457a:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3e      	ldr	r2, [pc, #248]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004586:	f7fc fdff 	bl	8001188 <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800458e:	f7fc fdfb 	bl	8001188 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e062      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045a0:	4b35      	ldr	r3, [pc, #212]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ac:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02f      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d028      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ca:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045d4:	4b29      	ldr	r3, [pc, #164]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045da:	4b28      	ldr	r3, [pc, #160]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045e0:	4a24      	ldr	r2, [pc, #144]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045e6:	4b23      	ldr	r3, [pc, #140]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d114      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045f2:	f7fc fdc9 	bl	8001188 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	e00a      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fa:	f7fc fdc5 	bl	8001188 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	f241 3288 	movw	r2, #5000	; 0x1388
 8004608:	4293      	cmp	r3, r2
 800460a:	d901      	bls.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e02a      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ee      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004628:	d10d      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800463a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463e:	490d      	ldr	r1, [pc, #52]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004640:	4313      	orrs	r3, r2
 8004642:	608b      	str	r3, [r1, #8]
 8004644:	e005      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800464c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	4905      	ldr	r1, [pc, #20]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004660:	4313      	orrs	r3, r2
 8004662:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	42470068 	.word	0x42470068
 8004674:	40023800 	.word	0x40023800
 8004678:	40007000 	.word	0x40007000
 800467c:	42470e40 	.word	0x42470e40

08004680 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d13e      	bne.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800469e:	4b23      	ldr	r3, [pc, #140]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d12f      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046b4:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046b6:	617b      	str	r3, [r7, #20]
          break;
 80046b8:	e02f      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046ba:	4b1c      	ldr	r3, [pc, #112]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c6:	d108      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046c8:	4b18      	ldr	r3, [pc, #96]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d0:	4a18      	ldr	r2, [pc, #96]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	e007      	b.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f0:	099b      	lsrs	r3, r3, #6
 80046f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004704:	0f1b      	lsrs	r3, r3, #28
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]
          break;
 8004712:	e002      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
          break;
 8004718:	bf00      	nop
        }
      }
      break;
 800471a:	bf00      	nop
    }
  }
  return frequency;
 800471c:	697b      	ldr	r3, [r7, #20]
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	00bb8000 	.word	0x00bb8000
 8004734:	007a1200 	.word	0x007a1200
 8004738:	00f42400 	.word	0x00f42400

0800473c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e07b      	b.n	8004846 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	2b00      	cmp	r3, #0
 8004754:	d108      	bne.n	8004768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475e:	d009      	beq.n	8004774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	61da      	str	r2, [r3, #28]
 8004766:	e005      	b.n	8004774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc fb42 	bl	8000e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	ea42 0103 	orr.w	r1, r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 0104 	and.w	r1, r3, #4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0210 	and.w	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e041      	b.n	80048e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fc fb17 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f000 fb49 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e041      	b.n	8004982 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f839 	bl	800498a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f000 fafa 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d109      	bne.n	80049c4 <HAL_TIM_PWM_Start+0x24>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	bf14      	ite	ne
 80049bc:	2301      	movne	r3, #1
 80049be:	2300      	moveq	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e022      	b.n	8004a0a <HAL_TIM_PWM_Start+0x6a>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d109      	bne.n	80049de <HAL_TIM_PWM_Start+0x3e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	bf14      	ite	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	2300      	moveq	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	e015      	b.n	8004a0a <HAL_TIM_PWM_Start+0x6a>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d109      	bne.n	80049f8 <HAL_TIM_PWM_Start+0x58>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e008      	b.n	8004a0a <HAL_TIM_PWM_Start+0x6a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07c      	b.n	8004b0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x82>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a20:	e013      	b.n	8004a4a <HAL_TIM_PWM_Start+0xaa>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x92>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a30:	e00b      	b.n	8004a4a <HAL_TIM_PWM_Start+0xaa>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xa2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	e003      	b.n	8004a4a <HAL_TIM_PWM_Start+0xaa>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fd50 	bl	80054f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2d      	ldr	r2, [pc, #180]	; (8004b14 <HAL_TIM_PWM_Start+0x174>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_TIM_PWM_Start+0xcc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <HAL_TIM_PWM_Start+0x178>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_TIM_PWM_Start+0xd0>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_TIM_PWM_Start+0xd2>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_TIM_PWM_Start+0x174>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d022      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x136>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a98:	d01d      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x136>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_PWM_Start+0x17c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d018      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x136>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <HAL_TIM_PWM_Start+0x180>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x136>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <HAL_TIM_PWM_Start+0x184>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x136>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a16      	ldr	r2, [pc, #88]	; (8004b18 <HAL_TIM_PWM_Start+0x178>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x136>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_TIM_PWM_Start+0x188>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x136>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a16      	ldr	r2, [pc, #88]	; (8004b2c <HAL_TIM_PWM_Start+0x18c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d111      	bne.n	8004afa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b06      	cmp	r3, #6
 8004ae6:	d010      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	e007      	b.n	8004b0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40001800 	.word	0x40001800

08004b30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fcd8 	bl	80054f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2e      	ldr	r2, [pc, #184]	; (8004c08 <HAL_TIM_PWM_Stop+0xd8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_TIM_PWM_Stop+0x2c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <HAL_TIM_PWM_Stop+0xdc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIM_PWM_Stop+0x30>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_TIM_PWM_Stop+0x32>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <HAL_TIM_PWM_Stop+0x66>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	f240 4344 	movw	r3, #1092	; 0x444
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d107      	bne.n	8004b96 <HAL_TIM_PWM_Stop+0x66>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_TIM_PWM_Stop+0x96>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6a1a      	ldr	r2, [r3, #32]
 8004bac:	f240 4344 	movw	r3, #1092	; 0x444
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <HAL_TIM_PWM_Stop+0x96>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Stop+0xa6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd4:	e013      	b.n	8004bfe <HAL_TIM_PWM_Stop+0xce>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Stop+0xb6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be4:	e00b      	b.n	8004bfe <HAL_TIM_PWM_Stop+0xce>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Stop+0xc6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	e003      	b.n	8004bfe <HAL_TIM_PWM_Stop+0xce>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40010400 	.word	0x40010400

08004c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e0ae      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b0c      	cmp	r3, #12
 8004c3a:	f200 809f 	bhi.w	8004d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c79 	.word	0x08004c79
 8004c48:	08004d7d 	.word	0x08004d7d
 8004c4c:	08004d7d 	.word	0x08004d7d
 8004c50:	08004d7d 	.word	0x08004d7d
 8004c54:	08004cb9 	.word	0x08004cb9
 8004c58:	08004d7d 	.word	0x08004d7d
 8004c5c:	08004d7d 	.word	0x08004d7d
 8004c60:	08004d7d 	.word	0x08004d7d
 8004c64:	08004cfb 	.word	0x08004cfb
 8004c68:	08004d7d 	.word	0x08004d7d
 8004c6c:	08004d7d 	.word	0x08004d7d
 8004c70:	08004d7d 	.word	0x08004d7d
 8004c74:	08004d3b 	.word	0x08004d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f9f0 	bl	8005064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0208 	orr.w	r2, r2, #8
 8004c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0204 	bic.w	r2, r2, #4
 8004ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6999      	ldr	r1, [r3, #24]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	619a      	str	r2, [r3, #24]
      break;
 8004cb6:	e064      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fa40 	bl	8005144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6999      	ldr	r1, [r3, #24]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	021a      	lsls	r2, r3, #8
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	619a      	str	r2, [r3, #24]
      break;
 8004cf8:	e043      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fa95 	bl	8005230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0208 	orr.w	r2, r2, #8
 8004d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0204 	bic.w	r2, r2, #4
 8004d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69d9      	ldr	r1, [r3, #28]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	61da      	str	r2, [r3, #28]
      break;
 8004d38:	e023      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fae9 	bl	8005318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69d9      	ldr	r1, [r3, #28]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	021a      	lsls	r2, r3, #8
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	61da      	str	r2, [r3, #28]
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0b4      	b.n	8004f1a <HAL_TIM_ConfigClockSource+0x186>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	d03e      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0xd4>
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	f200 8087 	bhi.w	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	f000 8086 	beq.w	8004f06 <HAL_TIM_ConfigClockSource+0x172>
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d87f      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b70      	cmp	r3, #112	; 0x70
 8004e02:	d01a      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0xa6>
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d87b      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b60      	cmp	r3, #96	; 0x60
 8004e0a:	d050      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x11a>
 8004e0c:	2b60      	cmp	r3, #96	; 0x60
 8004e0e:	d877      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b50      	cmp	r3, #80	; 0x50
 8004e12:	d03c      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0xfa>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d873      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d058      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x13a>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d86f      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b30      	cmp	r3, #48	; 0x30
 8004e22:	d064      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d86b      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d060      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d867      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05c      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d05a      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e38:	e062      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6899      	ldr	r1, [r3, #8]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f000 fb35 	bl	80054b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	609a      	str	r2, [r3, #8]
      break;
 8004e66:	e04f      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6899      	ldr	r1, [r3, #8]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f000 fb1e 	bl	80054b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8a:	609a      	str	r2, [r3, #8]
      break;
 8004e8c:	e03c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 fa92 	bl	80053c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2150      	movs	r1, #80	; 0x50
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 faeb 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004eac:	e02c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 fab1 	bl	8005422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2160      	movs	r1, #96	; 0x60
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fadb 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e01c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 fa72 	bl	80053c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2140      	movs	r1, #64	; 0x40
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 facb 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004eec:	e00c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f000 fac2 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 8004efe:	e003      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      break;
 8004f04:	e000      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d00f      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3d      	ldr	r2, [pc, #244]	; (800503c <TIM_Base_SetConfig+0x118>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a3b      	ldr	r2, [pc, #236]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3a      	ldr	r2, [pc, #232]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d108      	bne.n	8004f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d02b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d027      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	; (800503c <TIM_Base_SetConfig+0x118>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d023      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01f      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d017      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_Base_SetConfig+0x128>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <TIM_Base_SetConfig+0x12c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00f      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a26      	ldr	r2, [pc, #152]	; (8005054 <TIM_Base_SetConfig+0x130>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a25      	ldr	r2, [pc, #148]	; (8005058 <TIM_Base_SetConfig+0x134>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a24      	ldr	r2, [pc, #144]	; (800505c <TIM_Base_SetConfig+0x138>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a23      	ldr	r2, [pc, #140]	; (8005060 <TIM_Base_SetConfig+0x13c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	615a      	str	r2, [r3, #20]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40010400 	.word	0x40010400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800
 8005058:	40001800 	.word	0x40001800
 800505c:	40001c00 	.word	0x40001c00
 8005060:	40002000 	.word	0x40002000

08005064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f023 0201 	bic.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 0302 	bic.w	r3, r3, #2
 80050ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a20      	ldr	r2, [pc, #128]	; (800513c <TIM_OC1_SetConfig+0xd8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_OC1_SetConfig+0x64>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <TIM_OC1_SetConfig+0xdc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d10c      	bne.n	80050e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 0308 	bic.w	r3, r3, #8
 80050ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a15      	ldr	r2, [pc, #84]	; (800513c <TIM_OC1_SetConfig+0xd8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_OC1_SetConfig+0x8e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a14      	ldr	r2, [pc, #80]	; (8005140 <TIM_OC1_SetConfig+0xdc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d111      	bne.n	8005116 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	621a      	str	r2, [r3, #32]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40010000 	.word	0x40010000
 8005140:	40010400 	.word	0x40010400

08005144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0210 	bic.w	r2, r3, #16
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0320 	bic.w	r3, r3, #32
 800518e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a22      	ldr	r2, [pc, #136]	; (8005228 <TIM_OC2_SetConfig+0xe4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_OC2_SetConfig+0x68>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a21      	ldr	r2, [pc, #132]	; (800522c <TIM_OC2_SetConfig+0xe8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d10d      	bne.n	80051c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <TIM_OC2_SetConfig+0xe4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC2_SetConfig+0x94>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a16      	ldr	r2, [pc, #88]	; (800522c <TIM_OC2_SetConfig+0xe8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d113      	bne.n	8005200 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40010400 	.word	0x40010400

08005230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a21      	ldr	r2, [pc, #132]	; (8005310 <TIM_OC3_SetConfig+0xe0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_OC3_SetConfig+0x66>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a20      	ldr	r2, [pc, #128]	; (8005314 <TIM_OC3_SetConfig+0xe4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10d      	bne.n	80052b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800529c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <TIM_OC3_SetConfig+0xe0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_OC3_SetConfig+0x92>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a15      	ldr	r2, [pc, #84]	; (8005314 <TIM_OC3_SetConfig+0xe4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d113      	bne.n	80052ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400

08005318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a12      	ldr	r2, [pc, #72]	; (80053bc <TIM_OC4_SetConfig+0xa4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC4_SetConfig+0x68>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <TIM_OC4_SetConfig+0xa8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d109      	bne.n	8005394 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	019b      	lsls	r3, r3, #6
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010400 	.word	0x40010400

080053c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 030a 	bic.w	r3, r3, #10
 8005400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005422:	b480      	push	{r7}
 8005424:	b087      	sub	sp, #28
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0210 	bic.w	r2, r3, #16
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800544c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	031b      	lsls	r3, r3, #12
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800545e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	f043 0307 	orr.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	431a      	orrs	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4313      	orrs	r3, r2
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2201      	movs	r2, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	43db      	mvns	r3, r3
 800551a:	401a      	ands	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005558:	2302      	movs	r3, #2
 800555a:	e05a      	b.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a21      	ldr	r2, [pc, #132]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d01d      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1a      	ldr	r2, [pc, #104]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a18      	ldr	r2, [pc, #96]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a17      	ldr	r2, [pc, #92]	; (8005634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d10c      	bne.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40010400 	.word	0x40010400
 8005634:	40014000 	.word	0x40014000
 8005638:	40001800 	.word	0x40001800

0800563c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800563c:	b084      	sub	sp, #16
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	f107 001c 	add.w	r0, r7, #28
 800564a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	2b01      	cmp	r3, #1
 8005652:	d122      	bne.n	800569a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800567c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d105      	bne.n	800568e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9c0 	bl	8005a14 <USB_CoreReset>
 8005694:	4603      	mov	r3, r0
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e01a      	b.n	80056d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f9b4 	bl	8005a14 <USB_CoreReset>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
 80056c2:	e005      	b.n	80056d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d10b      	bne.n	80056ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f043 0206 	orr.w	r2, r3, #6
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f043 0220 	orr.w	r2, r3, #32
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056fa:	b004      	add	sp, #16
 80056fc:	4770      	bx	lr

080056fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f023 0201 	bic.w	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d115      	bne.n	8005790 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005770:	2001      	movs	r0, #1
 8005772:	f7fb fd15 	bl	80011a0 <HAL_Delay>
      ms++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3301      	adds	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f93a 	bl	80059f6 <USB_GetMode>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d01e      	beq.n	80057c6 <USB_SetCurrentMode+0x84>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b31      	cmp	r3, #49	; 0x31
 800578c:	d9f0      	bls.n	8005770 <USB_SetCurrentMode+0x2e>
 800578e:	e01a      	b.n	80057c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d115      	bne.n	80057c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057a2:	2001      	movs	r0, #1
 80057a4:	f7fb fcfc 	bl	80011a0 <HAL_Delay>
      ms++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f921 	bl	80059f6 <USB_GetMode>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <USB_SetCurrentMode+0x84>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b31      	cmp	r3, #49	; 0x31
 80057be:	d9f0      	bls.n	80057a2 <USB_SetCurrentMode+0x60>
 80057c0:	e001      	b.n	80057c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e005      	b.n	80057d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b32      	cmp	r3, #50	; 0x32
 80057ca:	d101      	bne.n	80057d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3301      	adds	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4a13      	ldr	r2, [pc, #76]	; (8005840 <USB_FlushTxFifo+0x64>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e01b      	b.n	8005834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	daf2      	bge.n	80057ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	019b      	lsls	r3, r3, #6
 800580c:	f043 0220 	orr.w	r2, r3, #32
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a08      	ldr	r2, [pc, #32]	; (8005840 <USB_FlushTxFifo+0x64>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e006      	b.n	8005834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b20      	cmp	r3, #32
 8005830:	d0f0      	beq.n	8005814 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	00030d40 	.word	0x00030d40

08005844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3301      	adds	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a11      	ldr	r2, [pc, #68]	; (80058a0 <USB_FlushRxFifo+0x5c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e018      	b.n	8005894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	daf2      	bge.n	8005850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2210      	movs	r2, #16
 8005872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <USB_FlushRxFifo+0x5c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e006      	b.n	8005894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b10      	cmp	r3, #16
 8005890:	d0f0      	beq.n	8005874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	00030d40 	.word	0x00030d40

080058a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b089      	sub	sp, #36	; 0x24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	4611      	mov	r1, r2
 80058b0:	461a      	mov	r2, r3
 80058b2:	460b      	mov	r3, r1
 80058b4:	71fb      	strb	r3, [r7, #7]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d123      	bne.n	8005912 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058ca:	88bb      	ldrh	r3, [r7, #4]
 80058cc:	3303      	adds	r3, #3
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e018      	b.n	800590a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	031a      	lsls	r2, r3, #12
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	461a      	mov	r2, r3
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	3301      	adds	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3301      	adds	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	3301      	adds	r3, #1
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	429a      	cmp	r2, r3
 8005910:	d3e2      	bcc.n	80058d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3724      	adds	r7, #36	; 0x24
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005920:	b480      	push	{r7}
 8005922:	b08b      	sub	sp, #44	; 0x2c
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	089b      	lsrs	r3, r3, #2
 800593a:	b29b      	uxth	r3, r3
 800593c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005946:	2300      	movs	r3, #0
 8005948:	623b      	str	r3, [r7, #32]
 800594a:	e014      	b.n	8005976 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	601a      	str	r2, [r3, #0]
    pDest++;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	3301      	adds	r3, #1
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	3301      	adds	r3, #1
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	3301      	adds	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	3301      	adds	r3, #1
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	3301      	adds	r3, #1
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	429a      	cmp	r2, r3
 800597c:	d3e6      	bcc.n	800594c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800597e:	8bfb      	ldrh	r3, [r7, #30]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01e      	beq.n	80059c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598e:	461a      	mov	r2, r3
 8005990:	f107 0310 	add.w	r3, r7, #16
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	701a      	strb	r2, [r3, #0]
      i++;
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	3301      	adds	r3, #1
 80059ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	3301      	adds	r3, #1
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059b6:	8bfb      	ldrh	r3, [r7, #30]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059bc:	8bfb      	ldrh	r3, [r7, #30]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1ea      	bne.n	8005998 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	372c      	adds	r7, #44	; 0x2c
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4013      	ands	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0301 	and.w	r3, r3, #1
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4a13      	ldr	r2, [pc, #76]	; (8005a78 <USB_CoreReset+0x64>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e01b      	b.n	8005a6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	daf2      	bge.n	8005a20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f043 0201 	orr.w	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <USB_CoreReset+0x64>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e006      	b.n	8005a6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d0f0      	beq.n	8005a4a <USB_CoreReset+0x36>

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	00030d40 	.word	0x00030d40

08005a7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d10a      	bne.n	8005aee <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ae6:	f043 0304 	orr.w	r3, r3, #4
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e014      	b.n	8005b18 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005afc:	f023 0304 	bic.w	r3, r3, #4
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e009      	b.n	8005b18 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b12:	f023 0304 	bic.w	r3, r3, #4
 8005b16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b18:	2110      	movs	r1, #16
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fe5e 	bl	80057dc <USB_FlushTxFifo>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fe8a 	bl	8005844 <USB_FlushRxFifo>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e015      	b.n	8005b6c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	461a      	mov	r2, r3
 8005b62:	2300      	movs	r3, #0
 8005b64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d3e5      	bcc.n	8005b40 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b80:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <USB_HostInit+0x16c>)
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a13      	ldr	r2, [pc, #76]	; (8005bec <USB_HostInit+0x170>)
 8005ba0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ba4:	e009      	b.n	8005bba <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2280      	movs	r2, #128	; 0x80
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <USB_HostInit+0x174>)
 8005bb0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a0f      	ldr	r2, [pc, #60]	; (8005bf4 <USB_HostInit+0x178>)
 8005bb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f043 0210 	orr.w	r2, r3, #16
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <USB_HostInit+0x17c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be4:	b004      	add	sp, #16
 8005be6:	4770      	bx	lr
 8005be8:	01000200 	.word	0x01000200
 8005bec:	00e00300 	.word	0x00e00300
 8005bf0:	00600080 	.word	0x00600080
 8005bf4:	004000e0 	.word	0x004000e0
 8005bf8:	a3200008 	.word	0xa3200008

08005bfc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c34:	4313      	orrs	r3, r2
 8005c36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d107      	bne.n	8005c4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c44:	461a      	mov	r2, r3
 8005c46:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c4a:	6053      	str	r3, [r2, #4]
 8005c4c:	e009      	b.n	8005c62 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d106      	bne.n	8005c62 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c60:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ca0:	2064      	movs	r0, #100	; 0x64
 8005ca2:	f7fb fa7d 	bl	80011a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005cb4:	200a      	movs	r0, #10
 8005cb6:	f7fb fa73 	bl	80011a0 <HAL_Delay>

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ce8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <USB_DriveVbus+0x44>
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d106      	bne.n	8005d08 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d06:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d12:	d109      	bne.n	8005d28 <USB_DriveVbus+0x64>
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d26:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	0c5b      	lsrs	r3, r3, #17
 8005d54:	f003 0303 	and.w	r3, r3, #3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	b29b      	uxth	r3, r3
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	70fb      	strb	r3, [r7, #3]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	70bb      	strb	r3, [r7, #2]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	461a      	mov	r2, r3
 8005db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dbc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005dbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d87e      	bhi.n	8005ec4 <USB_HC_Init+0x13c>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <USB_HC_Init+0x44>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005e87 	.word	0x08005e87
 8005dd4:	08005ddd 	.word	0x08005ddd
 8005dd8:	08005e49 	.word	0x08005e49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	461a      	mov	r2, r3
 8005dea:	f240 439d 	movw	r3, #1181	; 0x49d
 8005dee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005df0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	da10      	bge.n	8005e1a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e16:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e18:	e057      	b.n	8005eca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d051      	beq.n	8005eca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	78fa      	ldrb	r2, [r7, #3]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e44:	60d3      	str	r3, [r2, #12]
      break;
 8005e46:	e040      	b.n	8005eca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	461a      	mov	r2, r3
 8005e56:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	da34      	bge.n	8005ece <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	78fa      	ldrb	r2, [r7, #3]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e84:	e023      	b.n	8005ece <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e92:	461a      	mov	r2, r3
 8005e94:	f240 2325 	movw	r3, #549	; 0x225
 8005e98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da17      	bge.n	8005ed2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ebc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ec0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ec2:	e006      	b.n	8005ed2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	77fb      	strb	r3, [r7, #31]
      break;
 8005ec8:	e004      	b.n	8005ed4 <USB_HC_Init+0x14c>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <USB_HC_Init+0x14c>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <USB_HC_Init+0x14c>
      break;
 8005ed2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eee:	f043 0302 	orr.w	r3, r3, #2
 8005ef2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2101      	movs	r1, #1
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	6939      	ldr	r1, [r7, #16]
 8005f0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	da03      	bge.n	8005f2e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e001      	b.n	8005f32 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff feff 	bl	8005d36 <USB_GetHostSpeed>
 8005f38:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d106      	bne.n	8005f50 <USB_HC_Init+0x1c8>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d003      	beq.n	8005f50 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	e001      	b.n	8005f54 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f54:	787b      	ldrb	r3, [r7, #1]
 8005f56:	059b      	lsls	r3, r3, #22
 8005f58:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f5c:	78bb      	ldrb	r3, [r7, #2]
 8005f5e:	02db      	lsls	r3, r3, #11
 8005f60:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f64:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f6a:	049b      	lsls	r3, r3, #18
 8005f6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	0159      	lsls	r1, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	440b      	add	r3, r1
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f90:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d003      	beq.n	8005fa2 <USB_HC_Init+0x21a>
 8005f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d10f      	bne.n	8005fc2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fc0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08c      	sub	sp, #48	; 0x30
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fe8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d02d      	beq.n	8006052 <USB_HC_StartXfer+0x86>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	791b      	ldrb	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d129      	bne.n	8006052 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d117      	bne.n	8006034 <USB_HC_StartXfer+0x68>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	79db      	ldrb	r3, [r3, #7]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <USB_HC_StartXfer+0x48>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	79db      	ldrb	r3, [r3, #7]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d10f      	bne.n	8006034 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <USB_HC_StartXfer+0x86>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	795b      	ldrb	r3, [r3, #5]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d107      	bne.n	8006052 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	4619      	mov	r1, r3
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fa0f 	bl	800646c <USB_DoPing>
      return HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e0f8      	b.n	8006244 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d018      	beq.n	800608c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	8912      	ldrh	r2, [r2, #8]
 8006062:	4413      	add	r3, r2
 8006064:	3b01      	subs	r3, #1
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	8912      	ldrh	r2, [r2, #8]
 800606a:	fbb3 f3f2 	udiv	r3, r3, r2
 800606e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006070:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006072:	8b7b      	ldrh	r3, [r7, #26]
 8006074:	429a      	cmp	r2, r3
 8006076:	d90b      	bls.n	8006090 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006078:	8b7b      	ldrh	r3, [r7, #26]
 800607a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800607c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	8912      	ldrh	r2, [r2, #8]
 8006082:	fb03 f202 	mul.w	r2, r3, r2
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	611a      	str	r2, [r3, #16]
 800608a:	e001      	b.n	8006090 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800608c:	2301      	movs	r3, #1
 800608e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	78db      	ldrb	r3, [r3, #3]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	8912      	ldrh	r2, [r2, #8]
 800609e:	fb03 f202 	mul.w	r2, r3, r2
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	611a      	str	r2, [r3, #16]
 80060a6:	e003      	b.n	80060b0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	695a      	ldr	r2, [r3, #20]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ba:	04d9      	lsls	r1, r3, #19
 80060bc:	4b63      	ldr	r3, [pc, #396]	; (800624c <USB_HC_StartXfer+0x280>)
 80060be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	7a9b      	ldrb	r3, [r3, #10]
 80060c6:	075b      	lsls	r3, r3, #29
 80060c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060cc:	69f9      	ldr	r1, [r7, #28]
 80060ce:	0148      	lsls	r0, r1, #5
 80060d0:	6a39      	ldr	r1, [r7, #32]
 80060d2:	4401      	add	r1, r0
 80060d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	68d9      	ldr	r1, [r3, #12]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	460a      	mov	r2, r1
 80060f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006128:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800612c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	4413      	add	r3, r2
 8006136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	7e7b      	ldrb	r3, [r7, #25]
 800613e:	075b      	lsls	r3, r3, #29
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	0148      	lsls	r0, r1, #5
 8006144:	6a39      	ldr	r1, [r7, #32]
 8006146:	4401      	add	r1, r0
 8006148:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006166:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	e003      	b.n	8006182 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006180:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006188:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	461a      	mov	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e04e      	b.n	8006244 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d149      	bne.n	8006242 <USB_HC_StartXfer+0x276>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d045      	beq.n	8006242 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	79db      	ldrb	r3, [r3, #7]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d830      	bhi.n	8006220 <USB_HC_StartXfer+0x254>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <USB_HC_StartXfer+0x1f8>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061d5 	.word	0x080061d5
 80061c8:	080061f9 	.word	0x080061f9
 80061cc:	080061d5 	.word	0x080061d5
 80061d0:	080061f9 	.word	0x080061f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	3303      	adds	r3, #3
 80061da:	089b      	lsrs	r3, r3, #2
 80061dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061de:	8afa      	ldrh	r2, [r7, #22]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d91c      	bls.n	8006224 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f043 0220 	orr.w	r2, r3, #32
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80061f6:	e015      	b.n	8006224 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	3303      	adds	r3, #3
 80061fe:	089b      	lsrs	r3, r3, #2
 8006200:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006202:	8afa      	ldrh	r2, [r7, #22]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	b29b      	uxth	r3, r3
 800620e:	429a      	cmp	r2, r3
 8006210:	d90a      	bls.n	8006228 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	619a      	str	r2, [r3, #24]
        }
        break;
 800621e:	e003      	b.n	8006228 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <USB_HC_StartXfer+0x25e>
        break;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <USB_HC_StartXfer+0x25e>
        break;
 8006228:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	68d9      	ldr	r1, [r3, #12]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	785a      	ldrb	r2, [r3, #1]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	b29b      	uxth	r3, r3
 8006238:	2000      	movs	r0, #0
 800623a:	9000      	str	r0, [sp, #0]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff fb31 	bl	80058a4 <USB_WritePacket>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3728      	adds	r7, #40	; 0x28
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	1ff80000 	.word	0x1ff80000

08006250 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	b29b      	uxth	r3, r3
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006272:	b480      	push	{r7}
 8006274:	b089      	sub	sp, #36	; 0x24
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	0c9b      	lsrs	r3, r3, #18
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	0fdb      	lsrs	r3, r3, #31
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d104      	bne.n	80062cc <USB_HC_Halt+0x5a>
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e0c8      	b.n	800645e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <USB_HC_Halt+0x66>
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d163      	bne.n	80063a0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 80ab 	bne.w	800645c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d133      	bne.n	800637a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006330:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	440a      	add	r2, r1
 8006348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006350:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800635e:	d81d      	bhi.n	800639c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006376:	d0ec      	beq.n	8006352 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006378:	e070      	b.n	800645c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006398:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800639a:	e05f      	b.n	800645c <USB_HC_Halt+0x1ea>
            break;
 800639c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800639e:	e05d      	b.n	800645c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d133      	bne.n	8006438 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800640e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800641c:	d81d      	bhi.n	800645a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006434:	d0ec      	beq.n	8006410 <USB_HC_Halt+0x19e>
 8006436:	e011      	b.n	800645c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006452:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e000      	b.n	800645c <USB_HC_Halt+0x1ea>
          break;
 800645a:	bf00      	nop
    }
  }

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3724      	adds	r7, #36	; 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006480:	2301      	movs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	04da      	lsls	r2, r3, #19
 8006488:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <USB_DoPing+0x74>)
 800648a:	4013      	ands	r3, r2
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	440a      	add	r2, r1
 8006494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800649c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ca:	461a      	mov	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	1ff80000 	.word	0x1ff80000

080064e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff f911 	bl	8005720 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064fe:	2110      	movs	r1, #16
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff f96b 	bl	80057dc <USB_FlushTxFifo>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff f997 	bl	8005844 <USB_FlushRxFifo>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006520:	2300      	movs	r3, #0
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e01f      	b.n	8006566 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006544:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800654c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	461a      	mov	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	3301      	adds	r3, #1
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b0f      	cmp	r3, #15
 800656a:	d9dc      	bls.n	8006526 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e034      	b.n	80065dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	4413      	add	r3, r2
 800657a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006588:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006590:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006598:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	461a      	mov	r2, r3
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b8:	d80c      	bhi.n	80065d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d0:	d0ec      	beq.n	80065ac <USB_StopHost+0xc8>
 80065d2:	e000      	b.n	80065d6 <USB_StopHost+0xf2>
        break;
 80065d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	3301      	adds	r3, #1
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b0f      	cmp	r3, #15
 80065e0:	d9c7      	bls.n	8006572 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e8:	461a      	mov	r2, r3
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff f880 	bl	80056fe <USB_EnableGlobalInt>

  return ret;
 80065fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b089      	sub	sp, #36	; 0x24
 800660c:	af04      	add	r7, sp, #16
 800660e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006610:	2301      	movs	r3, #1
 8006612:	2202      	movs	r2, #2
 8006614:	2102      	movs	r1, #2
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fc66 	bl	8006ee8 <USBH_FindInterface>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2bff      	cmp	r3, #255	; 0xff
 8006624:	d002      	beq.n	800662c <USBH_CDC_InterfaceInit+0x24>
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d901      	bls.n	8006630 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800662c:	2302      	movs	r3, #2
 800662e:	e13d      	b.n	80068ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fc3b 	bl	8006eb0 <USBH_SelectInterface>
 800663a:	4603      	mov	r3, r0
 800663c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006644:	2302      	movs	r3, #2
 8006646:	e131      	b.n	80068ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800664e:	2050      	movs	r0, #80	; 0x50
 8006650:	f002 fafa 	bl	8008c48 <malloc>
 8006654:	4603      	mov	r3, r0
 8006656:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006668:	2302      	movs	r3, #2
 800666a:	e11f      	b.n	80068ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800666c:	2250      	movs	r2, #80	; 0x50
 800666e:	2100      	movs	r1, #0
 8006670:	68b8      	ldr	r0, [r7, #8]
 8006672:	f002 faf9 	bl	8008c68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	211a      	movs	r1, #26
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	4413      	add	r3, r2
 8006682:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b25b      	sxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	da15      	bge.n	80066ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	211a      	movs	r1, #26
 8006694:	fb01 f303 	mul.w	r3, r1, r3
 8006698:	4413      	add	r3, r2
 800669a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800669e:	781a      	ldrb	r2, [r3, #0]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	211a      	movs	r1, #26
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066b4:	881a      	ldrh	r2, [r3, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 ff2c 	bl	800851e <USBH_AllocPipe>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	7819      	ldrb	r1, [r3, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	7858      	ldrb	r0, [r3, #1]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	8952      	ldrh	r2, [r2, #10]
 80066e6:	9202      	str	r2, [sp, #8]
 80066e8:	2203      	movs	r2, #3
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4623      	mov	r3, r4
 80066f0:	4602      	mov	r2, r0
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 fee4 	bl	80084c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 f9f3 	bl	8008aec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006706:	2300      	movs	r3, #0
 8006708:	2200      	movs	r2, #0
 800670a:	210a      	movs	r1, #10
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fbeb 	bl	8006ee8 <USBH_FindInterface>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2bff      	cmp	r3, #255	; 0xff
 800671a:	d002      	beq.n	8006722 <USBH_CDC_InterfaceInit+0x11a>
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d901      	bls.n	8006726 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006722:	2302      	movs	r3, #2
 8006724:	e0c2      	b.n	80068ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	211a      	movs	r1, #26
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	4413      	add	r3, r2
 8006732:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	b25b      	sxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	da16      	bge.n	800676c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	211a      	movs	r1, #26
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	211a      	movs	r1, #26
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	4413      	add	r3, r2
 8006760:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006764:	881a      	ldrh	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	835a      	strh	r2, [r3, #26]
 800676a:	e015      	b.n	8006798 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	211a      	movs	r1, #26
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	211a      	movs	r1, #26
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006792:	881a      	ldrh	r2, [r3, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	211a      	movs	r1, #26
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	4413      	add	r3, r2
 80067a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b25b      	sxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da16      	bge.n	80067de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	211a      	movs	r1, #26
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	4413      	add	r3, r2
 80067bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067c0:	781a      	ldrb	r2, [r3, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	211a      	movs	r1, #26
 80067cc:	fb01 f303 	mul.w	r3, r1, r3
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067d6:	881a      	ldrh	r2, [r3, #0]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	835a      	strh	r2, [r3, #26]
 80067dc:	e015      	b.n	800680a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	211a      	movs	r1, #26
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	211a      	movs	r1, #26
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006804:	881a      	ldrh	r2, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	7b9b      	ldrb	r3, [r3, #14]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fe84 	bl	800851e <USBH_AllocPipe>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	7bdb      	ldrb	r3, [r3, #15]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fe7a 	bl	800851e <USBH_AllocPipe>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	7b59      	ldrb	r1, [r3, #13]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	7b98      	ldrb	r0, [r3, #14]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	8b12      	ldrh	r2, [r2, #24]
 800684a:	9202      	str	r2, [sp, #8]
 800684c:	2202      	movs	r2, #2
 800684e:	9201      	str	r2, [sp, #4]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4623      	mov	r3, r4
 8006854:	4602      	mov	r2, r0
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 fe32 	bl	80084c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	7b19      	ldrb	r1, [r3, #12]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	7bd8      	ldrb	r0, [r3, #15]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	8b52      	ldrh	r2, [r2, #26]
 8006874:	9202      	str	r2, [sp, #8]
 8006876:	2202      	movs	r2, #2
 8006878:	9201      	str	r2, [sp, #4]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	4623      	mov	r3, r4
 800687e:	4602      	mov	r2, r0
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fe1d 	bl	80084c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	7b5b      	ldrb	r3, [r3, #13]
 8006892:	2200      	movs	r2, #0
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f002 f928 	bl	8008aec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	7b1b      	ldrb	r3, [r3, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f002 f921 	bl	8008aec <USBH_LL_SetToggle>

  return USBH_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd90      	pop	{r4, r7, pc}

080068b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fe12 	bl	80084fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fe3d 	bl	8008560 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	7b1b      	ldrb	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	7b1b      	ldrb	r3, [r3, #12]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fdff 	bl	80084fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	7b1b      	ldrb	r3, [r3, #12]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fe2a 	bl	8008560 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	7b5b      	ldrb	r3, [r3, #13]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	7b5b      	ldrb	r3, [r3, #13]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fdec 	bl	80084fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	7b5b      	ldrb	r3, [r3, #13]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fe17 	bl	8008560 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	4618      	mov	r0, r3
 800694e:	f002 f983 	bl	8008c58 <free>
    phost->pActiveClass->pData = 0U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006958:	2200      	movs	r2, #0
 800695a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3340      	adds	r3, #64	; 0x40
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8b1 	bl	8006ae6 <GetLineCoding>
 8006984:	4603      	mov	r3, r0
 8006986:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006994:	2102      	movs	r1, #2
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800699a:	7afb      	ldrb	r3, [r7, #11]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d877      	bhi.n	8006ab8 <USBH_CDC_Process+0x114>
 80069c8:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <USBH_CDC_Process+0x2c>)
 80069ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ce:	bf00      	nop
 80069d0:	080069e5 	.word	0x080069e5
 80069d4:	080069eb 	.word	0x080069eb
 80069d8:	08006a1b 	.word	0x08006a1b
 80069dc:	08006a8f 	.word	0x08006a8f
 80069e0:	08006a9d 	.word	0x08006a9d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
      break;
 80069e8:	e06d      	b.n	8006ac6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f897 	bl	8006b24 <SetLineCoding>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a08:	e058      	b.n	8006abc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d055      	beq.n	8006abc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2204      	movs	r2, #4
 8006a14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a18:	e050      	b.n	8006abc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	3340      	adds	r3, #64	; 0x40
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f860 	bl	8006ae6 <GetLineCoding>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d126      	bne.n	8006a7e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a42:	791b      	ldrb	r3, [r3, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d13b      	bne.n	8006ac0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a52:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d133      	bne.n	8006ac0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d12b      	bne.n	8006ac0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a70:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d124      	bne.n	8006ac0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f958 	bl	8006d2c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a7c:	e020      	b.n	8006ac0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d01d      	beq.n	8006ac0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2204      	movs	r2, #4
 8006a88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a8c:	e018      	b.n	8006ac0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f867 	bl	8006b62 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f8da 	bl	8006c4e <CDC_ProcessReception>
      break;
 8006a9a:	e014      	b.n	8006ac6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 ffef 	bl	8007a82 <USBH_ClrFeature>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ab6:	e005      	b.n	8006ac4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ab8:	bf00      	nop
 8006aba:	e004      	b.n	8006ac6 <USBH_CDC_Process+0x122>
      break;
 8006abc:	bf00      	nop
 8006abe:	e002      	b.n	8006ac6 <USBH_CDC_Process+0x122>
      break;
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <USBH_CDC_Process+0x122>
      break;
 8006ac4:	bf00      	nop

  }

  return status;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	22a1      	movs	r2, #161	; 0xa1
 8006af4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2207      	movs	r2, #7
 8006b0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2207      	movs	r2, #7
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 fa81 	bl	800801c <USBH_CtlReq>
 8006b1a:	4603      	mov	r3, r0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2221      	movs	r2, #33	; 0x21
 8006b32:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2207      	movs	r2, #7
 8006b4a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2207      	movs	r2, #7
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fa62 	bl	800801c <USBH_CtlReq>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af02      	add	r7, sp, #8
 8006b68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d002      	beq.n	8006b88 <CDC_ProcessTransmission+0x26>
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d023      	beq.n	8006bce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b86:	e05e      	b.n	8006c46 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	8b12      	ldrh	r2, [r2, #24]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d90b      	bls.n	8006bac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	69d9      	ldr	r1, [r3, #28]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8b1a      	ldrh	r2, [r3, #24]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	7b5b      	ldrb	r3, [r3, #13]
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	9000      	str	r0, [sp, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 fc48 	bl	800843a <USBH_BulkSendData>
 8006baa:	e00b      	b.n	8006bc4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	7b5b      	ldrb	r3, [r3, #13]
 8006bba:	2001      	movs	r0, #1
 8006bbc:	9000      	str	r0, [sp, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fc3b 	bl	800843a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bcc:	e03b      	b.n	8006c46 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	7b5b      	ldrb	r3, [r3, #13]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 ff5f 	bl	8008a98 <USBH_LL_GetURBState>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d128      	bne.n	8006c36 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	8b12      	ldrh	r2, [r2, #24]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d90e      	bls.n	8006c0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	8b12      	ldrh	r2, [r2, #24]
 8006bf8:	1a9a      	subs	r2, r3, r2
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	8b12      	ldrh	r2, [r2, #24]
 8006c06:	441a      	add	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	61da      	str	r2, [r3, #28]
 8006c0c:	e002      	b.n	8006c14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c24:	e00e      	b.n	8006c44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f868 	bl	8006d04 <USBH_CDC_TransmitCallback>
      break;
 8006c34:	e006      	b.n	8006c44 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d103      	bne.n	8006c44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c44:	bf00      	nop
  }
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d002      	beq.n	8006c74 <CDC_ProcessReception+0x26>
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d00e      	beq.n	8006c90 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c72:	e043      	b.n	8006cfc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	6a19      	ldr	r1, [r3, #32]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	8b5a      	ldrh	r2, [r3, #26]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	7b1b      	ldrb	r3, [r3, #12]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fbff 	bl	8008484 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2204      	movs	r2, #4
 8006c8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c8e:	e035      	b.n	8006cfc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	7b1b      	ldrb	r3, [r3, #12]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fefe 	bl	8008a98 <USBH_LL_GetURBState>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ca0:	7cfb      	ldrb	r3, [r7, #19]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d129      	bne.n	8006cfa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	7b1b      	ldrb	r3, [r3, #12]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fe61 	bl	8008974 <USBH_LL_GetLastXferSize>
 8006cb2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d016      	beq.n	8006cec <CDC_ProcessReception+0x9e>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	8b5b      	ldrh	r3, [r3, #26]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d910      	bls.n	8006cec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1ad2      	subs	r2, r2, r3
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	441a      	add	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cea:	e006      	b.n	8006cfa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f80f 	bl	8006d18 <USBH_CDC_ReceiveCallback>
      break;
 8006cfa:	bf00      	nop
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d54:	2302      	movs	r3, #2
 8006d56:	e029      	b.n	8006dac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	79fa      	ldrb	r2, [r7, #7]
 8006d5c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f81f 	bl	8006db4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f001 fd31 	bl	800880c <USBH_LL_Init>

  return USBH_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e009      	b.n	8006dda <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	33e0      	adds	r3, #224	; 0xe0
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b0f      	cmp	r3, #15
 8006dde:	d9f2      	bls.n	8006dc6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	e009      	b.n	8006dfa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e00:	d3f1      	bcc.n	8006de6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2240      	movs	r2, #64	; 0x40
 8006e26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d016      	beq.n	8006e9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10e      	bne.n	8006e98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e80:	1c59      	adds	r1, r3, #1
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	33de      	adds	r3, #222	; 0xde
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]
 8006e96:	e004      	b.n	8006ea2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	73fb      	strb	r3, [r7, #15]
 8006e9c:	e001      	b.n	8006ea2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ec6:	78fa      	ldrb	r2, [r7, #3]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d204      	bcs.n	8006ed6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ed4:	e001      	b.n	8006eda <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	70fb      	strb	r3, [r7, #3]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70bb      	strb	r3, [r7, #2]
 8006efe:	4613      	mov	r3, r2
 8006f00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f12:	e025      	b.n	8006f60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	221a      	movs	r2, #26
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	3302      	adds	r3, #2
 8006f24:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	795b      	ldrb	r3, [r3, #5]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d002      	beq.n	8006f36 <USBH_FindInterface+0x4e>
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	2bff      	cmp	r3, #255	; 0xff
 8006f34:	d111      	bne.n	8006f5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f3a:	78ba      	ldrb	r2, [r7, #2]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d002      	beq.n	8006f46 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f40:	78bb      	ldrb	r3, [r7, #2]
 8006f42:	2bff      	cmp	r3, #255	; 0xff
 8006f44:	d109      	bne.n	8006f5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f4a:	787a      	ldrb	r2, [r7, #1]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d002      	beq.n	8006f56 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f50:	787b      	ldrb	r3, [r7, #1]
 8006f52:	2bff      	cmp	r3, #255	; 0xff
 8006f54:	d101      	bne.n	8006f5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	e006      	b.n	8006f68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d9d6      	bls.n	8006f14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f66:	23ff      	movs	r3, #255	; 0xff
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fc81 	bl	8008884 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f82:	2101      	movs	r1, #1
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fd9a 	bl	8008abe <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af04      	add	r7, sp, #16
 8006f9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d102      	bne.n	8006fb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b0b      	cmp	r3, #11
 8006fbe:	f200 81be 	bhi.w	800733e <USBH_Process+0x3aa>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <USBH_Process+0x34>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006ff9 	.word	0x08006ff9
 8006fcc:	0800702b 	.word	0x0800702b
 8006fd0:	08007093 	.word	0x08007093
 8006fd4:	080072d9 	.word	0x080072d9
 8006fd8:	0800733f 	.word	0x0800733f
 8006fdc:	08007137 	.word	0x08007137
 8006fe0:	0800727f 	.word	0x0800727f
 8006fe4:	0800716d 	.word	0x0800716d
 8006fe8:	0800718d 	.word	0x0800718d
 8006fec:	080071ad 	.word	0x080071ad
 8006ff0:	080071f1 	.word	0x080071f1
 8006ff4:	080072c1 	.word	0x080072c1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 819e 	beq.w	8007342 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800700c:	20c8      	movs	r0, #200	; 0xc8
 800700e:	f001 fd9d 	bl	8008b4c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fc93 	bl	800893e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007028:	e18b      	b.n	8007342 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007030:	2b01      	cmp	r3, #1
 8007032:	d107      	bne.n	8007044 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007042:	e18d      	b.n	8007360 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800704a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800704e:	d914      	bls.n	800707a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007056:	3301      	adds	r3, #1
 8007058:	b2da      	uxtb	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007066:	2b03      	cmp	r3, #3
 8007068:	d903      	bls.n	8007072 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	220d      	movs	r2, #13
 800706e:	701a      	strb	r2, [r3, #0]
      break;
 8007070:	e176      	b.n	8007360 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]
      break;
 8007078:	e172      	b.n	8007360 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007080:	f103 020a 	add.w	r2, r3, #10
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800708a:	200a      	movs	r0, #10
 800708c:	f001 fd5e 	bl	8008b4c <USBH_Delay>
      break;
 8007090:	e166      	b.n	8007360 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070a2:	2104      	movs	r1, #4
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070a8:	2064      	movs	r0, #100	; 0x64
 80070aa:	f001 fd4f 	bl	8008b4c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 fc1e 	bl	80088f0 <USBH_LL_GetSpeed>
 80070b4:	4603      	mov	r3, r0
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2205      	movs	r2, #5
 80070c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 fa29 	bl	800851e <USBH_AllocPipe>
 80070cc:	4603      	mov	r3, r0
 80070ce:	461a      	mov	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80070d4:	2180      	movs	r1, #128	; 0x80
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fa21 	bl	800851e <USBH_AllocPipe>
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	7919      	ldrb	r1, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070f8:	b292      	uxth	r2, r2
 80070fa:	9202      	str	r2, [sp, #8]
 80070fc:	2200      	movs	r2, #0
 80070fe:	9201      	str	r2, [sp, #4]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	4603      	mov	r3, r0
 8007104:	2280      	movs	r2, #128	; 0x80
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 f9da 	bl	80084c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	7959      	ldrb	r1, [r3, #5]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007120:	b292      	uxth	r2, r2
 8007122:	9202      	str	r2, [sp, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	9201      	str	r2, [sp, #4]
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	4603      	mov	r3, r0
 800712c:	2200      	movs	r2, #0
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f9c6 	bl	80084c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007134:	e114      	b.n	8007360 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f918 	bl	800736c <USBH_HandleEnum>
 800713c:	4603      	mov	r3, r0
 800713e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 80fe 	bne.w	8007346 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007158:	2b01      	cmp	r3, #1
 800715a:	d103      	bne.n	8007164 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2208      	movs	r2, #8
 8007160:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007162:	e0f0      	b.n	8007346 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2207      	movs	r2, #7
 8007168:	701a      	strb	r2, [r3, #0]
      break;
 800716a:	e0ec      	b.n	8007346 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80e9 	beq.w	800734a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800717e:	2101      	movs	r1, #1
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2208      	movs	r2, #8
 8007188:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800718a:	e0de      	b.n	800734a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007192:	b29b      	uxth	r3, r3
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fc2c 	bl	80079f4 <USBH_SetCfg>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f040 80d5 	bne.w	800734e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2209      	movs	r2, #9
 80071a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071aa:	e0d0      	b.n	800734e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80071ba:	2101      	movs	r1, #1
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fc3c 	bl	8007a3a <USBH_SetFeature>
 80071c2:	4603      	mov	r3, r0
 80071c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	220a      	movs	r2, #10
 80071d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071d4:	e0bd      	b.n	8007352 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b03      	cmp	r3, #3
 80071dc:	f040 80b9 	bne.w	8007352 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	220a      	movs	r2, #10
 80071e4:	701a      	strb	r2, [r3, #0]
      break;
 80071e6:	e0b4      	b.n	8007352 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	220a      	movs	r2, #10
 80071ec:	701a      	strb	r2, [r3, #0]
      break;
 80071ee:	e0b0      	b.n	8007352 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 80ad 	beq.w	8007356 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
 8007208:	e016      	b.n	8007238 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800720a:	7bfa      	ldrb	r2, [r7, #15]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	32de      	adds	r2, #222	; 0xde
 8007210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007214:	791a      	ldrb	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800721c:	429a      	cmp	r2, r3
 800721e:	d108      	bne.n	8007232 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007220:	7bfa      	ldrb	r2, [r7, #15]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32de      	adds	r2, #222	; 0xde
 8007226:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007230:	e005      	b.n	800723e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	3301      	adds	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0e5      	beq.n	800720a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d016      	beq.n	8007276 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2206      	movs	r2, #6
 800725e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007266:	2103      	movs	r1, #3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800726c:	e073      	b.n	8007356 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	220d      	movs	r2, #13
 8007272:	701a      	strb	r2, [r3, #0]
      break;
 8007274:	e06f      	b.n	8007356 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	220d      	movs	r2, #13
 800727a:	701a      	strb	r2, [r3, #0]
      break;
 800727c:	e06b      	b.n	8007356 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d017      	beq.n	80072b8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
 8007294:	4603      	mov	r3, r0
 8007296:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	220b      	movs	r2, #11
 80072a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072a6:	e058      	b.n	800735a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d154      	bne.n	800735a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	220d      	movs	r2, #13
 80072b4:	701a      	strb	r2, [r3, #0]
      break;
 80072b6:	e050      	b.n	800735a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	220d      	movs	r2, #13
 80072bc:	701a      	strb	r2, [r3, #0]
      break;
 80072be:	e04c      	b.n	800735a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d049      	beq.n	800735e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
      }
      break;
 80072d6:	e042      	b.n	800735e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff fd67 	bl	8006db4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d009      	beq.n	8007304 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d005      	beq.n	800731a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007314:	2105      	movs	r1, #5
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d107      	bne.n	8007336 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fe20 	bl	8006f74 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007334:	e014      	b.n	8007360 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 faa4 	bl	8008884 <USBH_LL_Start>
      break;
 800733c:	e010      	b.n	8007360 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800733e:	bf00      	nop
 8007340:	e00e      	b.n	8007360 <USBH_Process+0x3cc>
      break;
 8007342:	bf00      	nop
 8007344:	e00c      	b.n	8007360 <USBH_Process+0x3cc>
      break;
 8007346:	bf00      	nop
 8007348:	e00a      	b.n	8007360 <USBH_Process+0x3cc>
    break;
 800734a:	bf00      	nop
 800734c:	e008      	b.n	8007360 <USBH_Process+0x3cc>
      break;
 800734e:	bf00      	nop
 8007350:	e006      	b.n	8007360 <USBH_Process+0x3cc>
      break;
 8007352:	bf00      	nop
 8007354:	e004      	b.n	8007360 <USBH_Process+0x3cc>
      break;
 8007356:	bf00      	nop
 8007358:	e002      	b.n	8007360 <USBH_Process+0x3cc>
      break;
 800735a:	bf00      	nop
 800735c:	e000      	b.n	8007360 <USBH_Process+0x3cc>
      break;
 800735e:	bf00      	nop
  }
  return USBH_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop

0800736c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af04      	add	r7, sp, #16
 8007372:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007374:	2301      	movs	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007378:	2301      	movs	r3, #1
 800737a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b07      	cmp	r3, #7
 8007382:	f200 81c1 	bhi.w	8007708 <USBH_HandleEnum+0x39c>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <USBH_HandleEnum+0x20>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073ad 	.word	0x080073ad
 8007390:	0800746b 	.word	0x0800746b
 8007394:	080074d5 	.word	0x080074d5
 8007398:	08007563 	.word	0x08007563
 800739c:	080075cd 	.word	0x080075cd
 80073a0:	0800763d 	.word	0x0800763d
 80073a4:	08007683 	.word	0x08007683
 80073a8:	080076c9 	.word	0x080076c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80073ac:	2108      	movs	r1, #8
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa50 	bl	8007854 <USBH_Get_DevDesc>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d130      	bne.n	8007420 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7919      	ldrb	r1, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073e2:	b292      	uxth	r2, r2
 80073e4:	9202      	str	r2, [sp, #8]
 80073e6:	2200      	movs	r2, #0
 80073e8:	9201      	str	r2, [sp, #4]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	4603      	mov	r3, r0
 80073ee:	2280      	movs	r2, #128	; 0x80
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 f865 	bl	80084c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7959      	ldrb	r1, [r3, #5]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800740a:	b292      	uxth	r2, r2
 800740c:	9202      	str	r2, [sp, #8]
 800740e:	2200      	movs	r2, #0
 8007410:	9201      	str	r2, [sp, #4]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	4603      	mov	r3, r0
 8007416:	2200      	movs	r2, #0
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f851 	bl	80084c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800741e:	e175      	b.n	800770c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b03      	cmp	r3, #3
 8007424:	f040 8172 	bne.w	800770c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800742e:	3301      	adds	r3, #1
 8007430:	b2da      	uxtb	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800743e:	2b03      	cmp	r3, #3
 8007440:	d903      	bls.n	800744a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	220d      	movs	r2, #13
 8007446:	701a      	strb	r2, [r3, #0]
      break;
 8007448:	e160      	b.n	800770c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	795b      	ldrb	r3, [r3, #5]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 f885 	bl	8008560 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	791b      	ldrb	r3, [r3, #4]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 f87f 	bl	8008560 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
      break;
 8007468:	e150      	b.n	800770c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800746a:	2112      	movs	r1, #18
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9f1 	bl	8007854 <USBH_Get_DevDesc>
 8007472:	4603      	mov	r3, r0
 8007474:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007482:	e145      	b.n	8007710 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	2b03      	cmp	r3, #3
 8007488:	f040 8142 	bne.w	8007710 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007492:	3301      	adds	r3, #1
 8007494:	b2da      	uxtb	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d903      	bls.n	80074ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	220d      	movs	r2, #13
 80074aa:	701a      	strb	r2, [r3, #0]
      break;
 80074ac:	e130      	b.n	8007710 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	795b      	ldrb	r3, [r3, #5]
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 f853 	bl	8008560 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	791b      	ldrb	r3, [r3, #4]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f84d 	bl	8008560 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	701a      	strb	r2, [r3, #0]
      break;
 80074d2:	e11d      	b.n	8007710 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80074d4:	2101      	movs	r1, #1
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa68 	bl	80079ac <USBH_SetAddress>
 80074dc:	4603      	mov	r3, r0
 80074de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d132      	bne.n	800754c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80074e6:	2002      	movs	r0, #2
 80074e8:	f001 fb30 	bl	8008b4c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2203      	movs	r2, #3
 80074f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	7919      	ldrb	r1, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800750e:	b292      	uxth	r2, r2
 8007510:	9202      	str	r2, [sp, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	9201      	str	r2, [sp, #4]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	4603      	mov	r3, r0
 800751a:	2280      	movs	r2, #128	; 0x80
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 ffcf 	bl	80084c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7959      	ldrb	r1, [r3, #5]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007536:	b292      	uxth	r2, r2
 8007538:	9202      	str	r2, [sp, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	9201      	str	r2, [sp, #4]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4603      	mov	r3, r0
 8007542:	2200      	movs	r2, #0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 ffbb 	bl	80084c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800754a:	e0e3      	b.n	8007714 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b03      	cmp	r3, #3
 8007550:	f040 80e0 	bne.w	8007714 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	220d      	movs	r2, #13
 8007558:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	705a      	strb	r2, [r3, #1]
      break;
 8007560:	e0d8      	b.n	8007714 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007562:	2109      	movs	r1, #9
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f99d 	bl	80078a4 <USBH_Get_CfgDesc>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2204      	movs	r2, #4
 8007578:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800757a:	e0cd      	b.n	8007718 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b03      	cmp	r3, #3
 8007580:	f040 80ca 	bne.w	8007718 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800758a:	3301      	adds	r3, #1
 800758c:	b2da      	uxtb	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800759a:	2b03      	cmp	r3, #3
 800759c:	d903      	bls.n	80075a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	220d      	movs	r2, #13
 80075a2:	701a      	strb	r2, [r3, #0]
      break;
 80075a4:	e0b8      	b.n	8007718 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	795b      	ldrb	r3, [r3, #5]
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 ffd7 	bl	8008560 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	791b      	ldrb	r3, [r3, #4]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 ffd1 	bl	8008560 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
      break;
 80075ca:	e0a5      	b.n	8007718 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f965 	bl	80078a4 <USBH_Get_CfgDesc>
 80075da:	4603      	mov	r3, r0
 80075dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2205      	movs	r2, #5
 80075e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075ea:	e097      	b.n	800771c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	f040 8094 	bne.w	800771c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075fa:	3301      	adds	r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800760a:	2b03      	cmp	r3, #3
 800760c:	d903      	bls.n	8007616 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	220d      	movs	r2, #13
 8007612:	701a      	strb	r2, [r3, #0]
      break;
 8007614:	e082      	b.n	800771c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 ff9f 	bl	8008560 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 ff99 	bl	8008560 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
      break;
 800763a:	e06f      	b.n	800771c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007642:	2b00      	cmp	r3, #0
 8007644:	d019      	beq.n	800767a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007652:	23ff      	movs	r3, #255	; 0xff
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f949 	bl	80078ec <USBH_Get_StringDesc>
 800765a:	4603      	mov	r3, r0
 800765c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d103      	bne.n	800766c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2206      	movs	r2, #6
 8007668:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800766a:	e059      	b.n	8007720 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b03      	cmp	r3, #3
 8007670:	d156      	bne.n	8007720 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2206      	movs	r2, #6
 8007676:	705a      	strb	r2, [r3, #1]
      break;
 8007678:	e052      	b.n	8007720 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2206      	movs	r2, #6
 800767e:	705a      	strb	r2, [r3, #1]
      break;
 8007680:	e04e      	b.n	8007720 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007688:	2b00      	cmp	r3, #0
 800768a:	d019      	beq.n	80076c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007698:	23ff      	movs	r3, #255	; 0xff
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f926 	bl	80078ec <USBH_Get_StringDesc>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2207      	movs	r2, #7
 80076ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076b0:	e038      	b.n	8007724 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d135      	bne.n	8007724 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2207      	movs	r2, #7
 80076bc:	705a      	strb	r2, [r3, #1]
      break;
 80076be:	e031      	b.n	8007724 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2207      	movs	r2, #7
 80076c4:	705a      	strb	r2, [r3, #1]
      break;
 80076c6:	e02d      	b.n	8007724 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d017      	beq.n	8007702 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076de:	23ff      	movs	r3, #255	; 0xff
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f903 	bl	80078ec <USBH_Get_StringDesc>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076f4:	e018      	b.n	8007728 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d115      	bne.n	8007728 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007700:	e012      	b.n	8007728 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
      break;
 8007706:	e00f      	b.n	8007728 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007708:	bf00      	nop
 800770a:	e00e      	b.n	800772a <USBH_HandleEnum+0x3be>
      break;
 800770c:	bf00      	nop
 800770e:	e00c      	b.n	800772a <USBH_HandleEnum+0x3be>
      break;
 8007710:	bf00      	nop
 8007712:	e00a      	b.n	800772a <USBH_HandleEnum+0x3be>
      break;
 8007714:	bf00      	nop
 8007716:	e008      	b.n	800772a <USBH_HandleEnum+0x3be>
      break;
 8007718:	bf00      	nop
 800771a:	e006      	b.n	800772a <USBH_HandleEnum+0x3be>
      break;
 800771c:	bf00      	nop
 800771e:	e004      	b.n	800772a <USBH_HandleEnum+0x3be>
      break;
 8007720:	bf00      	nop
 8007722:	e002      	b.n	800772a <USBH_HandleEnum+0x3be>
      break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <USBH_HandleEnum+0x3be>
      break;
 8007728:	bf00      	nop
  }
  return Status;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f804 	bl	8007776 <USBH_HandleSof>
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b0b      	cmp	r3, #11
 8007786:	d10a      	bne.n	800779e <USBH_HandleSof+0x28>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
  }
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80077b6:	bf00      	nop
}
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80077d2:	bf00      	nop
}
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 f844 	bl	80088ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fe91 	bl	8008560 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	795b      	ldrb	r3, [r3, #5]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fe8b 	bl	8008560 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af02      	add	r7, sp, #8
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	b29b      	uxth	r3, r3
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007872:	2100      	movs	r1, #0
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f864 	bl	8007942 <USBH_GetDescriptor>
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f203 3026 	addw	r0, r3, #806	; 0x326
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	b292      	uxth	r2, r2
 8007894:	4619      	mov	r1, r3
 8007896:	f000 f918 	bl	8007aca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	331c      	adds	r3, #28
 80078b4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80078b6:	887b      	ldrh	r3, [r7, #2]
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c0:	2100      	movs	r1, #0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f83d 	bl	8007942 <USBH_GetDescriptor>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d107      	bne.n	80078e2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80078d2:	887b      	ldrh	r3, [r7, #2]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f987 	bl	8007bec <USBH_ParseCfgDesc>
 80078de:	4603      	mov	r3, r0
 80078e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	607a      	str	r2, [r7, #4]
 80078f6:	461a      	mov	r2, r3
 80078f8:	460b      	mov	r3, r1
 80078fa:	72fb      	strb	r3, [r7, #11]
 80078fc:	4613      	mov	r3, r2
 80078fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007908:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007910:	893b      	ldrh	r3, [r7, #8]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	460b      	mov	r3, r1
 8007916:	2100      	movs	r1, #0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f812 	bl	8007942 <USBH_GetDescriptor>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d107      	bne.n	8007938 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800792e:	893a      	ldrh	r2, [r7, #8]
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fb24 	bl	8007f80 <USBH_ParseStringDesc>
  }

  return status;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	607b      	str	r3, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	72fb      	strb	r3, [r7, #11]
 8007950:	4613      	mov	r3, r2
 8007952:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	789b      	ldrb	r3, [r3, #2]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d11c      	bne.n	8007996 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800795c:	7afb      	ldrb	r3, [r7, #11]
 800795e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007962:	b2da      	uxtb	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2206      	movs	r2, #6
 800796c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	893a      	ldrh	r2, [r7, #8]
 8007972:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007974:	893b      	ldrh	r3, [r7, #8]
 8007976:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800797a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800797e:	d104      	bne.n	800798a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f240 4209 	movw	r2, #1033	; 0x409
 8007986:	829a      	strh	r2, [r3, #20]
 8007988:	e002      	b.n	8007990 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8b3a      	ldrh	r2, [r7, #24]
 8007994:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007996:	8b3b      	ldrh	r3, [r7, #24]
 8007998:	461a      	mov	r2, r3
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 fb3d 	bl	800801c <USBH_CtlReq>
 80079a2:	4603      	mov	r3, r0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	789b      	ldrb	r3, [r3, #2]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d10f      	bne.n	80079e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2205      	movs	r2, #5
 80079ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fb19 	bl	800801c <USBH_CtlReq>
 80079ea:	4603      	mov	r3, r0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	789b      	ldrb	r3, [r3, #2]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d10e      	bne.n	8007a26 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2209      	movs	r2, #9
 8007a12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	887a      	ldrh	r2, [r7, #2]
 8007a18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a26:	2200      	movs	r2, #0
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 faf6 	bl	800801c <USBH_CtlReq>
 8007a30:	4603      	mov	r3, r0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	789b      	ldrb	r3, [r3, #2]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d10f      	bne.n	8007a6e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2203      	movs	r2, #3
 8007a58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2100      	movs	r1, #0
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fad2 	bl	800801c <USBH_CtlReq>
 8007a78:	4603      	mov	r3, r0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	789b      	ldrb	r3, [r3, #2]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10f      	bne.n	8007ab6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 faae 	bl	800801c <USBH_CtlReq>
 8007ac0:	4603      	mov	r3, r0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	781a      	ldrb	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	785a      	ldrb	r2, [r3, #1]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3302      	adds	r3, #2
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	3303      	adds	r3, #3
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4313      	orrs	r3, r2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	791a      	ldrb	r2, [r3, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	795a      	ldrb	r2, [r3, #5]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	799a      	ldrb	r2, [r3, #6]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	79da      	ldrb	r2, [r3, #7]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	79db      	ldrb	r3, [r3, #7]
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	dc11      	bgt.n	8007b50 <USBH_ParseDevDesc+0x86>
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	db16      	blt.n	8007b5e <USBH_ParseDevDesc+0x94>
 8007b30:	3b08      	subs	r3, #8
 8007b32:	2201      	movs	r2, #1
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bf14      	ite	ne
 8007b44:	2301      	movne	r3, #1
 8007b46:	2300      	moveq	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d102      	bne.n	8007b54 <USBH_ParseDevDesc+0x8a>
 8007b4e:	e006      	b.n	8007b5e <USBH_ParseDevDesc+0x94>
 8007b50:	2b40      	cmp	r3, #64	; 0x40
 8007b52:	d104      	bne.n	8007b5e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	79da      	ldrb	r2, [r3, #7]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	71da      	strb	r2, [r3, #7]
      break;
 8007b5c:	e003      	b.n	8007b66 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2240      	movs	r2, #64	; 0x40
 8007b62:	71da      	strb	r2, [r3, #7]
      break;
 8007b64:	bf00      	nop
  }

  if (length > 8U)
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d939      	bls.n	8007be0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	3309      	adds	r3, #9
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	4313      	orrs	r3, r2
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	330a      	adds	r3, #10
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	330b      	adds	r3, #11
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	330d      	adds	r3, #13
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	7b9a      	ldrb	r2, [r3, #14]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	7bda      	ldrb	r2, [r3, #15]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	7c1a      	ldrb	r2, [r3, #16]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	7c5a      	ldrb	r2, [r3, #17]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	745a      	strb	r2, [r3, #17]
  }
}
 8007be0:	bf00      	nop
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08c      	sub	sp, #48	; 0x30
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c00:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	785a      	ldrb	r2, [r3, #1]
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	3302      	adds	r3, #2
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	3303      	adds	r3, #3
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	4313      	orrs	r3, r2
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c48:	bf28      	it	cs
 8007c4a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	791a      	ldrb	r2, [r3, #4]
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	795a      	ldrb	r2, [r3, #5]
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	799a      	ldrb	r2, [r3, #6]
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	79da      	ldrb	r2, [r3, #7]
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	7a1a      	ldrb	r2, [r3, #8]
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b09      	cmp	r3, #9
 8007c82:	d002      	beq.n	8007c8a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	2209      	movs	r2, #9
 8007c88:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	2b09      	cmp	r3, #9
 8007c8e:	f240 809d 	bls.w	8007dcc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c92:	2309      	movs	r3, #9
 8007c94:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c9a:	e081      	b.n	8007da0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c9c:	f107 0316 	add.w	r3, r7, #22
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca4:	f000 f99f 	bl	8007fe6 <USBH_GetNextDesc>
 8007ca8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d176      	bne.n	8007da0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b09      	cmp	r3, #9
 8007cb8:	d002      	beq.n	8007cc0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2209      	movs	r2, #9
 8007cbe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cc4:	221a      	movs	r2, #26
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	3308      	adds	r3, #8
 8007ccc:	6a3a      	ldr	r2, [r7, #32]
 8007cce:	4413      	add	r3, r2
 8007cd0:	3302      	adds	r3, #2
 8007cd2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cd6:	69f8      	ldr	r0, [r7, #28]
 8007cd8:	f000 f87e 	bl	8007dd8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ce6:	e043      	b.n	8007d70 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ce8:	f107 0316 	add.w	r3, r7, #22
 8007cec:	4619      	mov	r1, r3
 8007cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf0:	f000 f979 	bl	8007fe6 <USBH_GetNextDesc>
 8007cf4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	785b      	ldrb	r3, [r3, #1]
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	d138      	bne.n	8007d70 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	795b      	ldrb	r3, [r3, #5]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d10f      	bne.n	8007d26 <USBH_ParseCfgDesc+0x13a>
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	799b      	ldrb	r3, [r3, #6]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d10b      	bne.n	8007d26 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	79db      	ldrb	r3, [r3, #7]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10f      	bne.n	8007d36 <USBH_ParseCfgDesc+0x14a>
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b09      	cmp	r3, #9
 8007d1c:	d00b      	beq.n	8007d36 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	2209      	movs	r2, #9
 8007d22:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d24:	e007      	b.n	8007d36 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b07      	cmp	r3, #7
 8007d2c:	d004      	beq.n	8007d38 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	2207      	movs	r2, #7
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e000      	b.n	8007d38 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d36:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d3c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d40:	3201      	adds	r2, #1
 8007d42:	00d2      	lsls	r2, r2, #3
 8007d44:	211a      	movs	r1, #26
 8007d46:	fb01 f303 	mul.w	r3, r1, r3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	6a3a      	ldr	r2, [r7, #32]
 8007d50:	4413      	add	r3, r2
 8007d52:	3304      	adds	r3, #4
 8007d54:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d58:	69b9      	ldr	r1, [r7, #24]
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f86b 	bl	8007e36 <USBH_ParseEPDesc>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007d66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	791b      	ldrb	r3, [r3, #4]
 8007d74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d204      	bcs.n	8007d86 <USBH_ParseCfgDesc+0x19a>
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	885a      	ldrh	r2, [r3, #2]
 8007d80:	8afb      	ldrh	r3, [r7, #22]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d8b0      	bhi.n	8007ce8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	791b      	ldrb	r3, [r3, #4]
 8007d8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d201      	bcs.n	8007d96 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e01c      	b.n	8007dd0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d805      	bhi.n	8007db4 <USBH_ParseCfgDesc+0x1c8>
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	885a      	ldrh	r2, [r3, #2]
 8007dac:	8afb      	ldrh	r3, [r7, #22]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	f63f af74 	bhi.w	8007c9c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	791b      	ldrb	r3, [r3, #4]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	bf28      	it	cs
 8007dbc:	2302      	movcs	r3, #2
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d201      	bcs.n	8007dcc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e001      	b.n	8007dd0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3730      	adds	r7, #48	; 0x30
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	785a      	ldrb	r2, [r3, #1]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	789a      	ldrb	r2, [r3, #2]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	78da      	ldrb	r2, [r3, #3]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	791a      	ldrb	r2, [r3, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	795a      	ldrb	r2, [r3, #5]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	799a      	ldrb	r2, [r3, #6]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	79da      	ldrb	r2, [r3, #7]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	7a1a      	ldrb	r2, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	721a      	strb	r2, [r3, #8]
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b087      	sub	sp, #28
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	785a      	ldrb	r2, [r3, #1]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	789a      	ldrb	r2, [r3, #2]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	78da      	ldrb	r2, [r3, #3]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3305      	adds	r3, #5
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	799a      	ldrb	r2, [r3, #6]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	889b      	ldrh	r3, [r3, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d102      	bne.n	8007e98 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e92:	2303      	movs	r3, #3
 8007e94:	75fb      	strb	r3, [r7, #23]
 8007e96:	e033      	b.n	8007f00 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	889b      	ldrh	r3, [r3, #4]
 8007e9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	889b      	ldrh	r3, [r3, #4]
 8007eae:	b21a      	sxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	b299      	uxth	r1, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3305      	adds	r3, #5
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d110      	bne.n	8007ef2 <USBH_ParseEPDesc+0xbc>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b299      	uxth	r1, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3305      	adds	r3, #5
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	021b      	lsls	r3, r3, #8
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	b21b      	sxth	r3, r3
 8007eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eee:	b21b      	sxth	r3, r3
 8007ef0:	e001      	b.n	8007ef6 <USBH_ParseEPDesc+0xc0>
 8007ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	b21b      	sxth	r3, r3
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d116      	bne.n	8007f38 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	78db      	ldrb	r3, [r3, #3]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d005      	beq.n	8007f22 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	78db      	ldrb	r3, [r3, #3]
 8007f1a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d127      	bne.n	8007f72 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	799b      	ldrb	r3, [r3, #6]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <USBH_ParseEPDesc+0xfc>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	799b      	ldrb	r3, [r3, #6]
 8007f2e:	2b10      	cmp	r3, #16
 8007f30:	d91f      	bls.n	8007f72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f32:	2303      	movs	r3, #3
 8007f34:	75fb      	strb	r3, [r7, #23]
 8007f36:	e01c      	b.n	8007f72 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	78db      	ldrb	r3, [r3, #3]
 8007f3c:	f003 0303 	and.w	r3, r3, #3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d10a      	bne.n	8007f5a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	799b      	ldrb	r3, [r3, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <USBH_ParseEPDesc+0x11e>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	799b      	ldrb	r3, [r3, #6]
 8007f50:	2b10      	cmp	r3, #16
 8007f52:	d90e      	bls.n	8007f72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f54:	2303      	movs	r3, #3
 8007f56:	75fb      	strb	r3, [r7, #23]
 8007f58:	e00b      	b.n	8007f72 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d105      	bne.n	8007f72 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	799b      	ldrb	r3, [r3, #6]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3301      	adds	r3, #1
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d120      	bne.n	8007fda <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	1e9a      	subs	r2, r3, #2
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bf28      	it	cs
 8007fa4:	4613      	movcs	r3, r2
 8007fa6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3302      	adds	r3, #2
 8007fac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	82fb      	strh	r3, [r7, #22]
 8007fb2:	e00b      	b.n	8007fcc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007fb4:	8afb      	ldrh	r3, [r7, #22]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007fc6:	8afb      	ldrh	r3, [r7, #22]
 8007fc8:	3302      	adds	r3, #2
 8007fca:	82fb      	strh	r3, [r7, #22]
 8007fcc:	8afa      	ldrh	r2, [r7, #22]
 8007fce:	8abb      	ldrh	r3, [r7, #20]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d3ef      	bcc.n	8007fb4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
  }
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	881a      	ldrh	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800800e:	68fb      	ldr	r3, [r7, #12]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800802a:	2301      	movs	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	789b      	ldrb	r3, [r3, #2]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d002      	beq.n	800803c <USBH_CtlReq+0x20>
 8008036:	2b02      	cmp	r3, #2
 8008038:	d00f      	beq.n	800805a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800803a:	e027      	b.n	800808c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2201      	movs	r2, #1
 800804c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2202      	movs	r2, #2
 8008052:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008054:	2301      	movs	r3, #1
 8008056:	75fb      	strb	r3, [r7, #23]
      break;
 8008058:	e018      	b.n	800808c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f81c 	bl	8008098 <USBH_HandleControl>
 8008060:	4603      	mov	r3, r0
 8008062:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <USBH_CtlReq+0x54>
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	2b03      	cmp	r3, #3
 800806e:	d106      	bne.n	800807e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	761a      	strb	r2, [r3, #24]
      break;
 800807c:	e005      	b.n	800808a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d102      	bne.n	800808a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	709a      	strb	r2, [r3, #2]
      break;
 800808a:	bf00      	nop
  }
  return status;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af02      	add	r7, sp, #8
 800809e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080a0:	2301      	movs	r3, #1
 80080a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7e1b      	ldrb	r3, [r3, #24]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	2b0a      	cmp	r3, #10
 80080b0:	f200 8156 	bhi.w	8008360 <USBH_HandleControl+0x2c8>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <USBH_HandleControl+0x24>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080e9 	.word	0x080080e9
 80080c0:	08008103 	.word	0x08008103
 80080c4:	0800816d 	.word	0x0800816d
 80080c8:	08008193 	.word	0x08008193
 80080cc:	080081cb 	.word	0x080081cb
 80080d0:	080081f5 	.word	0x080081f5
 80080d4:	08008247 	.word	0x08008247
 80080d8:	08008269 	.word	0x08008269
 80080dc:	080082a5 	.word	0x080082a5
 80080e0:	080082cb 	.word	0x080082cb
 80080e4:	08008309 	.word	0x08008309
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f103 0110 	add.w	r1, r3, #16
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	795b      	ldrb	r3, [r3, #5]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f943 	bl	8008380 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2202      	movs	r2, #2
 80080fe:	761a      	strb	r2, [r3, #24]
      break;
 8008100:	e139      	b.n	8008376 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	795b      	ldrb	r3, [r3, #5]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fcc5 	bl	8008a98 <USBH_LL_GetURBState>
 800810e:	4603      	mov	r3, r0
 8008110:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d11e      	bne.n	8008156 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7c1b      	ldrb	r3, [r3, #16]
 800811c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008120:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	8adb      	ldrh	r3, [r3, #22]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800812a:	7b7b      	ldrb	r3, [r7, #13]
 800812c:	2b80      	cmp	r3, #128	; 0x80
 800812e:	d103      	bne.n	8008138 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2203      	movs	r2, #3
 8008134:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008136:	e115      	b.n	8008364 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2205      	movs	r2, #5
 800813c:	761a      	strb	r2, [r3, #24]
      break;
 800813e:	e111      	b.n	8008364 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008140:	7b7b      	ldrb	r3, [r7, #13]
 8008142:	2b80      	cmp	r3, #128	; 0x80
 8008144:	d103      	bne.n	800814e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2209      	movs	r2, #9
 800814a:	761a      	strb	r2, [r3, #24]
      break;
 800814c:	e10a      	b.n	8008364 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2207      	movs	r2, #7
 8008152:	761a      	strb	r2, [r3, #24]
      break;
 8008154:	e106      	b.n	8008364 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b04      	cmp	r3, #4
 800815a:	d003      	beq.n	8008164 <USBH_HandleControl+0xcc>
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	2b02      	cmp	r3, #2
 8008160:	f040 8100 	bne.w	8008364 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	220b      	movs	r2, #11
 8008168:	761a      	strb	r2, [r3, #24]
      break;
 800816a:	e0fb      	b.n	8008364 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008172:	b29a      	uxth	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6899      	ldr	r1, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	899a      	ldrh	r2, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f93a 	bl	80083fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2204      	movs	r2, #4
 800818e:	761a      	strb	r2, [r3, #24]
      break;
 8008190:	e0f1      	b.n	8008376 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc7d 	bl	8008a98 <USBH_LL_GetURBState>
 800819e:	4603      	mov	r3, r0
 80081a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d102      	bne.n	80081ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2209      	movs	r2, #9
 80081ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	d102      	bne.n	80081ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80081b4:	2303      	movs	r3, #3
 80081b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081b8:	e0d6      	b.n	8008368 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	f040 80d3 	bne.w	8008368 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	220b      	movs	r2, #11
 80081c6:	761a      	strb	r2, [r3, #24]
      break;
 80081c8:	e0ce      	b.n	8008368 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6899      	ldr	r1, [r3, #8]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	899a      	ldrh	r2, [r3, #12]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	795b      	ldrb	r3, [r3, #5]
 80081d6:	2001      	movs	r0, #1
 80081d8:	9000      	str	r0, [sp, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f8ea 	bl	80083b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2206      	movs	r2, #6
 80081f0:	761a      	strb	r2, [r3, #24]
      break;
 80081f2:	e0c0      	b.n	8008376 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	795b      	ldrb	r3, [r3, #5]
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fc4c 	bl	8008a98 <USBH_LL_GetURBState>
 8008200:	4603      	mov	r3, r0
 8008202:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d103      	bne.n	8008212 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2207      	movs	r2, #7
 800820e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008210:	e0ac      	b.n	800836c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008212:	7bbb      	ldrb	r3, [r7, #14]
 8008214:	2b05      	cmp	r3, #5
 8008216:	d105      	bne.n	8008224 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	220c      	movs	r2, #12
 800821c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800821e:	2303      	movs	r3, #3
 8008220:	73fb      	strb	r3, [r7, #15]
      break;
 8008222:	e0a3      	b.n	800836c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d103      	bne.n	8008232 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2205      	movs	r2, #5
 800822e:	761a      	strb	r2, [r3, #24]
      break;
 8008230:	e09c      	b.n	800836c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b04      	cmp	r3, #4
 8008236:	f040 8099 	bne.w	800836c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	220b      	movs	r2, #11
 800823e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008240:	2302      	movs	r3, #2
 8008242:	73fb      	strb	r3, [r7, #15]
      break;
 8008244:	e092      	b.n	800836c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	791b      	ldrb	r3, [r3, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f8d5 	bl	80083fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800825a:	b29a      	uxth	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2208      	movs	r2, #8
 8008264:	761a      	strb	r2, [r3, #24]

      break;
 8008266:	e086      	b.n	8008376 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	791b      	ldrb	r3, [r3, #4]
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fc12 	bl	8008a98 <USBH_LL_GetURBState>
 8008274:	4603      	mov	r3, r0
 8008276:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d105      	bne.n	800828a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	220d      	movs	r2, #13
 8008282:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008288:	e072      	b.n	8008370 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	2b04      	cmp	r3, #4
 800828e:	d103      	bne.n	8008298 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	220b      	movs	r2, #11
 8008294:	761a      	strb	r2, [r3, #24]
      break;
 8008296:	e06b      	b.n	8008370 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b05      	cmp	r3, #5
 800829c:	d168      	bne.n	8008370 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800829e:	2303      	movs	r3, #3
 80082a0:	73fb      	strb	r3, [r7, #15]
      break;
 80082a2:	e065      	b.n	8008370 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	795b      	ldrb	r3, [r3, #5]
 80082a8:	2201      	movs	r2, #1
 80082aa:	9200      	str	r2, [sp, #0]
 80082ac:	2200      	movs	r2, #0
 80082ae:	2100      	movs	r1, #0
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f87f 	bl	80083b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082bc:	b29a      	uxth	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	220a      	movs	r2, #10
 80082c6:	761a      	strb	r2, [r3, #24]
      break;
 80082c8:	e055      	b.n	8008376 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	795b      	ldrb	r3, [r3, #5]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fbe1 	bl	8008a98 <USBH_LL_GetURBState>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d105      	bne.n	80082ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	220d      	movs	r2, #13
 80082e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082ea:	e043      	b.n	8008374 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d103      	bne.n	80082fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2209      	movs	r2, #9
 80082f6:	761a      	strb	r2, [r3, #24]
      break;
 80082f8:	e03c      	b.n	8008374 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d139      	bne.n	8008374 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	220b      	movs	r2, #11
 8008304:	761a      	strb	r2, [r3, #24]
      break;
 8008306:	e035      	b.n	8008374 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7e5b      	ldrb	r3, [r3, #25]
 800830c:	3301      	adds	r3, #1
 800830e:	b2da      	uxtb	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	765a      	strb	r2, [r3, #25]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7e5b      	ldrb	r3, [r3, #25]
 8008318:	2b02      	cmp	r3, #2
 800831a:	d806      	bhi.n	800832a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008328:	e025      	b.n	8008376 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008330:	2106      	movs	r1, #6
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	795b      	ldrb	r3, [r3, #5]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f90c 	bl	8008560 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	791b      	ldrb	r3, [r3, #4]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f906 	bl	8008560 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800835a:	2302      	movs	r3, #2
 800835c:	73fb      	strb	r3, [r7, #15]
      break;
 800835e:	e00a      	b.n	8008376 <USBH_HandleControl+0x2de>

    default:
      break;
 8008360:	bf00      	nop
 8008362:	e008      	b.n	8008376 <USBH_HandleControl+0x2de>
      break;
 8008364:	bf00      	nop
 8008366:	e006      	b.n	8008376 <USBH_HandleControl+0x2de>
      break;
 8008368:	bf00      	nop
 800836a:	e004      	b.n	8008376 <USBH_HandleControl+0x2de>
      break;
 800836c:	bf00      	nop
 800836e:	e002      	b.n	8008376 <USBH_HandleControl+0x2de>
      break;
 8008370:	bf00      	nop
 8008372:	e000      	b.n	8008376 <USBH_HandleControl+0x2de>
      break;
 8008374:	bf00      	nop
  }

  return status;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af04      	add	r7, sp, #16
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800838e:	79f9      	ldrb	r1, [r7, #7]
 8008390:	2300      	movs	r3, #0
 8008392:	9303      	str	r3, [sp, #12]
 8008394:	2308      	movs	r3, #8
 8008396:	9302      	str	r3, [sp, #8]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	2300      	movs	r3, #0
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	2300      	movs	r3, #0
 80083a2:	2200      	movs	r2, #0
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fb46 	bl	8008a36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af04      	add	r7, sp, #16
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	460b      	mov	r3, r1
 80083c4:	80fb      	strh	r3, [r7, #6]
 80083c6:	4613      	mov	r3, r2
 80083c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083d8:	7979      	ldrb	r1, [r7, #5]
 80083da:	7e3b      	ldrb	r3, [r7, #24]
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	2301      	movs	r3, #1
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	2300      	movs	r3, #0
 80083ec:	2200      	movs	r2, #0
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fb21 	bl	8008a36 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b088      	sub	sp, #32
 8008402:	af04      	add	r7, sp, #16
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	4611      	mov	r1, r2
 800840a:	461a      	mov	r2, r3
 800840c:	460b      	mov	r3, r1
 800840e:	80fb      	strh	r3, [r7, #6]
 8008410:	4613      	mov	r3, r2
 8008412:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008414:	7979      	ldrb	r1, [r7, #5]
 8008416:	2300      	movs	r3, #0
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	9302      	str	r3, [sp, #8]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	2301      	movs	r3, #1
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	2300      	movs	r3, #0
 8008428:	2201      	movs	r2, #1
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 fb03 	bl	8008a36 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008430:	2300      	movs	r3, #0

}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b088      	sub	sp, #32
 800843e:	af04      	add	r7, sp, #16
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	4611      	mov	r1, r2
 8008446:	461a      	mov	r2, r3
 8008448:	460b      	mov	r3, r1
 800844a:	80fb      	strh	r3, [r7, #6]
 800844c:	4613      	mov	r3, r2
 800844e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800845e:	7979      	ldrb	r1, [r7, #5]
 8008460:	7e3b      	ldrb	r3, [r7, #24]
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	2301      	movs	r3, #1
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2302      	movs	r3, #2
 8008472:	2200      	movs	r2, #0
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fade 	bl	8008a36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af04      	add	r7, sp, #16
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4611      	mov	r1, r2
 8008490:	461a      	mov	r2, r3
 8008492:	460b      	mov	r3, r1
 8008494:	80fb      	strh	r3, [r7, #6]
 8008496:	4613      	mov	r3, r2
 8008498:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800849a:	7979      	ldrb	r1, [r7, #5]
 800849c:	2300      	movs	r3, #0
 800849e:	9303      	str	r3, [sp, #12]
 80084a0:	88fb      	ldrh	r3, [r7, #6]
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	2301      	movs	r3, #1
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	2302      	movs	r3, #2
 80084ae:	2201      	movs	r2, #1
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 fac0 	bl	8008a36 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af04      	add	r7, sp, #16
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	4608      	mov	r0, r1
 80084ca:	4611      	mov	r1, r2
 80084cc:	461a      	mov	r2, r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	70fb      	strb	r3, [r7, #3]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70bb      	strb	r3, [r7, #2]
 80084d6:	4613      	mov	r3, r2
 80084d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084da:	7878      	ldrb	r0, [r7, #1]
 80084dc:	78ba      	ldrb	r2, [r7, #2]
 80084de:	78f9      	ldrb	r1, [r7, #3]
 80084e0:	8b3b      	ldrh	r3, [r7, #24]
 80084e2:	9302      	str	r3, [sp, #8]
 80084e4:	7d3b      	ldrb	r3, [r7, #20]
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	7c3b      	ldrb	r3, [r7, #16]
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	4603      	mov	r3, r0
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa53 	bl	800899a <USBH_LL_OpenPipe>

  return USBH_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa72 	bl	80089f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f836 	bl	800859c <USBH_GetFreePipe>
 8008530:	4603      	mov	r3, r0
 8008532:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008534:	89fb      	ldrh	r3, [r7, #14]
 8008536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800853a:	4293      	cmp	r3, r2
 800853c:	d00a      	beq.n	8008554 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	89fb      	ldrh	r3, [r7, #14]
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	33e0      	adds	r3, #224	; 0xe0
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008554:	89fb      	ldrh	r3, [r7, #14]
 8008556:	b2db      	uxtb	r3, r3
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	2b0f      	cmp	r3, #15
 8008570:	d80d      	bhi.n	800858e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	33e0      	adds	r3, #224	; 0xe0
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	33e0      	adds	r3, #224	; 0xe0
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	440b      	add	r3, r1
 800858c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
 80085ac:	e00f      	b.n	80085ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	33e0      	adds	r3, #224	; 0xe0
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d102      	bne.n	80085c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	e007      	b.n	80085d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	3301      	adds	r3, #1
 80085cc:	73fb      	strb	r3, [r7, #15]
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	2b0f      	cmp	r3, #15
 80085d2:	d9ec      	bls.n	80085ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085e8:	2201      	movs	r2, #1
 80085ea:	490e      	ldr	r1, [pc, #56]	; (8008624 <MX_USB_HOST_Init+0x40>)
 80085ec:	480e      	ldr	r0, [pc, #56]	; (8008628 <MX_USB_HOST_Init+0x44>)
 80085ee:	f7fe fba7 	bl	8006d40 <USBH_Init>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085f8:	f7f8 fb18 	bl	8000c2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085fc:	490b      	ldr	r1, [pc, #44]	; (800862c <MX_USB_HOST_Init+0x48>)
 80085fe:	480a      	ldr	r0, [pc, #40]	; (8008628 <MX_USB_HOST_Init+0x44>)
 8008600:	f7fe fc2c 	bl	8006e5c <USBH_RegisterClass>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800860a:	f7f8 fb0f 	bl	8000c2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800860e:	4806      	ldr	r0, [pc, #24]	; (8008628 <MX_USB_HOST_Init+0x44>)
 8008610:	f7fe fcb0 	bl	8006f74 <USBH_Start>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800861a:	f7f8 fb07 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800861e:	bf00      	nop
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	08008645 	.word	0x08008645
 8008628:	20000208 	.word	0x20000208
 800862c:	20000010 	.word	0x20000010

08008630 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008634:	4802      	ldr	r0, [pc, #8]	; (8008640 <MX_USB_HOST_Process+0x10>)
 8008636:	f7fe fcad 	bl	8006f94 <USBH_Process>
}
 800863a:	bf00      	nop
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20000208 	.word	0x20000208

08008644 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	3b01      	subs	r3, #1
 8008654:	2b04      	cmp	r3, #4
 8008656:	d819      	bhi.n	800868c <USBH_UserProcess+0x48>
 8008658:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <USBH_UserProcess+0x1c>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	0800868d 	.word	0x0800868d
 8008664:	0800867d 	.word	0x0800867d
 8008668:	0800868d 	.word	0x0800868d
 800866c:	08008685 	.word	0x08008685
 8008670:	08008675 	.word	0x08008675
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008674:	4b09      	ldr	r3, [pc, #36]	; (800869c <USBH_UserProcess+0x58>)
 8008676:	2203      	movs	r2, #3
 8008678:	701a      	strb	r2, [r3, #0]
  break;
 800867a:	e008      	b.n	800868e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800867c:	4b07      	ldr	r3, [pc, #28]	; (800869c <USBH_UserProcess+0x58>)
 800867e:	2202      	movs	r2, #2
 8008680:	701a      	strb	r2, [r3, #0]
  break;
 8008682:	e004      	b.n	800868e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008684:	4b05      	ldr	r3, [pc, #20]	; (800869c <USBH_UserProcess+0x58>)
 8008686:	2201      	movs	r2, #1
 8008688:	701a      	strb	r2, [r3, #0]
  break;
 800868a:	e000      	b.n	800868e <USBH_UserProcess+0x4a>

  default:
  break;
 800868c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	200005e0 	.word	0x200005e0

080086a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08a      	sub	sp, #40	; 0x28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086a8:	f107 0314 	add.w	r3, r7, #20
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	609a      	str	r2, [r3, #8]
 80086b4:	60da      	str	r2, [r3, #12]
 80086b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086c0:	d147      	bne.n	8008752 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086c2:	2300      	movs	r3, #0
 80086c4:	613b      	str	r3, [r7, #16]
 80086c6:	4b25      	ldr	r3, [pc, #148]	; (800875c <HAL_HCD_MspInit+0xbc>)
 80086c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ca:	4a24      	ldr	r2, [pc, #144]	; (800875c <HAL_HCD_MspInit+0xbc>)
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	6313      	str	r3, [r2, #48]	; 0x30
 80086d2:	4b22      	ldr	r3, [pc, #136]	; (800875c <HAL_HCD_MspInit+0xbc>)
 80086d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	613b      	str	r3, [r7, #16]
 80086dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086ec:	f107 0314 	add.w	r3, r7, #20
 80086f0:	4619      	mov	r1, r3
 80086f2:	481b      	ldr	r0, [pc, #108]	; (8008760 <HAL_HCD_MspInit+0xc0>)
 80086f4:	f7f8 fe8a 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80086fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086fe:	2302      	movs	r3, #2
 8008700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008706:	2300      	movs	r3, #0
 8008708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800870a:	230a      	movs	r3, #10
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800870e:	f107 0314 	add.w	r3, r7, #20
 8008712:	4619      	mov	r1, r3
 8008714:	4812      	ldr	r0, [pc, #72]	; (8008760 <HAL_HCD_MspInit+0xc0>)
 8008716:	f7f8 fe79 	bl	800140c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800871a:	4b10      	ldr	r3, [pc, #64]	; (800875c <HAL_HCD_MspInit+0xbc>)
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	4a0f      	ldr	r2, [pc, #60]	; (800875c <HAL_HCD_MspInit+0xbc>)
 8008720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008724:	6353      	str	r3, [r2, #52]	; 0x34
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	4b0c      	ldr	r3, [pc, #48]	; (800875c <HAL_HCD_MspInit+0xbc>)
 800872c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872e:	4a0b      	ldr	r2, [pc, #44]	; (800875c <HAL_HCD_MspInit+0xbc>)
 8008730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008734:	6453      	str	r3, [r2, #68]	; 0x44
 8008736:	4b09      	ldr	r3, [pc, #36]	; (800875c <HAL_HCD_MspInit+0xbc>)
 8008738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	2043      	movs	r0, #67	; 0x43
 8008748:	f7f8 fe29 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800874c:	2043      	movs	r0, #67	; 0x43
 800874e:	f7f8 fe42 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008752:	bf00      	nop
 8008754:	3728      	adds	r7, #40	; 0x28
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	40023800 	.word	0x40023800
 8008760:	40020000 	.word	0x40020000

08008764 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008772:	4618      	mov	r0, r3
 8008774:	f7fe ffed 	bl	8007752 <USBH_LL_IncTimer>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff f825 	bl	80077de <USBH_LL_Connect>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff f82e 	bl	800780c <USBH_LL_Disconnect>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
 80087c4:	4613      	mov	r3, r2
 80087c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe ffdf 	bl	80077a6 <USBH_LL_PortEnabled>
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe ffdf 	bl	80077c2 <USBH_LL_PortDisabled>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800881a:	2b01      	cmp	r3, #1
 800881c:	d12a      	bne.n	8008874 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800881e:	4a18      	ldr	r2, [pc, #96]	; (8008880 <USBH_LL_Init+0x74>)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a15      	ldr	r2, [pc, #84]	; (8008880 <USBH_LL_Init+0x74>)
 800882a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800882e:	4b14      	ldr	r3, [pc, #80]	; (8008880 <USBH_LL_Init+0x74>)
 8008830:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008834:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <USBH_LL_Init+0x74>)
 8008838:	2208      	movs	r2, #8
 800883a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <USBH_LL_Init+0x74>)
 800883e:	2201      	movs	r2, #1
 8008840:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008842:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <USBH_LL_Init+0x74>)
 8008844:	2200      	movs	r2, #0
 8008846:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008848:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <USBH_LL_Init+0x74>)
 800884a:	2202      	movs	r2, #2
 800884c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800884e:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <USBH_LL_Init+0x74>)
 8008850:	2200      	movs	r2, #0
 8008852:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008854:	480a      	ldr	r0, [pc, #40]	; (8008880 <USBH_LL_Init+0x74>)
 8008856:	f7f8 ffbf 	bl	80017d8 <HAL_HCD_Init>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008860:	f7f8 f9e4 	bl	8000c2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008864:	4806      	ldr	r0, [pc, #24]	; (8008880 <USBH_LL_Init+0x74>)
 8008866:	f7f9 fba2 	bl	8001fae <HAL_HCD_GetCurrentFrame>
 800886a:	4603      	mov	r3, r0
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7fe ff60 	bl	8007734 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	200005e4 	.word	0x200005e4

08008884 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800889a:	4618      	mov	r0, r3
 800889c:	f7f9 fb11 	bl	8001ec2 <HAL_HCD_Start>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f95c 	bl	8008b64 <USBH_Get_USB_Status>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7f9 fb19 	bl	8001f08 <HAL_HCD_Stop>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 f941 	bl	8008b64 <USBH_Get_USB_Status>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008902:	4618      	mov	r0, r3
 8008904:	f7f9 fb61 	bl	8001fca <HAL_HCD_GetCurrentSpeed>
 8008908:	4603      	mov	r3, r0
 800890a:	2b02      	cmp	r3, #2
 800890c:	d00c      	beq.n	8008928 <USBH_LL_GetSpeed+0x38>
 800890e:	2b02      	cmp	r3, #2
 8008910:	d80d      	bhi.n	800892e <USBH_LL_GetSpeed+0x3e>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <USBH_LL_GetSpeed+0x2c>
 8008916:	2b01      	cmp	r3, #1
 8008918:	d003      	beq.n	8008922 <USBH_LL_GetSpeed+0x32>
 800891a:	e008      	b.n	800892e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]
    break;
 8008920:	e008      	b.n	8008934 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008922:	2301      	movs	r3, #1
 8008924:	73fb      	strb	r3, [r7, #15]
    break;
 8008926:	e005      	b.n	8008934 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008928:	2302      	movs	r3, #2
 800892a:	73fb      	strb	r3, [r7, #15]
    break;
 800892c:	e002      	b.n	8008934 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800892e:	2301      	movs	r3, #1
 8008930:	73fb      	strb	r3, [r7, #15]
    break;
 8008932:	bf00      	nop
  }
  return  speed;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008954:	4618      	mov	r0, r3
 8008956:	f7f9 faf4 	bl	8001f42 <HAL_HCD_ResetPort>
 800895a:	4603      	mov	r3, r0
 800895c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 f8ff 	bl	8008b64 <USBH_Get_USB_Status>
 8008966:	4603      	mov	r3, r0
 8008968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896a:	7bbb      	ldrb	r3, [r7, #14]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008986:	78fa      	ldrb	r2, [r7, #3]
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f7f9 fafb 	bl	8001f86 <HAL_HCD_HC_GetXferCount>
 8008990:	4603      	mov	r3, r0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800899a:	b590      	push	{r4, r7, lr}
 800899c:	b089      	sub	sp, #36	; 0x24
 800899e:	af04      	add	r7, sp, #16
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	4608      	mov	r0, r1
 80089a4:	4611      	mov	r1, r2
 80089a6:	461a      	mov	r2, r3
 80089a8:	4603      	mov	r3, r0
 80089aa:	70fb      	strb	r3, [r7, #3]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70bb      	strb	r3, [r7, #2]
 80089b0:	4613      	mov	r3, r2
 80089b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80089c2:	787c      	ldrb	r4, [r7, #1]
 80089c4:	78ba      	ldrb	r2, [r7, #2]
 80089c6:	78f9      	ldrb	r1, [r7, #3]
 80089c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089ca:	9302      	str	r3, [sp, #8]
 80089cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4623      	mov	r3, r4
 80089da:	f7f8 ff5f 	bl	800189c <HAL_HCD_HC_Init>
 80089de:	4603      	mov	r3, r0
 80089e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 f8bd 	bl	8008b64 <USBH_Get_USB_Status>
 80089ea:	4603      	mov	r3, r0
 80089ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd90      	pop	{r4, r7, pc}

080089f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7f8 ffcf 	bl	80019ba <HAL_HCD_HC_Halt>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f89e 	bl	8008b64 <USBH_Get_USB_Status>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a36:	b590      	push	{r4, r7, lr}
 8008a38:	b089      	sub	sp, #36	; 0x24
 8008a3a:	af04      	add	r7, sp, #16
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	4608      	mov	r0, r1
 8008a40:	4611      	mov	r1, r2
 8008a42:	461a      	mov	r2, r3
 8008a44:	4603      	mov	r3, r0
 8008a46:	70fb      	strb	r3, [r7, #3]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70bb      	strb	r3, [r7, #2]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a5e:	787c      	ldrb	r4, [r7, #1]
 8008a60:	78ba      	ldrb	r2, [r7, #2]
 8008a62:	78f9      	ldrb	r1, [r7, #3]
 8008a64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a6c:	9302      	str	r3, [sp, #8]
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	4623      	mov	r3, r4
 8008a7a:	f7f8 ffc1 	bl	8001a00 <HAL_HCD_HC_SubmitRequest>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f86d 	bl	8008b64 <USBH_Get_USB_Status>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd90      	pop	{r4, r7, pc}

08008a98 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aaa:	78fa      	ldrb	r2, [r7, #3]
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7f9 fa55 	bl	8001f5e <HAL_HCD_HC_GetURBState>
 8008ab4:	4603      	mov	r3, r0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d103      	bne.n	8008adc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f870 	bl	8008bbc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008adc:	20c8      	movs	r0, #200	; 0xc8
 8008ade:	f7f8 fb5f 	bl	80011a0 <HAL_Delay>
  return USBH_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
 8008af8:	4613      	mov	r3, r2
 8008afa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b02:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	212c      	movs	r1, #44	; 0x2c
 8008b0a:	fb01 f303 	mul.w	r3, r1, r3
 8008b0e:	4413      	add	r3, r2
 8008b10:	333b      	adds	r3, #59	; 0x3b
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d009      	beq.n	8008b2c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	212c      	movs	r1, #44	; 0x2c
 8008b1e:	fb01 f303 	mul.w	r3, r1, r3
 8008b22:	4413      	add	r3, r2
 8008b24:	3354      	adds	r3, #84	; 0x54
 8008b26:	78ba      	ldrb	r2, [r7, #2]
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e008      	b.n	8008b3e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	212c      	movs	r1, #44	; 0x2c
 8008b32:	fb01 f303 	mul.w	r3, r1, r3
 8008b36:	4413      	add	r3, r2
 8008b38:	3355      	adds	r3, #85	; 0x55
 8008b3a:	78ba      	ldrb	r2, [r7, #2]
 8008b3c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7f8 fb23 	bl	80011a0 <HAL_Delay>
}
 8008b5a:	bf00      	nop
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d817      	bhi.n	8008ba8 <USBH_Get_USB_Status+0x44>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <USBH_Get_USB_Status+0x1c>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008b97 	.word	0x08008b97
 8008b88:	08008b9d 	.word	0x08008b9d
 8008b8c:	08008ba3 	.word	0x08008ba3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
    break;
 8008b94:	e00b      	b.n	8008bae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b96:	2302      	movs	r3, #2
 8008b98:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9a:	e008      	b.n	8008bae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba0:	e005      	b.n	8008bae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba6:	e002      	b.n	8008bae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	73fb      	strb	r3, [r7, #15]
    break;
 8008bac:	bf00      	nop
  }
  return usb_status;
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008bc6:	79fb      	ldrb	r3, [r7, #7]
 8008bc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
 8008bd4:	e001      	b.n	8008bda <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	2101      	movs	r1, #1
 8008be0:	4803      	ldr	r0, [pc, #12]	; (8008bf0 <MX_DriverVbusFS+0x34>)
 8008be2:	f7f8 fdc7 	bl	8001774 <HAL_GPIO_WritePin>
}
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	40020800 	.word	0x40020800

08008bf4 <__errno>:
 8008bf4:	4b01      	ldr	r3, [pc, #4]	; (8008bfc <__errno+0x8>)
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000030 	.word	0x20000030

08008c00 <__libc_init_array>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4d0d      	ldr	r5, [pc, #52]	; (8008c38 <__libc_init_array+0x38>)
 8008c04:	4c0d      	ldr	r4, [pc, #52]	; (8008c3c <__libc_init_array+0x3c>)
 8008c06:	1b64      	subs	r4, r4, r5
 8008c08:	10a4      	asrs	r4, r4, #2
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	42a6      	cmp	r6, r4
 8008c0e:	d109      	bne.n	8008c24 <__libc_init_array+0x24>
 8008c10:	4d0b      	ldr	r5, [pc, #44]	; (8008c40 <__libc_init_array+0x40>)
 8008c12:	4c0c      	ldr	r4, [pc, #48]	; (8008c44 <__libc_init_array+0x44>)
 8008c14:	f000 f92e 	bl	8008e74 <_init>
 8008c18:	1b64      	subs	r4, r4, r5
 8008c1a:	10a4      	asrs	r4, r4, #2
 8008c1c:	2600      	movs	r6, #0
 8008c1e:	42a6      	cmp	r6, r4
 8008c20:	d105      	bne.n	8008c2e <__libc_init_array+0x2e>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c28:	4798      	blx	r3
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7ee      	b.n	8008c0c <__libc_init_array+0xc>
 8008c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c32:	4798      	blx	r3
 8008c34:	3601      	adds	r6, #1
 8008c36:	e7f2      	b.n	8008c1e <__libc_init_array+0x1e>
 8008c38:	08008eb0 	.word	0x08008eb0
 8008c3c:	08008eb0 	.word	0x08008eb0
 8008c40:	08008eb0 	.word	0x08008eb0
 8008c44:	08008eb4 	.word	0x08008eb4

08008c48 <malloc>:
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <malloc+0xc>)
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f000 b87f 	b.w	8008d50 <_malloc_r>
 8008c52:	bf00      	nop
 8008c54:	20000030 	.word	0x20000030

08008c58 <free>:
 8008c58:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <free+0xc>)
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	f000 b80b 	b.w	8008c78 <_free_r>
 8008c62:	bf00      	nop
 8008c64:	20000030 	.word	0x20000030

08008c68 <memset>:
 8008c68:	4402      	add	r2, r0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d100      	bne.n	8008c72 <memset+0xa>
 8008c70:	4770      	bx	lr
 8008c72:	f803 1b01 	strb.w	r1, [r3], #1
 8008c76:	e7f9      	b.n	8008c6c <memset+0x4>

08008c78 <_free_r>:
 8008c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d044      	beq.n	8008d08 <_free_r+0x90>
 8008c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c82:	9001      	str	r0, [sp, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f1a1 0404 	sub.w	r4, r1, #4
 8008c8a:	bfb8      	it	lt
 8008c8c:	18e4      	addlt	r4, r4, r3
 8008c8e:	f000 f8e3 	bl	8008e58 <__malloc_lock>
 8008c92:	4a1e      	ldr	r2, [pc, #120]	; (8008d0c <_free_r+0x94>)
 8008c94:	9801      	ldr	r0, [sp, #4]
 8008c96:	6813      	ldr	r3, [r2, #0]
 8008c98:	b933      	cbnz	r3, 8008ca8 <_free_r+0x30>
 8008c9a:	6063      	str	r3, [r4, #4]
 8008c9c:	6014      	str	r4, [r2, #0]
 8008c9e:	b003      	add	sp, #12
 8008ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ca4:	f000 b8de 	b.w	8008e64 <__malloc_unlock>
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	d908      	bls.n	8008cbe <_free_r+0x46>
 8008cac:	6825      	ldr	r5, [r4, #0]
 8008cae:	1961      	adds	r1, r4, r5
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf01      	itttt	eq
 8008cb4:	6819      	ldreq	r1, [r3, #0]
 8008cb6:	685b      	ldreq	r3, [r3, #4]
 8008cb8:	1949      	addeq	r1, r1, r5
 8008cba:	6021      	streq	r1, [r4, #0]
 8008cbc:	e7ed      	b.n	8008c9a <_free_r+0x22>
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	b10b      	cbz	r3, 8008cc8 <_free_r+0x50>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d9fa      	bls.n	8008cbe <_free_r+0x46>
 8008cc8:	6811      	ldr	r1, [r2, #0]
 8008cca:	1855      	adds	r5, r2, r1
 8008ccc:	42a5      	cmp	r5, r4
 8008cce:	d10b      	bne.n	8008ce8 <_free_r+0x70>
 8008cd0:	6824      	ldr	r4, [r4, #0]
 8008cd2:	4421      	add	r1, r4
 8008cd4:	1854      	adds	r4, r2, r1
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	6011      	str	r1, [r2, #0]
 8008cda:	d1e0      	bne.n	8008c9e <_free_r+0x26>
 8008cdc:	681c      	ldr	r4, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	6053      	str	r3, [r2, #4]
 8008ce2:	4421      	add	r1, r4
 8008ce4:	6011      	str	r1, [r2, #0]
 8008ce6:	e7da      	b.n	8008c9e <_free_r+0x26>
 8008ce8:	d902      	bls.n	8008cf0 <_free_r+0x78>
 8008cea:	230c      	movs	r3, #12
 8008cec:	6003      	str	r3, [r0, #0]
 8008cee:	e7d6      	b.n	8008c9e <_free_r+0x26>
 8008cf0:	6825      	ldr	r5, [r4, #0]
 8008cf2:	1961      	adds	r1, r4, r5
 8008cf4:	428b      	cmp	r3, r1
 8008cf6:	bf04      	itt	eq
 8008cf8:	6819      	ldreq	r1, [r3, #0]
 8008cfa:	685b      	ldreq	r3, [r3, #4]
 8008cfc:	6063      	str	r3, [r4, #4]
 8008cfe:	bf04      	itt	eq
 8008d00:	1949      	addeq	r1, r1, r5
 8008d02:	6021      	streq	r1, [r4, #0]
 8008d04:	6054      	str	r4, [r2, #4]
 8008d06:	e7ca      	b.n	8008c9e <_free_r+0x26>
 8008d08:	b003      	add	sp, #12
 8008d0a:	bd30      	pop	{r4, r5, pc}
 8008d0c:	200008e8 	.word	0x200008e8

08008d10 <sbrk_aligned>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	4e0e      	ldr	r6, [pc, #56]	; (8008d4c <sbrk_aligned+0x3c>)
 8008d14:	460c      	mov	r4, r1
 8008d16:	6831      	ldr	r1, [r6, #0]
 8008d18:	4605      	mov	r5, r0
 8008d1a:	b911      	cbnz	r1, 8008d22 <sbrk_aligned+0x12>
 8008d1c:	f000 f88c 	bl	8008e38 <_sbrk_r>
 8008d20:	6030      	str	r0, [r6, #0]
 8008d22:	4621      	mov	r1, r4
 8008d24:	4628      	mov	r0, r5
 8008d26:	f000 f887 	bl	8008e38 <_sbrk_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d00a      	beq.n	8008d44 <sbrk_aligned+0x34>
 8008d2e:	1cc4      	adds	r4, r0, #3
 8008d30:	f024 0403 	bic.w	r4, r4, #3
 8008d34:	42a0      	cmp	r0, r4
 8008d36:	d007      	beq.n	8008d48 <sbrk_aligned+0x38>
 8008d38:	1a21      	subs	r1, r4, r0
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 f87c 	bl	8008e38 <_sbrk_r>
 8008d40:	3001      	adds	r0, #1
 8008d42:	d101      	bne.n	8008d48 <sbrk_aligned+0x38>
 8008d44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008d48:	4620      	mov	r0, r4
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	200008ec 	.word	0x200008ec

08008d50 <_malloc_r>:
 8008d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	1ccd      	adds	r5, r1, #3
 8008d56:	f025 0503 	bic.w	r5, r5, #3
 8008d5a:	3508      	adds	r5, #8
 8008d5c:	2d0c      	cmp	r5, #12
 8008d5e:	bf38      	it	cc
 8008d60:	250c      	movcc	r5, #12
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	4607      	mov	r7, r0
 8008d66:	db01      	blt.n	8008d6c <_malloc_r+0x1c>
 8008d68:	42a9      	cmp	r1, r5
 8008d6a:	d905      	bls.n	8008d78 <_malloc_r+0x28>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	2600      	movs	r6, #0
 8008d72:	4630      	mov	r0, r6
 8008d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d78:	4e2e      	ldr	r6, [pc, #184]	; (8008e34 <_malloc_r+0xe4>)
 8008d7a:	f000 f86d 	bl	8008e58 <__malloc_lock>
 8008d7e:	6833      	ldr	r3, [r6, #0]
 8008d80:	461c      	mov	r4, r3
 8008d82:	bb34      	cbnz	r4, 8008dd2 <_malloc_r+0x82>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff ffc2 	bl	8008d10 <sbrk_aligned>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	4604      	mov	r4, r0
 8008d90:	d14d      	bne.n	8008e2e <_malloc_r+0xde>
 8008d92:	6834      	ldr	r4, [r6, #0]
 8008d94:	4626      	mov	r6, r4
 8008d96:	2e00      	cmp	r6, #0
 8008d98:	d140      	bne.n	8008e1c <_malloc_r+0xcc>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4638      	mov	r0, r7
 8008da0:	eb04 0803 	add.w	r8, r4, r3
 8008da4:	f000 f848 	bl	8008e38 <_sbrk_r>
 8008da8:	4580      	cmp	r8, r0
 8008daa:	d13a      	bne.n	8008e22 <_malloc_r+0xd2>
 8008dac:	6821      	ldr	r1, [r4, #0]
 8008dae:	3503      	adds	r5, #3
 8008db0:	1a6d      	subs	r5, r5, r1
 8008db2:	f025 0503 	bic.w	r5, r5, #3
 8008db6:	3508      	adds	r5, #8
 8008db8:	2d0c      	cmp	r5, #12
 8008dba:	bf38      	it	cc
 8008dbc:	250c      	movcc	r5, #12
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff ffa5 	bl	8008d10 <sbrk_aligned>
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d02b      	beq.n	8008e22 <_malloc_r+0xd2>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	442b      	add	r3, r5
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	e00e      	b.n	8008df0 <_malloc_r+0xa0>
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	1b52      	subs	r2, r2, r5
 8008dd6:	d41e      	bmi.n	8008e16 <_malloc_r+0xc6>
 8008dd8:	2a0b      	cmp	r2, #11
 8008dda:	d916      	bls.n	8008e0a <_malloc_r+0xba>
 8008ddc:	1961      	adds	r1, r4, r5
 8008dde:	42a3      	cmp	r3, r4
 8008de0:	6025      	str	r5, [r4, #0]
 8008de2:	bf18      	it	ne
 8008de4:	6059      	strne	r1, [r3, #4]
 8008de6:	6863      	ldr	r3, [r4, #4]
 8008de8:	bf08      	it	eq
 8008dea:	6031      	streq	r1, [r6, #0]
 8008dec:	5162      	str	r2, [r4, r5]
 8008dee:	604b      	str	r3, [r1, #4]
 8008df0:	4638      	mov	r0, r7
 8008df2:	f104 060b 	add.w	r6, r4, #11
 8008df6:	f000 f835 	bl	8008e64 <__malloc_unlock>
 8008dfa:	f026 0607 	bic.w	r6, r6, #7
 8008dfe:	1d23      	adds	r3, r4, #4
 8008e00:	1af2      	subs	r2, r6, r3
 8008e02:	d0b6      	beq.n	8008d72 <_malloc_r+0x22>
 8008e04:	1b9b      	subs	r3, r3, r6
 8008e06:	50a3      	str	r3, [r4, r2]
 8008e08:	e7b3      	b.n	8008d72 <_malloc_r+0x22>
 8008e0a:	6862      	ldr	r2, [r4, #4]
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	bf0c      	ite	eq
 8008e10:	6032      	streq	r2, [r6, #0]
 8008e12:	605a      	strne	r2, [r3, #4]
 8008e14:	e7ec      	b.n	8008df0 <_malloc_r+0xa0>
 8008e16:	4623      	mov	r3, r4
 8008e18:	6864      	ldr	r4, [r4, #4]
 8008e1a:	e7b2      	b.n	8008d82 <_malloc_r+0x32>
 8008e1c:	4634      	mov	r4, r6
 8008e1e:	6876      	ldr	r6, [r6, #4]
 8008e20:	e7b9      	b.n	8008d96 <_malloc_r+0x46>
 8008e22:	230c      	movs	r3, #12
 8008e24:	603b      	str	r3, [r7, #0]
 8008e26:	4638      	mov	r0, r7
 8008e28:	f000 f81c 	bl	8008e64 <__malloc_unlock>
 8008e2c:	e7a1      	b.n	8008d72 <_malloc_r+0x22>
 8008e2e:	6025      	str	r5, [r4, #0]
 8008e30:	e7de      	b.n	8008df0 <_malloc_r+0xa0>
 8008e32:	bf00      	nop
 8008e34:	200008e8 	.word	0x200008e8

08008e38 <_sbrk_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d06      	ldr	r5, [pc, #24]	; (8008e54 <_sbrk_r+0x1c>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7f8 f8c8 	bl	8000fd8 <_sbrk>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d102      	bne.n	8008e52 <_sbrk_r+0x1a>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	b103      	cbz	r3, 8008e52 <_sbrk_r+0x1a>
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	200008f0 	.word	0x200008f0

08008e58 <__malloc_lock>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__malloc_lock+0x8>)
 8008e5a:	f000 b809 	b.w	8008e70 <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	200008f4 	.word	0x200008f4

08008e64 <__malloc_unlock>:
 8008e64:	4801      	ldr	r0, [pc, #4]	; (8008e6c <__malloc_unlock+0x8>)
 8008e66:	f000 b804 	b.w	8008e72 <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	200008f4 	.word	0x200008f4

08008e70 <__retarget_lock_acquire_recursive>:
 8008e70:	4770      	bx	lr

08008e72 <__retarget_lock_release_recursive>:
 8008e72:	4770      	bx	lr

08008e74 <_init>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	bf00      	nop
 8008e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7a:	bc08      	pop	{r3}
 8008e7c:	469e      	mov	lr, r3
 8008e7e:	4770      	bx	lr

08008e80 <_fini>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr
